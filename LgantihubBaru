																															--[[
	// Ganteng Hub UI LIBRARY \\
	Author: SonicTuru, Chillz, Isnahamzah
	This belongs to Ganteng hub Developers.
	
	
	// Credits \\
	- Isnahamzah (CEO)
	- SonicTuru (Ganteng Hub: Blox Fruit Developer)
	- Chillz (UI Developer)

	"bug udah ilang tuhhhhhh" - Chillz
																															]]


--// Source \\

-- Instances: 132 | Scripts: 0 | Modules: 1
local GANTENGLIB = {};

-- StarterGui.GantengHubUI
GANTENGLIB["1"] = Instance.new("ScreenGui")
if game:GetService("RunService"):IsStudio() then
	GANTENGLIB["1"].Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
else
	GANTENGLIB["1"].Parent = gethui() or game.CoreGui
end
GANTENGLIB["1"]["IgnoreGuiInset"] = true;
GANTENGLIB["1"]["ScreenInsets"] = Enum.ScreenInsets.DeviceSafeInsets;
GANTENGLIB["1"]["Name"] = [[GantengHubUI]];
GANTENGLIB["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
GANTENGLIB["1"]["ResetOnSpawn"] = false;

-- StarterGui.GantengHubUI.MainFrame
GANTENGLIB["2"] = Instance.new("Frame", GANTENGLIB["1"]);
GANTENGLIB["2"]["BorderSizePixel"] = 0;
GANTENGLIB["2"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["2"]["BackgroundTransparency"] = 0.25;
GANTENGLIB["2"]["Size"] = UDim2.new(0, 519, 0, 276);
GANTENGLIB["2"]["ClipsDescendants"] = true;
GANTENGLIB["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["2"]["Position"] = UDim2.new(0.5244791507720947, 0, 0.5129959583282471, 0);
GANTENGLIB["2"]["Visible"] = false;
GANTENGLIB["2"]["Name"] = [[MainFrame]];

-- StarterGui.GantengHubUI.MainFrame.SideFrame
GANTENGLIB["3"] = Instance.new("Frame", GANTENGLIB["2"]);
GANTENGLIB["3"]["BorderSizePixel"] = 0;
GANTENGLIB["3"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["3"]["BackgroundTransparency"] = 0.3499999940395355;
GANTENGLIB["3"]["Size"] = UDim2.new(0.038927141577005386, 117, 1, 0);
GANTENGLIB["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3"]["Name"] = [[SideFrame]];

-- StarterGui.GantengHubUI.MainFrame.SideFrame.TextLabel
GANTENGLIB["4"] = Instance.new("TextLabel", GANTENGLIB["3"]);
GANTENGLIB["4"]["BorderSizePixel"] = 0;
GANTENGLIB["4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["4"]["TextSize"] = 23;
GANTENGLIB["4"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["4"]["Size"] = UDim2.new(0, 137, 0, 38);
GANTENGLIB["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["4"]["Text"] = [[Ganteng Hub]];
GANTENGLIB["4"]["BackgroundTransparency"] = 1;
GANTENGLIB["4"]["Position"] = UDim2.new(0, 0, 0.022222215309739113, 0);

-- StarterGui.GantengHubUI.MainFrame.SideFrame.SideTabButtons
GANTENGLIB["5"] = Instance.new("Frame", GANTENGLIB["3"]);
GANTENGLIB["5"]["BorderSizePixel"] = 0;
GANTENGLIB["5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["5"]["BackgroundTransparency"] = 1;
GANTENGLIB["5"]["Size"] = UDim2.new(1, 0, 0.022948002442717552, 186);
GANTENGLIB["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["5"]["Position"] = UDim2.new(0, 0, 0.19629636406898499, 0);
GANTENGLIB["5"]["Name"] = [[SideTabButtons]];

-- StarterGui.GantengHubUI.MainFrame.SideFrame.SideTabButtons.ScrollingFrame
GANTENGLIB["6"] = Instance.new("ScrollingFrame", GANTENGLIB["5"]);
GANTENGLIB["6"]["Active"] = true;
GANTENGLIB["6"]["BorderSizePixel"] = 0;
GANTENGLIB["6"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["6"]["ElasticBehavior"] = Enum.ElasticBehavior.Never;
GANTENGLIB["6"]["TopImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
GANTENGLIB["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["6"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["6"]["BackgroundTransparency"] = 1;
GANTENGLIB["6"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["6"]["ScrollBarThickness"] = 4;
GANTENGLIB["6"]["BottomImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];

-- StarterGui.GantengHubUI.MainFrame.SideFrame.SideTabButtons.ScrollingFrame.UIListLayout
GANTENGLIB["7"] = Instance.new("UIListLayout", GANTENGLIB["6"]);
GANTENGLIB["7"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["7"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.GantengHubUI.MainFrame.SideFrame.UICorner
GANTENGLIB["8"] = Instance.new("UICorner", GANTENGLIB["3"]);
GANTENGLIB["8"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.SideFrame.StopAllTween
GANTENGLIB["9"] = Instance.new("TextButton", GANTENGLIB["3"]);
GANTENGLIB["9"]["Active"] = false;
GANTENGLIB["9"]["BorderSizePixel"] = 0;
GANTENGLIB["9"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["9"]["TextSize"] = 16;
GANTENGLIB["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["9"]["TextColor3"] = Color3.fromRGB(205, 205, 205);
GANTENGLIB["9"]["Selectable"] = false;
GANTENGLIB["9"]["Size"] = UDim2.new(0, 128, 0, 19);
GANTENGLIB["9"]["Name"] = [[StopAllTween]];
GANTENGLIB["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["9"]["Text"] = [[Stop All Tween]];
GANTENGLIB["9"]["Position"] = UDim2.new(0.035048358142375946, 0, 0.9112733602523804, 0);
GANTENGLIB["9"]["BackgroundTransparency"] = 0.3499999940395355;

-- StarterGui.GantengHubUI.MainFrame.SideFrame.StopAllTween.UICorner
GANTENGLIB["a"] = Instance.new("UICorner", GANTENGLIB["9"]);
GANTENGLIB["a"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.TopFrame
GANTENGLIB["b"] = Instance.new("Frame", GANTENGLIB["2"]);
GANTENGLIB["b"]["BorderSizePixel"] = 0;
GANTENGLIB["b"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["b"]["BackgroundTransparency"] = 0.6000000238418579;
GANTENGLIB["b"]["Size"] = UDim2.new(0.5105975270271301, 117, 0.1304347813129425, 0);
GANTENGLIB["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["b"]["Position"] = UDim2.new(0.2639690637588501, 0, 0, 0);
GANTENGLIB["b"]["Name"] = [[TopFrame]];

-- StarterGui.GantengHubUI.MainFrame.TopFrame.Exit
GANTENGLIB["c"] = Instance.new("TextButton", GANTENGLIB["b"]);
GANTENGLIB["c"]["BorderSizePixel"] = 0;
GANTENGLIB["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c"]["TextSize"] = 25;
GANTENGLIB["c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["c"]["TextColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["c"]["AnchorPoint"] = Vector2.new(1, 0);
GANTENGLIB["c"]["Size"] = UDim2.new(0, 36, 0, 36);
GANTENGLIB["c"]["Name"] = [[Exit]];
GANTENGLIB["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["c"]["Text"] = [[X]];
GANTENGLIB["c"]["Position"] = UDim2.new(1, 0, 0, 0);
GANTENGLIB["c"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.MainFrame.TopFrame.Close
GANTENGLIB["d"] = Instance.new("TextButton", GANTENGLIB["b"]);
GANTENGLIB["d"]["BorderSizePixel"] = 0;
GANTENGLIB["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d"]["TextSize"] = 25;
GANTENGLIB["d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["d"]["TextColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["d"]["AnchorPoint"] = Vector2.new(1, 0);
GANTENGLIB["d"]["Size"] = UDim2.new(0, 36, 0, 36);
GANTENGLIB["d"]["Name"] = [[Close]];
GANTENGLIB["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["d"]["Text"] = [[-]];
GANTENGLIB["d"]["Position"] = UDim2.new(0.9057592153549194, 0, 0, 0);
GANTENGLIB["d"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.MainFrame.TopFrame.Back
GANTENGLIB["e"] = Instance.new("TextButton", GANTENGLIB["b"]);
GANTENGLIB["e"]["BorderSizePixel"] = 0;
GANTENGLIB["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e"]["TextSize"] = 19;
GANTENGLIB["e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["e"]["TextColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["e"]["Visible"] = false;
GANTENGLIB["e"]["AnchorPoint"] = Vector2.new(1, 0);
GANTENGLIB["e"]["Size"] = UDim2.new(0, 89, 0, 36);
GANTENGLIB["e"]["Name"] = [[Back]];
GANTENGLIB["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["e"]["Text"] = [[ ]];
GANTENGLIB["e"]["Position"] = UDim2.new(0.23036673665046692, 0, 0, 0);
GANTENGLIB["e"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.MainFrame.TopFrame.Back.TextLabel
GANTENGLIB["f"] = Instance.new("TextLabel", GANTENGLIB["e"]);
GANTENGLIB["f"]["BorderSizePixel"] = 0;
GANTENGLIB["f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["f"]["TextSize"] = 19;
GANTENGLIB["f"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["f"]["Size"] = UDim2.new(-0.6073890328407288, 137, 1, 0);
GANTENGLIB["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["f"]["Text"] = [[Back]];
GANTENGLIB["f"]["BackgroundTransparency"] = 1;
GANTENGLIB["f"]["Position"] = UDim2.new(0.06806311756372452, 0, 0, 0);

-- StarterGui.GantengHubUI.MainFrame.TopFrame.Back.Text
GANTENGLIB["10"] = Instance.new("TextLabel", GANTENGLIB["e"]);
GANTENGLIB["10"]["BorderSizePixel"] = 0;
GANTENGLIB["10"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["10"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["10"]["Selectable"] = true;
GANTENGLIB["10"]["TextSize"] = 19;
GANTENGLIB["10"]["TextColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["10"]["AnchorPoint"] = Vector2.new(1, 0);
GANTENGLIB["10"]["Size"] = UDim2.new(0, 36, 0, 36);
GANTENGLIB["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["10"]["Text"] = [[<]];
GANTENGLIB["10"]["Name"] = [[Text]];
GANTENGLIB["10"]["BackgroundTransparency"] = 1;
GANTENGLIB["10"]["Position"] = UDim2.new(0.41746607422828674, 0, 0, 0);

-- StarterGui.GantengHubUI.MainFrame.TopFrame.UICorner
GANTENGLIB["11"] = Instance.new("UICorner", GANTENGLIB["b"]);
GANTENGLIB["11"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.TopFrame.CurrentTab
GANTENGLIB["12"] = Instance.new("TextLabel", GANTENGLIB["b"]);
GANTENGLIB["12"]["BorderSizePixel"] = 0;
GANTENGLIB["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["12"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["12"]["TextSize"] = 19;
GANTENGLIB["12"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["12"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["12"]["Size"] = UDim2.new(0.25099998712539673, 137, 1, 0);
GANTENGLIB["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["12"]["Text"] = [[Welcome]];
GANTENGLIB["12"]["Name"] = [[CurrentTab]];
GANTENGLIB["12"]["BackgroundTransparency"] = 1;
GANTENGLIB["12"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- StarterGui.GantengHubUI.MainFrame.Tabs
GANTENGLIB["13"] = Instance.new("Frame", GANTENGLIB["2"]);
GANTENGLIB["13"]["BorderSizePixel"] = 0;
GANTENGLIB["13"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["13"]["BackgroundTransparency"] = 1;
GANTENGLIB["13"]["Size"] = UDim2.new(0, 382, 0, 240);
GANTENGLIB["13"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["13"]["Position"] = UDim2.new(0.2639691233634949, 0, 0.1304347813129425, 0);
GANTENGLIB["13"]["Name"] = [[Tabs]];

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing
GANTENGLIB["14"] = Instance.new("Frame", GANTENGLIB["13"]);
GANTENGLIB["14"]["Active"] = true;
GANTENGLIB["14"]["BorderSizePixel"] = 0;
GANTENGLIB["14"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["14"]["BackgroundTransparency"] = 1;
GANTENGLIB["14"]["Size"] = UDim2.new(1, 0, 0.9799999594688416, 0);
GANTENGLIB["14"]["Selectable"] = true;
GANTENGLIB["14"]["ClipsDescendants"] = true;
GANTENGLIB["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["14"]["Position"] = UDim2.new(0, 0, 0.019999822601675987, 0);
GANTENGLIB["14"]["Name"] = [[Landing]];
GANTENGLIB["14"]["SelectionGroup"] = true;

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.WelcomeFrame
GANTENGLIB["15"] = Instance.new("Frame", GANTENGLIB["14"]);
GANTENGLIB["15"]["BorderSizePixel"] = 0;
GANTENGLIB["15"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["15"]["BackgroundTransparency"] = 0.3499999940395355;
GANTENGLIB["15"]["Size"] = UDim2.new(0.2094244807958603, 117, 0.2389456331729889, 0);
GANTENGLIB["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["15"]["Position"] = UDim2.new(0.04450273886322975, 0, 0.021258503198623657, 0);
GANTENGLIB["15"]["Name"] = [[WelcomeFrame]];

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.WelcomeFrame.Title
GANTENGLIB["16"] = Instance.new("TextLabel", GANTENGLIB["15"]);
GANTENGLIB["16"]["BorderSizePixel"] = 0;
GANTENGLIB["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["16"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["16"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["16"]["TextSize"] = 19;
GANTENGLIB["16"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["16"]["Size"] = UDim2.new(0, 134, 0, 19);
GANTENGLIB["16"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["16"]["Text"] = [[Ganteng Hub]];
GANTENGLIB["16"]["Name"] = [[Title]];
GANTENGLIB["16"]["BackgroundTransparency"] = 1;
GANTENGLIB["16"]["Position"] = UDim2.new(0.31577372550964355, 0, 0.14677730202674866, 0);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.WelcomeFrame.UICorner
GANTENGLIB["17"] = Instance.new("UICorner", GANTENGLIB["15"]);
GANTENGLIB["17"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.WelcomeFrame.Icon
GANTENGLIB["18"] = Instance.new("ImageLabel", GANTENGLIB["15"]);
GANTENGLIB["18"]["BorderSizePixel"] = 0;
GANTENGLIB["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["18"]["ImageTransparency"] = 0.10999999940395355;
GANTENGLIB["18"]["Image"] = [[rbxassetid://14601663040]];
GANTENGLIB["18"]["Size"] = UDim2.new(0.22036470472812653, 0, 0.8042705655097961, 0);
GANTENGLIB["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["18"]["Name"] = [[Icon]];
GANTENGLIB["18"]["BackgroundTransparency"] = 1;
GANTENGLIB["18"]["Position"] = UDim2.new(0.03957205265760422, 0, 0.10676126927137375, 0);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.WelcomeFrame.Icon.UIAspectRatioConstraint
GANTENGLIB["19"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["18"]);
GANTENGLIB["19"]["AspectRatio"] = 0.9999999403953552;

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.WelcomeFrame.Description
GANTENGLIB["1a"] = Instance.new("TextLabel", GANTENGLIB["15"]);
GANTENGLIB["1a"]["BorderSizePixel"] = 0;
GANTENGLIB["1a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["1a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["1a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["1a"]["TextSize"] = 15;
GANTENGLIB["1a"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["1a"]["Size"] = UDim2.new(0, 134, 0, 19);
GANTENGLIB["1a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1a"]["Text"] = [[Welcome, ]] .. game:GetService("Players").LocalPlayer.Name .. [[.]];
GANTENGLIB["1a"]["Name"] = [[Description]];
GANTENGLIB["1a"]["BackgroundTransparency"] = 1;
GANTENGLIB["1a"]["Position"] = UDim2.new(0.3157740533351898, 0, 0.4848555326461792, 0);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.InfoFrame
GANTENGLIB["1b"] = Instance.new("Frame", GANTENGLIB["14"]);
GANTENGLIB["1b"]["BorderSizePixel"] = 0;
GANTENGLIB["1b"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["1b"]["BackgroundTransparency"] = 0.3499999940395355;
GANTENGLIB["1b"]["Size"] = UDim2.new(0.2094242423772812, 117, 0.6301020979881287, 0);
GANTENGLIB["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1b"]["Position"] = UDim2.new(0.0445028580725193, 0, 0.31887754797935486, 0);
GANTENGLIB["1b"]["Name"] = [[InfoFrame]];

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.InfoFrame.Title
GANTENGLIB["1c"] = Instance.new("TextLabel", GANTENGLIB["1b"]);
GANTENGLIB["1c"]["BorderSizePixel"] = 0;
GANTENGLIB["1c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["1c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["1c"]["TextSize"] = 19;
GANTENGLIB["1c"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["1c"]["Size"] = UDim2.new(0, 197, 0, 19);
GANTENGLIB["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1c"]["Text"] = [[About Us]];
GANTENGLIB["1c"]["Name"] = [[Title]];
GANTENGLIB["1c"]["BackgroundTransparency"] = 1;
GANTENGLIB["1c"]["Position"] = UDim2.new(0, 0, 0.03799999877810478, 0);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.InfoFrame.UICorner
GANTENGLIB["1d"] = Instance.new("UICorner", GANTENGLIB["1b"]);
GANTENGLIB["1d"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.InfoFrame.Description
GANTENGLIB["1e"] = Instance.new("TextLabel", GANTENGLIB["1b"]);
GANTENGLIB["1e"]["TextWrapped"] = true;
GANTENGLIB["1e"]["BorderSizePixel"] = 0;
GANTENGLIB["1e"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["1e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["1e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["1e"]["TextSize"] = 15;
GANTENGLIB["1e"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["1e"]["Size"] = UDim2.new(0, 184, 0, 119);
GANTENGLIB["1e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1e"]["Text"] = [[What is Ganteng Hub? Ganteng Hub is a Roblox Script made in Indonesia, fully supported by the Isnahamzah team. It functions as a tool for gaining advantages, autofarming, fun, etc. Ganteng Hub comes highly recommended for service hosts.]];
GANTENGLIB["1e"]["Name"] = [[Description]];
GANTENGLIB["1e"]["BackgroundTransparency"] = 1;
GANTENGLIB["1e"]["Position"] = UDim2.new(0.03102242574095726, 0, 0.19510573148727417, 0);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.ChangelogsFrame
GANTENGLIB["1f"] = Instance.new("Frame", GANTENGLIB["14"]);
GANTENGLIB["1f"]["BorderSizePixel"] = 0;
GANTENGLIB["1f"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["1f"]["BackgroundTransparency"] = 0.3499999940395355;
GANTENGLIB["1f"]["Size"] = UDim2.new(0.059869375079870224, 117, 0.6301020979881287, 0);
GANTENGLIB["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1f"]["Position"] = UDim2.new(0.5890054106712341, 0, 0.31887754797935486, 0);
GANTENGLIB["1f"]["Name"] = [[ChangelogsFrame]];

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.ChangelogsFrame.Title
GANTENGLIB["20"] = Instance.new("TextLabel", GANTENGLIB["1f"]);
GANTENGLIB["20"]["BorderSizePixel"] = 0;
GANTENGLIB["20"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["20"]["TextSize"] = 19;
GANTENGLIB["20"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["20"]["Size"] = UDim2.new(0, 139, 0, 19);
GANTENGLIB["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["20"]["Text"] = [[Changelogs]];
GANTENGLIB["20"]["Name"] = [[Title]];
GANTENGLIB["20"]["BackgroundTransparency"] = 1;
GANTENGLIB["20"]["Position"] = UDim2.new(0, 0, 0.03125230222940445, 0);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.ChangelogsFrame.UICorner
GANTENGLIB["21"] = Instance.new("UICorner", GANTENGLIB["1f"]);
GANTENGLIB["21"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.ChangelogsFrame.ScrollingFrame
GANTENGLIB["22"] = Instance.new("ScrollingFrame", GANTENGLIB["1f"]);
GANTENGLIB["22"]["Active"] = true;
GANTENGLIB["22"]["BorderSizePixel"] = 0;
GANTENGLIB["22"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["22"]["ElasticBehavior"] = Enum.ElasticBehavior.Never;
GANTENGLIB["22"]["TopImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
GANTENGLIB["22"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["22"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["22"]["BackgroundTransparency"] = 1;
GANTENGLIB["22"]["Size"] = UDim2.new(0, 139, 0, 107);
GANTENGLIB["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["22"]["ScrollBarThickness"] = 4;
GANTENGLIB["22"]["Position"] = UDim2.new(0, 0, 0.1889999657869339, 0);
GANTENGLIB["22"]["BottomImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.ChangelogsFrame.ScrollingFrame.UIListLayout
GANTENGLIB["23"] = Instance.new("UIListLayout", GANTENGLIB["22"]);
GANTENGLIB["23"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["23"]["Padding"] = UDim.new(0, 5);
GANTENGLIB["23"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.SocialsFrame
GANTENGLIB["24"] = Instance.new("Frame", GANTENGLIB["14"]);
GANTENGLIB["24"]["BorderSizePixel"] = 0;
GANTENGLIB["24"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["24"]["BackgroundTransparency"] = 0.3499999940395355;
GANTENGLIB["24"]["Size"] = UDim2.new(0.05759198218584061, 117, 0.2389456331729889, 0);
GANTENGLIB["24"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["24"]["Position"] = UDim2.new(0.5890054106712341, 0, 0.021258503198623657, 0);
GANTENGLIB["24"]["Name"] = [[SocialsFrame]];

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.SocialsFrame.UICorner
GANTENGLIB["25"] = Instance.new("UICorner", GANTENGLIB["24"]);
GANTENGLIB["25"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.SocialsFrame.UIListLayout
GANTENGLIB["26"] = Instance.new("UIListLayout", GANTENGLIB["24"]);
GANTENGLIB["26"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
GANTENGLIB["26"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["26"]["Padding"] = UDim.new(0, 4);
GANTENGLIB["26"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.SocialsFrame.Youtube
GANTENGLIB["27"] = Instance.new("TextButton", GANTENGLIB["24"]);
GANTENGLIB["27"]["Active"] = false;
GANTENGLIB["27"]["BorderSizePixel"] = 0;
GANTENGLIB["27"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
GANTENGLIB["27"]["TextSize"] = 16;
GANTENGLIB["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["27"]["TextColor3"] = Color3.fromRGB(205, 205, 205);
GANTENGLIB["27"]["Selectable"] = false;
GANTENGLIB["27"]["Size"] = UDim2.new(0.08299999684095383, 117, 0.3799999952316284, 0);
GANTENGLIB["27"]["Name"] = [[Youtube]];
GANTENGLIB["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["27"]["Text"] = [[Youtube]];
GANTENGLIB["27"]["Position"] = UDim2.new(0.03504819795489311, 0, 0.0924326702952385, 0);
GANTENGLIB["27"]["BackgroundTransparency"] = 0.3499999940395355;

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.SocialsFrame.Youtube.UICorner
GANTENGLIB["28"] = Instance.new("UICorner", GANTENGLIB["27"]);
GANTENGLIB["28"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.SocialsFrame.Discord
GANTENGLIB["29"] = Instance.new("TextButton", GANTENGLIB["24"]);
GANTENGLIB["29"]["Active"] = false;
GANTENGLIB["29"]["BorderSizePixel"] = 0;
GANTENGLIB["29"]["BackgroundColor3"] = Color3.fromRGB(0, 69, 255);
GANTENGLIB["29"]["TextSize"] = 16;
GANTENGLIB["29"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["29"]["TextColor3"] = Color3.fromRGB(205, 205, 205);
GANTENGLIB["29"]["Selectable"] = false;
GANTENGLIB["29"]["Size"] = UDim2.new(0.08299999684095383, 117, 0.3799999952316284, 0);
GANTENGLIB["29"]["Name"] = [[Discord]];
GANTENGLIB["29"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["29"]["Text"] = [[Discord]];
GANTENGLIB["29"]["Position"] = UDim2.new(0.03504819795489311, 0, 0.0924326702952385, 0);
GANTENGLIB["29"]["BackgroundTransparency"] = 0.3499999940395355;

-- StarterGui.GantengHubUI.MainFrame.Tabs.Landing.SocialsFrame.Discord.UICorner
GANTENGLIB["2a"] = Instance.new("UICorner", GANTENGLIB["29"]);
GANTENGLIB["2a"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.MainFrame.UICorner
GANTENGLIB["2b"] = Instance.new("UICorner", GANTENGLIB["2"]);
GANTENGLIB["2b"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved
GANTENGLIB["2c"] = Instance.new("Folder", GANTENGLIB["1"]);
GANTENGLIB["2c"]["Name"] = [[Reserved]];

-- StarterGui.GantengHubUI.Reserved.TapEffect
GANTENGLIB["2d"] = Instance.new("ImageLabel", GANTENGLIB["2c"]);
GANTENGLIB["2d"]["BorderSizePixel"] = 0;
GANTENGLIB["2d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["2d"]["ImageTransparency"] = 0.75;
GANTENGLIB["2d"]["Visible"] = false;
GANTENGLIB["2d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["2d"]["Image"] = [[http://www.roblox.com/asset/?id=16307805649]];
GANTENGLIB["2d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["2d"]["Name"] = [[TapEffect]];
GANTENGLIB["2d"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.TapEffect.UICorner
GANTENGLIB["2e"] = Instance.new("UICorner", GANTENGLIB["2d"]);
GANTENGLIB["2e"]["CornerRadius"] = UDim.new(100, 100);

-- StarterGui.GantengHubUI.Reserved.TapEffect.UIAspectRatioConstraint
GANTENGLIB["2f"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["2d"]);


-- StarterGui.GantengHubUI.Reserved.Toggle
GANTENGLIB["30"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["30"]["BorderSizePixel"] = 0;
GANTENGLIB["30"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["30"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["30"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["30"]["Size"] = UDim2.new(0, 371, 0, 33);
GANTENGLIB["30"]["ClipsDescendants"] = true;
GANTENGLIB["30"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["30"]["Position"] = UDim2.new(0.5, 0, 0.07116156816482544, 0);
GANTENGLIB["30"]["Visible"] = false;
GANTENGLIB["30"]["Name"] = [[Toggle]];

-- StarterGui.GantengHubUI.Reserved.Toggle.TextLabel
GANTENGLIB["31"] = Instance.new("TextLabel", GANTENGLIB["30"]);
GANTENGLIB["31"]["BorderSizePixel"] = 0;
GANTENGLIB["31"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["31"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["31"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["31"]["TextSize"] = 17;
GANTENGLIB["31"]["TextColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["31"]["Size"] = UDim2.new(0, 294, 0, 33);
GANTENGLIB["31"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["31"]["Text"] = [[Toggle]];
GANTENGLIB["31"]["BackgroundTransparency"] = 1;
GANTENGLIB["31"]["Position"] = UDim2.new(0.02692425064742565, 0, 0, 0);

-- StarterGui.GantengHubUI.Reserved.Toggle.Button
GANTENGLIB["32"] = Instance.new("TextButton", GANTENGLIB["30"]);
GANTENGLIB["32"]["BorderSizePixel"] = 0;
GANTENGLIB["32"]["AutoButtonColor"] = false;
GANTENGLIB["32"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["32"]["TextSize"] = 14;
GANTENGLIB["32"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["32"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["32"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["32"]["Name"] = [[Button]];
GANTENGLIB["32"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["32"]["Text"] = [[]];
GANTENGLIB["32"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.Toggle.Background
GANTENGLIB["33"] = Instance.new("Frame", GANTENGLIB["30"]);
GANTENGLIB["33"]["BorderSizePixel"] = 0;
GANTENGLIB["33"]["BackgroundColor3"] = Color3.fromRGB(132, 132, 132);
GANTENGLIB["33"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["33"]["BackgroundTransparency"] = 0.8999999761581421;
GANTENGLIB["33"]["Size"] = UDim2.new(0, 51, 0, 24);
GANTENGLIB["33"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["33"]["Position"] = UDim2.new(0.9138492941856384, 0, 0.5, 0);
GANTENGLIB["33"]["Name"] = [[Background]];

-- StarterGui.GantengHubUI.Reserved.Toggle.Background.Switch
GANTENGLIB["34"] = Instance.new("Frame", GANTENGLIB["33"]);
GANTENGLIB["34"]["BorderSizePixel"] = 0;
GANTENGLIB["34"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["34"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["34"]["BackgroundTransparency"] = 0.550000011920929;
GANTENGLIB["34"]["Size"] = UDim2.new(0, 20, 0, 20);
GANTENGLIB["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["34"]["Position"] = UDim2.new(0.25, 0, 0.5, 0);
GANTENGLIB["34"]["Name"] = [[Switch]];

-- StarterGui.GantengHubUI.Reserved.Toggle.Background.Switch.UICorner
GANTENGLIB["35"] = Instance.new("UICorner", GANTENGLIB["34"]);
GANTENGLIB["35"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Toggle.Background.UICorner
GANTENGLIB["36"] = Instance.new("UICorner", GANTENGLIB["33"]);
GANTENGLIB["36"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Toggle.UIAspectRatioConstraint
GANTENGLIB["37"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["30"]);
GANTENGLIB["37"]["AspectRatio"] = 11.254955291748047;

-- StarterGui.GantengHubUI.Reserved.Toggle.UICorner
GANTENGLIB["38"] = Instance.new("UICorner", GANTENGLIB["30"]);
GANTENGLIB["38"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Title
GANTENGLIB["39"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["39"]["BorderSizePixel"] = 0;
GANTENGLIB["39"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["39"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["39"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["39"]["Size"] = UDim2.new(0, 371, 0, 33);
GANTENGLIB["39"]["ClipsDescendants"] = true;
GANTENGLIB["39"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["39"]["Position"] = UDim2.new(0.5, 0, 0.07116156816482544, 0);
GANTENGLIB["39"]["Visible"] = false;
GANTENGLIB["39"]["Name"] = [[Title]];

-- StarterGui.GantengHubUI.Reserved.Title.TextLabel
GANTENGLIB["3a"] = Instance.new("TextLabel", GANTENGLIB["39"]);
GANTENGLIB["3a"]["BorderSizePixel"] = 0;
GANTENGLIB["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["3a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["3a"]["TextSize"] = 17;
GANTENGLIB["3a"]["TextColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["3a"]["Size"] = UDim2.new(0, 361, 0, 33);
GANTENGLIB["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3a"]["BackgroundTransparency"] = 1;
GANTENGLIB["3a"]["Position"] = UDim2.new(0.02692425064742565, 0, 0, 0);

-- StarterGui.GantengHubUI.Reserved.Title.TextLabel.UICorner
GANTENGLIB["3b"] = Instance.new("UICorner", GANTENGLIB["3a"]);
GANTENGLIB["3b"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Title.Button
GANTENGLIB["3c"] = Instance.new("TextButton", GANTENGLIB["39"]);
GANTENGLIB["3c"]["BorderSizePixel"] = 0;
GANTENGLIB["3c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["3c"]["TextSize"] = 14;
GANTENGLIB["3c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["3c"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3c"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["3c"]["Name"] = [[Button]];
GANTENGLIB["3c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3c"]["Text"] = [[]];
GANTENGLIB["3c"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.Title.Button.UICorner
GANTENGLIB["3d"] = Instance.new("UICorner", GANTENGLIB["3c"]);
GANTENGLIB["3d"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Title.UIAspectRatioConstraint
GANTENGLIB["3e"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["39"]);
GANTENGLIB["3e"]["AspectRatio"] = 11.254955291748047;

-- StarterGui.GantengHubUI.Reserved.Title.UIAspectRatioConstraint.UICorner
GANTENGLIB["3f"] = Instance.new("UICorner", GANTENGLIB["3e"]);
GANTENGLIB["3f"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Title.UICorner
GANTENGLIB["40"] = Instance.new("UICorner", GANTENGLIB["39"]);
GANTENGLIB["40"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Textbox
GANTENGLIB["41"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["41"]["BorderSizePixel"] = 0;
GANTENGLIB["41"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["41"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["41"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["41"]["Size"] = UDim2.new(0, 371, 0, 33);
GANTENGLIB["41"]["ClipsDescendants"] = true;
GANTENGLIB["41"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["41"]["Position"] = UDim2.new(0.5, 0, 0.07116156816482544, 0);
GANTENGLIB["41"]["Visible"] = false;
GANTENGLIB["41"]["Name"] = [[Textbox]];

-- StarterGui.GantengHubUI.Reserved.Textbox.TextLabel
GANTENGLIB["42"] = Instance.new("TextLabel", GANTENGLIB["41"]);
GANTENGLIB["42"]["BorderSizePixel"] = 0;
GANTENGLIB["42"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["42"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["42"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["42"]["TextSize"] = 17;
GANTENGLIB["42"]["TextColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["42"]["Size"] = UDim2.new(0, 294, 0, 33);
GANTENGLIB["42"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["42"]["Text"] = [[Textbox]];
GANTENGLIB["42"]["BackgroundTransparency"] = 1;
GANTENGLIB["42"]["Position"] = UDim2.new(0.02692425064742565, 0, 0, 0);

-- StarterGui.GantengHubUI.Reserved.Textbox.Button
GANTENGLIB["43"] = Instance.new("TextButton", GANTENGLIB["41"]);
GANTENGLIB["43"]["BorderSizePixel"] = 0;
GANTENGLIB["43"]["AutoButtonColor"] = false;
GANTENGLIB["43"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["43"]["TextSize"] = 14;
GANTENGLIB["43"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["43"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["43"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["43"]["Name"] = [[Button]];
GANTENGLIB["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["43"]["Text"] = [[]];
GANTENGLIB["43"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.Textbox.Textbox
GANTENGLIB["44"] = Instance.new("TextBox", GANTENGLIB["41"]);
GANTENGLIB["44"]["BorderSizePixel"] = 0;
GANTENGLIB["44"]["TextWrapped"] = true;
GANTENGLIB["44"]["TextScaled"] = true;
GANTENGLIB["44"]["BackgroundColor3"] = Color3.fromRGB(132, 132, 132);
GANTENGLIB["44"]["TextColor3"] = Color3.fromRGB(211, 211, 211);
GANTENGLIB["44"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["44"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["44"]["BackgroundTransparency"] = 0.8999999761581421;
GANTENGLIB["44"]["PlaceholderText"] = [[...]];
GANTENGLIB["44"]["Size"] = UDim2.new(0, 69, 0, 24);
GANTENGLIB["44"]["Selectable"] = false;
GANTENGLIB["44"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["44"]["Text"] = [[]];
GANTENGLIB["44"]["Position"] = UDim2.new(0.8895905017852783, 0, 0.5, 0);
GANTENGLIB["44"]["Name"] = [[Textbox]];

-- StarterGui.GantengHubUI.Reserved.Textbox.Textbox.UICorner
GANTENGLIB["45"] = Instance.new("UICorner", GANTENGLIB["44"]);
GANTENGLIB["45"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Textbox.UICorner
GANTENGLIB["46"] = Instance.new("UICorner", GANTENGLIB["41"]);
GANTENGLIB["46"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Slider
GANTENGLIB["47"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["47"]["BorderSizePixel"] = 0;
GANTENGLIB["47"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["47"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["47"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["47"]["Size"] = UDim2.new(0, 371, 0, 61);
GANTENGLIB["47"]["ClipsDescendants"] = true;
GANTENGLIB["47"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["47"]["Position"] = UDim2.new(0.5, 0, 0.8821160197257996, 0);
GANTENGLIB["47"]["Visible"] = false;
GANTENGLIB["47"]["Name"] = [[Slider]];

-- StarterGui.GantengHubUI.Reserved.Slider.TextLabel
GANTENGLIB["48"] = Instance.new("TextLabel", GANTENGLIB["47"]);
GANTENGLIB["48"]["BorderSizePixel"] = 0;
GANTENGLIB["48"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["48"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["48"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["48"]["TextSize"] = 17;
GANTENGLIB["48"]["TextColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["48"]["Size"] = UDim2.new(0, 294, 0, 33);
GANTENGLIB["48"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["48"]["Text"] = [[Slider]];
GANTENGLIB["48"]["BackgroundTransparency"] = 1;
GANTENGLIB["48"]["Position"] = UDim2.new(0.02692425064742565, 0, 0, 0);

-- StarterGui.GantengHubUI.Reserved.Slider.Button
GANTENGLIB["49"] = Instance.new("TextButton", GANTENGLIB["47"]);
GANTENGLIB["49"]["BorderSizePixel"] = 0;
GANTENGLIB["49"]["AutoButtonColor"] = false;
GANTENGLIB["49"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["49"]["TextSize"] = 14;
GANTENGLIB["49"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["49"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["49"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["49"]["Name"] = [[Button]];
GANTENGLIB["49"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["49"]["Text"] = [[]];
GANTENGLIB["49"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.Slider.UICorner
GANTENGLIB["4a"] = Instance.new("UICorner", GANTENGLIB["47"]);
GANTENGLIB["4a"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Slider.Textbox
GANTENGLIB["4b"] = Instance.new("TextBox", GANTENGLIB["47"]);
GANTENGLIB["4b"]["BorderSizePixel"] = 0;
GANTENGLIB["4b"]["TextWrapped"] = true;
GANTENGLIB["4b"]["TextScaled"] = true;
GANTENGLIB["4b"]["BackgroundColor3"] = Color3.fromRGB(132, 132, 132);
GANTENGLIB["4b"]["TextColor3"] = Color3.fromRGB(211, 211, 211);
GANTENGLIB["4b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["4b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["4b"]["BackgroundTransparency"] = 0.8999999761581421;
GANTENGLIB["4b"]["PlaceholderText"] = [[...]];
GANTENGLIB["4b"]["Size"] = UDim2.new(0, 69, 0, 24);
GANTENGLIB["4b"]["Selectable"] = false;
GANTENGLIB["4b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["4b"]["Text"] = [[]];
GANTENGLIB["4b"]["Position"] = UDim2.new(0, 330, 0, 17);
GANTENGLIB["4b"]["Name"] = [[Textbox]];

-- StarterGui.GantengHubUI.Reserved.Slider.Textbox.UICorner
GANTENGLIB["4c"] = Instance.new("UICorner", GANTENGLIB["4b"]);
GANTENGLIB["4c"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Slider.Background
GANTENGLIB["4d"] = Instance.new("Frame", GANTENGLIB["47"]);
GANTENGLIB["4d"]["BorderSizePixel"] = 0;
GANTENGLIB["4d"]["BackgroundColor3"] = Color3.fromRGB(43, 43, 43);
GANTENGLIB["4d"]["Size"] = UDim2.new(0, 355, 0, 17);
GANTENGLIB["4d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["4d"]["Position"] = UDim2.new(0, 9, 0, 35);
GANTENGLIB["4d"]["Name"] = [[Background]];

-- StarterGui.GantengHubUI.Reserved.Slider.Background.UICorner
GANTENGLIB["4e"] = Instance.new("UICorner", GANTENGLIB["4d"]);
GANTENGLIB["4e"]["CornerRadius"] = UDim.new(0, 100);

-- StarterGui.GantengHubUI.Reserved.Slider.Background.Fill
GANTENGLIB["4f"] = Instance.new("Frame", GANTENGLIB["4d"]);
GANTENGLIB["4f"]["BorderSizePixel"] = 0;
GANTENGLIB["4f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["4f"]["BackgroundTransparency"] = 0.15000000596046448;
GANTENGLIB["4f"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["4f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["4f"]["Name"] = [[Fill]];

-- StarterGui.GantengHubUI.Reserved.Slider.Background.Fill.UICorner
GANTENGLIB["50"] = Instance.new("UICorner", GANTENGLIB["4f"]);
GANTENGLIB["50"]["CornerRadius"] = UDim.new(0, 100);

-- StarterGui.GantengHubUI.Reserved.Slider.Background.Trigger
GANTENGLIB["51"] = Instance.new("TextButton", GANTENGLIB["4d"]);
GANTENGLIB["51"]["BorderSizePixel"] = 0;
GANTENGLIB["51"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["51"]["Selectable"] = false;
GANTENGLIB["51"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["51"]["Name"] = [[Trigger]];
GANTENGLIB["51"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["51"]["Text"] = [[]];
GANTENGLIB["51"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.Seperator
GANTENGLIB["52"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["52"]["BorderSizePixel"] = 0;
GANTENGLIB["52"]["BackgroundColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["52"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["52"]["BackgroundTransparency"] = 1;
GANTENGLIB["52"]["Size"] = UDim2.new(0, 371, 0, 15);
GANTENGLIB["52"]["ClipsDescendants"] = true;
GANTENGLIB["52"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["52"]["Position"] = UDim2.new(0.5, 0, 0.7260767817497253, 0);
GANTENGLIB["52"]["Visible"] = false;
GANTENGLIB["52"]["Name"] = [[Seperator]];

-- StarterGui.GantengHubUI.Reserved.Seperator.Line
GANTENGLIB["53"] = Instance.new("Frame", GANTENGLIB["52"]);
GANTENGLIB["53"]["BorderSizePixel"] = 0;
GANTENGLIB["53"]["BackgroundColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["53"]["AnchorPoint"] = Vector2.new(1, 0.5);
GANTENGLIB["53"]["BackgroundTransparency"] = 0.4000000059604645;
GANTENGLIB["53"]["Size"] = UDim2.new(0, 100, 0, 4);
GANTENGLIB["53"]["ClipsDescendants"] = true;
GANTENGLIB["53"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["53"]["Position"] = UDim2.new(1, 0, 0.5, 0);
GANTENGLIB["53"]["Name"] = [[Line]];

-- StarterGui.GantengHubUI.Reserved.Seperator.Line
GANTENGLIB["54"] = Instance.new("Frame", GANTENGLIB["52"]);
GANTENGLIB["54"]["BorderSizePixel"] = 0;
GANTENGLIB["54"]["BackgroundColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["54"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["54"]["BackgroundTransparency"] = 0.4000000059604645;
GANTENGLIB["54"]["Size"] = UDim2.new(0, 100, 0, 4);
GANTENGLIB["54"]["ClipsDescendants"] = true;
GANTENGLIB["54"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["54"]["Position"] = UDim2.new(0, 0, 0.5, 0);
GANTENGLIB["54"]["Name"] = [[Line]];

-- StarterGui.GantengHubUI.Reserved.Seperator.TextLabel
GANTENGLIB["55"] = Instance.new("TextLabel", GANTENGLIB["52"]);
GANTENGLIB["55"]["BorderSizePixel"] = 0;
GANTENGLIB["55"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["55"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["55"]["TextSize"] = 17;
GANTENGLIB["55"]["TextColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["55"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["55"]["Size"] = UDim2.new(0, 180, 0, 15);
GANTENGLIB["55"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["55"]["Text"] = [[Seperator]];
GANTENGLIB["55"]["BackgroundTransparency"] = 1;
GANTENGLIB["55"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- StarterGui.GantengHubUI.Reserved.Seperator.UICorner
GANTENGLIB["56"] = Instance.new("UICorner", GANTENGLIB["52"]);
GANTENGLIB["56"]["CornerRadius"] = UDim.new(100, 100);

-- StarterGui.GantengHubUI.Reserved.Line
GANTENGLIB["57"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["57"]["BorderSizePixel"] = 0;
GANTENGLIB["57"]["BackgroundColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["57"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["57"]["BackgroundTransparency"] = 0.4000000059604645;
GANTENGLIB["57"]["Size"] = UDim2.new(0, 371, 0, 4);
GANTENGLIB["57"]["ClipsDescendants"] = true;
GANTENGLIB["57"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["57"]["Position"] = UDim2.new(0.5, 0, 0.6641746759414673, 0);
GANTENGLIB["57"]["Visible"] = false;
GANTENGLIB["57"]["Name"] = [[Line]];

-- StarterGui.GantengHubUI.Reserved.Line.UICorner
GANTENGLIB["58"] = Instance.new("UICorner", GANTENGLIB["57"]);
GANTENGLIB["58"]["CornerRadius"] = UDim.new(100, 100);

-- StarterGui.GantengHubUI.Reserved.MultiDropdown
GANTENGLIB["59"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["59"]["BorderSizePixel"] = 0;
GANTENGLIB["59"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["59"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["59"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["59"]["Size"] = UDim2.new(0, 371, 0, 33);
GANTENGLIB["59"]["ClipsDescendants"] = true;
GANTENGLIB["59"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["59"]["Position"] = UDim2.new(0.5, 0, 0.07116156816482544, 0);
GANTENGLIB["59"]["Visible"] = false;
GANTENGLIB["59"]["Name"] = [[MultiDropdown]];

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.TextLabel
GANTENGLIB["5a"] = Instance.new("TextLabel", GANTENGLIB["59"]);
GANTENGLIB["5a"]["BorderSizePixel"] = 0;
GANTENGLIB["5a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["5a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["5a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["5a"]["TextSize"] = 17;
GANTENGLIB["5a"]["TextColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["5a"]["Size"] = UDim2.new(0, 234, 0, 33);
GANTENGLIB["5a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["5a"]["Text"] = [[Multi Dropdown]];
GANTENGLIB["5a"]["BackgroundTransparency"] = 1;
GANTENGLIB["5a"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Button
GANTENGLIB["5b"] = Instance.new("TextButton", GANTENGLIB["59"]);
GANTENGLIB["5b"]["BorderSizePixel"] = 0;
GANTENGLIB["5b"]["AutoButtonColor"] = false;
GANTENGLIB["5b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["5b"]["TextSize"] = 14;
GANTENGLIB["5b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["5b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["5b"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["5b"]["Name"] = [[Button]];
GANTENGLIB["5b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["5b"]["Text"] = [[]];
GANTENGLIB["5b"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.UICorner
GANTENGLIB["5c"] = Instance.new("UICorner", GANTENGLIB["59"]);
GANTENGLIB["5c"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Select
GANTENGLIB["5d"] = Instance.new("TextButton", GANTENGLIB["59"]);
GANTENGLIB["5d"]["TextWrapped"] = true;
GANTENGLIB["5d"]["BorderSizePixel"] = 0;
GANTENGLIB["5d"]["AutoButtonColor"] = false;
GANTENGLIB["5d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["5d"]["BackgroundColor3"] = Color3.fromRGB(132, 132, 132);
GANTENGLIB["5d"]["TextSize"] = 18;
GANTENGLIB["5d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["5d"]["TextColor3"] = Color3.fromRGB(194, 194, 194);
GANTENGLIB["5d"]["Selectable"] = false;
GANTENGLIB["5d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["5d"]["Size"] = UDim2.new(0, 129, 0, 24);
GANTENGLIB["5d"]["Name"] = [[Select]];
GANTENGLIB["5d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["5d"]["Text"] = [[None]];
GANTENGLIB["5d"]["Position"] = UDim2.new(0, 299, 0, 17);
GANTENGLIB["5d"]["BackgroundTransparency"] = 0.8999999761581421;

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Select.UICorner
GANTENGLIB["5e"] = Instance.new("UICorner", GANTENGLIB["5d"]);
GANTENGLIB["5e"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Select.UIPadding
GANTENGLIB["5f"] = Instance.new("UIPadding", GANTENGLIB["5d"]);
GANTENGLIB["5f"]["PaddingLeft"] = UDim.new(0, 6);

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Select.ImageLabel
GANTENGLIB["60"] = Instance.new("ImageLabel", GANTENGLIB["5d"]);
GANTENGLIB["60"]["BorderSizePixel"] = 0;
GANTENGLIB["60"]["ScaleType"] = Enum.ScaleType.Crop;
GANTENGLIB["60"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["60"]["ImageColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["60"]["Image"] = [[http://www.roblox.com/asset/?id=12809025337]];
GANTENGLIB["60"]["Size"] = UDim2.new(0, 20, 0, 14);
GANTENGLIB["60"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["60"]["Rotation"] = 90;
GANTENGLIB["60"]["BackgroundTransparency"] = 1;
GANTENGLIB["60"]["Position"] = UDim2.new(0.8389999866485596, 0, 0.20399999618530273, 0);

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Buttons
GANTENGLIB["61"] = Instance.new("Frame", GANTENGLIB["59"]);
GANTENGLIB["61"]["BorderSizePixel"] = 0;
GANTENGLIB["61"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["61"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["61"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["61"]["Size"] = UDim2.new(0, 371, 0, 77);
GANTENGLIB["61"]["ClipsDescendants"] = true;
GANTENGLIB["61"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["61"]["Position"] = UDim2.new(0, 186, 0, 72);
GANTENGLIB["61"]["Name"] = [[Buttons]];

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Buttons.UICorner
GANTENGLIB["62"] = Instance.new("UICorner", GANTENGLIB["61"]);
GANTENGLIB["62"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Buttons.ScrollingFrame
GANTENGLIB["63"] = Instance.new("ScrollingFrame", GANTENGLIB["61"]);
GANTENGLIB["63"]["Active"] = true;
GANTENGLIB["63"]["BorderSizePixel"] = 0;
GANTENGLIB["63"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["63"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["63"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["63"]["BackgroundTransparency"] = 1;
GANTENGLIB["63"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["63"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["63"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["63"]["ScrollBarThickness"] = 0;

-- StarterGui.GantengHubUI.Reserved.MultiDropdown.Buttons.ScrollingFrame.UIListLayout
GANTENGLIB["64"] = Instance.new("UIListLayout", GANTENGLIB["63"]);
GANTENGLIB["64"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["64"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.GantengHubUI.Reserved.Dropdown
GANTENGLIB["65"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["65"]["BorderSizePixel"] = 0;
GANTENGLIB["65"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["65"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["65"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["65"]["Size"] = UDim2.new(0, 371, 0, 33);
GANTENGLIB["65"]["ClipsDescendants"] = true;
GANTENGLIB["65"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["65"]["Position"] = UDim2.new(0.5, 0, 0.07116156816482544, 0);
GANTENGLIB["65"]["Visible"] = false;
GANTENGLIB["65"]["Name"] = [[Dropdown]];

-- StarterGui.GantengHubUI.Reserved.Dropdown.TextLabel
GANTENGLIB["66"] = Instance.new("TextLabel", GANTENGLIB["65"]);
GANTENGLIB["66"]["BorderSizePixel"] = 0;
GANTENGLIB["66"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["66"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["66"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["66"]["TextSize"] = 17;
GANTENGLIB["66"]["TextColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["66"]["Size"] = UDim2.new(0, 261, 0, 33);
GANTENGLIB["66"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["66"]["Text"] = [[Dropdown]];
GANTENGLIB["66"]["BackgroundTransparency"] = 1;
GANTENGLIB["66"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.GantengHubUI.Reserved.Dropdown.Button
GANTENGLIB["67"] = Instance.new("TextButton", GANTENGLIB["65"]);
GANTENGLIB["67"]["BorderSizePixel"] = 0;
GANTENGLIB["67"]["AutoButtonColor"] = false;
GANTENGLIB["67"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["67"]["TextSize"] = 14;
GANTENGLIB["67"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["67"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["67"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["67"]["Name"] = [[Button]];
GANTENGLIB["67"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["67"]["Text"] = [[]];
GANTENGLIB["67"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.Dropdown.UICorner
GANTENGLIB["68"] = Instance.new("UICorner", GANTENGLIB["65"]);
GANTENGLIB["68"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Dropdown.Select
GANTENGLIB["69"] = Instance.new("TextButton", GANTENGLIB["65"]);
GANTENGLIB["69"]["BorderSizePixel"] = 0;
GANTENGLIB["69"]["AutoButtonColor"] = false;
GANTENGLIB["69"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["69"]["BackgroundColor3"] = Color3.fromRGB(132, 132, 132);
GANTENGLIB["69"]["TextSize"] = 18;
GANTENGLIB["69"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["69"]["TextColor3"] = Color3.fromRGB(194, 194, 194);
GANTENGLIB["69"]["Selectable"] = false;
GANTENGLIB["69"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["69"]["Size"] = UDim2.new(0, 93, 0, 24);
GANTENGLIB["69"]["Name"] = [[Select]];
GANTENGLIB["69"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["69"]["Text"] = [[]];
GANTENGLIB["69"]["Position"] = UDim2.new(0, 317, 0, 17);
GANTENGLIB["69"]["BackgroundTransparency"] = 0.8999999761581421;

-- StarterGui.GantengHubUI.Reserved.Dropdown.Select.UICorner
GANTENGLIB["6a"] = Instance.new("UICorner", GANTENGLIB["69"]);
GANTENGLIB["6a"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Dropdown.Select.UIPadding
GANTENGLIB["6b"] = Instance.new("UIPadding", GANTENGLIB["69"]);
GANTENGLIB["6b"]["PaddingLeft"] = UDim.new(0, 6);

-- StarterGui.GantengHubUI.Reserved.Dropdown.Buttons
GANTENGLIB["6c"] = Instance.new("Frame", GANTENGLIB["65"]);
GANTENGLIB["6c"]["BorderSizePixel"] = 0;
GANTENGLIB["6c"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["6c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["6c"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["6c"]["Size"] = UDim2.new(0, 371, 0, 77);
GANTENGLIB["6c"]["ClipsDescendants"] = true;
GANTENGLIB["6c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["6c"]["Position"] = UDim2.new(0, 186, 0, 72);
GANTENGLIB["6c"]["Name"] = [[Buttons]];

-- StarterGui.GantengHubUI.Reserved.Dropdown.Buttons.UICorner
GANTENGLIB["6d"] = Instance.new("UICorner", GANTENGLIB["6c"]);
GANTENGLIB["6d"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Dropdown.Buttons.ScrollingFrame
GANTENGLIB["6e"] = Instance.new("ScrollingFrame", GANTENGLIB["6c"]);
GANTENGLIB["6e"]["Active"] = true;
GANTENGLIB["6e"]["BorderSizePixel"] = 0;
GANTENGLIB["6e"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["6e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["6e"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["6e"]["BackgroundTransparency"] = 1;
GANTENGLIB["6e"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["6e"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["6e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["6e"]["ScrollBarThickness"] = 0;

-- StarterGui.GantengHubUI.Reserved.Dropdown.Buttons.ScrollingFrame.UIListLayout
GANTENGLIB["6f"] = Instance.new("UIListLayout", GANTENGLIB["6e"]);
GANTENGLIB["6f"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["6f"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.GantengHubUI.Reserved.Button
GANTENGLIB["70"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["70"]["BorderSizePixel"] = 0;
GANTENGLIB["70"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["70"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["70"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["70"]["Size"] = UDim2.new(0, 371, 0, 33);
GANTENGLIB["70"]["ClipsDescendants"] = true;
GANTENGLIB["70"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["70"]["Position"] = UDim2.new(0.5, 0, 0.07116156816482544, 0);
GANTENGLIB["70"]["Visible"] = false;
GANTENGLIB["70"]["Name"] = [[Button]];

-- StarterGui.GantengHubUI.Reserved.Button.TextLabel
GANTENGLIB["71"] = Instance.new("TextLabel", GANTENGLIB["70"]);
GANTENGLIB["71"]["BorderSizePixel"] = 0;
GANTENGLIB["71"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["71"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["71"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["71"]["TextSize"] = 17;
GANTENGLIB["71"]["TextColor3"] = Color3.fromRGB(189, 189, 189);
GANTENGLIB["71"]["Size"] = UDim2.new(0, 361, 0, 33);
GANTENGLIB["71"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["71"]["Text"] = [[Button]];
GANTENGLIB["71"]["BackgroundTransparency"] = 1;
GANTENGLIB["71"]["Position"] = UDim2.new(0.02692425064742565, 0, 0, 0);

-- StarterGui.GantengHubUI.Reserved.Button.Button
GANTENGLIB["72"] = Instance.new("TextButton", GANTENGLIB["70"]);
GANTENGLIB["72"]["BorderSizePixel"] = 0;
GANTENGLIB["72"]["AutoButtonColor"] = false;
GANTENGLIB["72"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["72"]["TextSize"] = 14;
GANTENGLIB["72"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["72"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["72"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["72"]["Name"] = [[Button]];
GANTENGLIB["72"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["72"]["Text"] = [[]];
GANTENGLIB["72"]["BackgroundTransparency"] = 1;

-- StarterGui.GantengHubUI.Reserved.Button.UIAspectRatioConstraint
GANTENGLIB["73"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["70"]);
GANTENGLIB["73"]["AspectRatio"] = 11.254955291748047;

-- StarterGui.GantengHubUI.Reserved.Button.UICorner
GANTENGLIB["74"] = Instance.new("UICorner", GANTENGLIB["70"]);
GANTENGLIB["74"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.SideButton
GANTENGLIB["75"] = Instance.new("TextButton", GANTENGLIB["2c"]);
GANTENGLIB["75"]["BorderSizePixel"] = 0;
GANTENGLIB["75"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["75"]["TextSize"] = 14;
GANTENGLIB["75"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["75"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["75"]["Visible"] = false;
GANTENGLIB["75"]["Size"] = UDim2.new(1, 0, -0.08602150529623032, 50);
GANTENGLIB["75"]["Name"] = [[SideButton]];
GANTENGLIB["75"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["75"]["Text"] = [[]];
GANTENGLIB["75"]["BackgroundTransparency"] = 0.75;

-- StarterGui.GantengHubUI.Reserved.SideButton.ImageLabel
GANTENGLIB["76"] = Instance.new("ImageLabel", GANTENGLIB["75"]);
GANTENGLIB["76"]["BorderSizePixel"] = 0;
GANTENGLIB["76"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["76"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["76"]["Size"] = UDim2.new(0.33526918292045593, 0, 0.707317054271698, 0);
GANTENGLIB["76"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["76"]["BackgroundTransparency"] = 1;
GANTENGLIB["76"]["Position"] = UDim2.new(0.1603461354970932, 0, 0.5, 0);

-- StarterGui.GantengHubUI.Reserved.SideButton.ImageLabel.UIAspectRatioConstraint
GANTENGLIB["77"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["76"]);


-- StarterGui.GantengHubUI.Reserved.SideButton.TextLabel
GANTENGLIB["78"] = Instance.new("TextLabel", GANTENGLIB["75"]);
GANTENGLIB["78"]["BorderSizePixel"] = 0;
GANTENGLIB["78"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["78"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["78"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["78"]["TextSize"] = 17;
GANTENGLIB["78"]["TextColor3"] = Color3.fromRGB(221, 221, 221);
GANTENGLIB["78"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["78"]["Size"] = UDim2.new(0, 94, 0, 31);
GANTENGLIB["78"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["78"]["Text"] = [[Button]];
GANTENGLIB["78"]["BackgroundTransparency"] = 1;
GANTENGLIB["78"]["Position"] = UDim2.new(0.6484903693199158, 0, 0.5, 0);

-- StarterGui.GantengHubUI.Reserved.Changelog
GANTENGLIB["79"] = Instance.new("Frame", GANTENGLIB["2c"]);
GANTENGLIB["79"]["BorderSizePixel"] = 0;
GANTENGLIB["79"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["79"]["BackgroundTransparency"] = 0.3499999940395355;
GANTENGLIB["79"]["Size"] = UDim2.new(0, 128, 0, 39);
GANTENGLIB["79"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["79"]["Position"] = UDim2.new(0.03956834599375725, 0, 0, 0);
GANTENGLIB["79"]["Visible"] = false;
GANTENGLIB["79"]["Name"] = [[Changelog]];

-- StarterGui.GantengHubUI.Reserved.Changelog.UICorner
GANTENGLIB["7a"] = Instance.new("UICorner", GANTENGLIB["79"]);
GANTENGLIB["7a"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Reserved.Changelog.Title
GANTENGLIB["7b"] = Instance.new("TextLabel", GANTENGLIB["79"]);
GANTENGLIB["7b"]["BorderSizePixel"] = 0;
GANTENGLIB["7b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["7b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["7b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["7b"]["TextSize"] = 14;
GANTENGLIB["7b"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["7b"]["Size"] = UDim2.new(0, 105, 0, 19);
GANTENGLIB["7b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7b"]["Text"] = [[Update]];
GANTENGLIB["7b"]["Name"] = [[Title]];
GANTENGLIB["7b"]["BackgroundTransparency"] = 1;
GANTENGLIB["7b"]["Position"] = UDim2.new(0.078125, 0, 0.03799986094236374, 0);

-- StarterGui.GantengHubUI.Reserved.Changelog.Description
GANTENGLIB["7c"] = Instance.new("TextLabel", GANTENGLIB["79"]);
GANTENGLIB["7c"]["TextWrapped"] = true;
GANTENGLIB["7c"]["BorderSizePixel"] = 0;
GANTENGLIB["7c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["7c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["7c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["7c"]["TextSize"] = 13;
GANTENGLIB["7c"]["TextColor3"] = Color3.fromRGB(213, 213, 213);
GANTENGLIB["7c"]["Size"] = UDim2.new(0, 105, 0, 13);
GANTENGLIB["7c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7c"]["Text"] = [[Added something]];
GANTENGLIB["7c"]["Name"] = [[Description]];
GANTENGLIB["7c"]["BackgroundTransparency"] = 1;
GANTENGLIB["7c"]["Position"] = UDim2.new(0.078125, 0, 0.5027981996536255, 0);

-- StarterGui.GantengHubUI.Reserved.Tab
GANTENGLIB["7d"] = Instance.new("ScrollingFrame", GANTENGLIB["2c"]);
GANTENGLIB["7d"]["Active"] = true;
GANTENGLIB["7d"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
GANTENGLIB["7d"]["BorderSizePixel"] = 0;
GANTENGLIB["7d"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["7d"]["ElasticBehavior"] = Enum.ElasticBehavior.Never;
GANTENGLIB["7d"]["TopImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
GANTENGLIB["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["7d"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["7d"]["BackgroundTransparency"] = 1;
GANTENGLIB["7d"]["Size"] = UDim2.new(1, 0, 0.9661113619804382, 0);
GANTENGLIB["7d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7d"]["ScrollBarThickness"] = 5;
GANTENGLIB["7d"]["Position"] = UDim2.new(0, 0, 0.019999999552965164, 0);
GANTENGLIB["7d"]["Visible"] = false;
GANTENGLIB["7d"]["Name"] = [[Tab]];
GANTENGLIB["7d"]["BottomImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png/]];

-- StarterGui.GantengHubUI.Reserved.Tab.UIListLayout
GANTENGLIB["7e"] = Instance.new("UIListLayout", GANTENGLIB["7d"]);
GANTENGLIB["7e"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["7e"]["Padding"] = UDim.new(0, 5);
GANTENGLIB["7e"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.GantengHubUI.Reserved.DropdownButton
GANTENGLIB["7f"] = Instance.new("TextButton", GANTENGLIB["2c"]);
GANTENGLIB["7f"]["BorderSizePixel"] = 0;
GANTENGLIB["7f"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
GANTENGLIB["7f"]["TextSize"] = 14;
GANTENGLIB["7f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["7f"]["TextColor3"] = Color3.fromRGB(146, 146, 146);
GANTENGLIB["7f"]["Visible"] = false;
GANTENGLIB["7f"]["Size"] = UDim2.new(1, 0, 0, 20);
GANTENGLIB["7f"]["Name"] = [[DropdownButton]];
GANTENGLIB["7f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7f"]["BackgroundTransparency"] = 0.699999988079071;

-- StarterGui.GantengHubUI.Reserved.DropdownButton.UICorner
GANTENGLIB["80"] = Instance.new("UICorner", GANTENGLIB["7f"]);
GANTENGLIB["80"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Icon
GANTENGLIB["81"] = Instance.new("ImageButton", GANTENGLIB["1"]);
GANTENGLIB["81"]["Active"] = false;
GANTENGLIB["81"]["BorderSizePixel"] = 0;
GANTENGLIB["81"]["ImageTransparency"] = 0.10999999940395355;
GANTENGLIB["81"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["81"]["Selectable"] = false;
GANTENGLIB["81"]["Image"] = [[rbxassetid://14601663040]];
GANTENGLIB["81"]["Size"] = UDim2.new(0, 55, 0, 55);
GANTENGLIB["81"]["Name"] = [[Icon]];
GANTENGLIB["81"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["81"]["Visible"] = false;
GANTENGLIB["81"]["Position"] = UDim2.new(0.06876304745674133, 0, 0.08966141194105148, 0);
GANTENGLIB["81"]["BackgroundTransparency"] = 0.15000000596046448;

-- StarterGui.GantengHubUI.Icon.UIAspectRatioConstraint
GANTENGLIB["82"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["81"]);
GANTENGLIB["82"]["AspectRatio"] = 0.9999999403953552;

-- StarterGui.GantengHubUI.Icon.UICorner
GANTENGLIB["83"] = Instance.new("UICorner", GANTENGLIB["81"]);
GANTENGLIB["83"]["CornerRadius"] = UDim.new(0, 9);

-- StarterGui.GantengHubUI.Library
GANTENGLIB["84"] = Instance.new("ModuleScript", GANTENGLIB["1"]);
GANTENGLIB["84"]["Name"] = [[Library]];

-- Require GANTENGLIB wrapper
local GANTENGLIB_REQUIRE = require;
local GANTENGLIB_MODULES = {};
local function require(Module:ModuleScript)
	local ModuleState = GANTENGLIB_MODULES[Module];
	if ModuleState then
		if not ModuleState.Required then
			ModuleState.Required = true;
			ModuleState.Value = ModuleState.Closure();
		end
		return ModuleState.Value;
	end;
	return GANTENGLIB_REQUIRE(Module);
end

GANTENGLIB_MODULES[GANTENGLIB["84"]] = {
	Closure = function()
		local script = GANTENGLIB["84"];
		local LIBRARY = {}

		-- Variables
		local Socials = { discord = "discord.gg/isnahamzah", youtube=  "@isnahamzah" }

		-- Services
		local UserInputService = game:GetService("UserInputService")
		local Players = game:GetService("Players")
		local TweenService = game:GetService("TweenService")
		local HttpService = game:GetService("HttpService")
		local LocalPlayer = Players.LocalPlayer
		local RunService = game:GetService("RunService")

		-- Ga guna karena User GHUB pake HP grapik rata kiri :moyai:
		--local BlurModule = require(script.Blur)

		local debugging = false
		local JSONCONFIG  = [[{}]]



		local function IsStudio()
			if debugging then
				return false
			else
				return game:GetService("RunService"):IsStudio()
			end
		end
		if debugging then -- this runs when debugging "true"

			function writefile(a,b)
				print("WRITEFILE: "..a..", "..b)
			end
			function isfile(a)

				if type(JSONCONFIG) == "string" then
					print("ISFILE: "..a..", true")
					return true
				else
					print("ISFILE: "..a..", false")
				end
			end

			function readfile(a)
				if isfile(a) then
					print("READFILE: "..a)
					return JSONCONFIG
				end
			end
		end
		-- ENV EMULATION AND DEBUGGING PURPOSES

		-- Shortcuts
		local GUI = script.Parent
		local Reserved = GUI.Reserved
		local Frame = GUI.MainFrame
		local MainFram = Frame
		local Icon = GUI.Icon
		local SideFrame = Frame.SideFrame
		local TopFrame = Frame.TopFrame
		local Tabs = Frame.Tabs
		local Landing = Tabs.Landing

		smt = setmetatable

		local function Tween(ins, duration, prop)
			local tween = TweenService:Create(ins, TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), prop)
			tween:Play()
			return tween
		end

		local function EnableDrag(Frame)
			local dragToggle
			local dragSpeed = .25
			local dragInput
			local dragStart
			local dragPos

			local function updateInput(input)
				local Delta = input.Position - dragStart
				local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
				TweenService:Create(Frame, TweenInfo.new(.1), {Position = Position}):Play()
			end

			Frame.InputBegan:Connect(function(input)
				if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
					dragToggle = true
					dragStart = input.Position
					startPos = Frame.Position
					input.Changed:Connect(function()
						if (input.UserInputState == Enum.UserInputState.End) then
							dragToggle = false
						end
					end)
				end
			end)

			Frame.InputChanged:Connect(function(input)
				if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
					dragInput = input
				end
			end)

			game:GetService("UserInputService").InputChanged:Connect(function(input)
				if (input == dragInput and dragToggle) then
					updateInput(input)
				end
			end)
		end

		Frame.Visible = false
		-- LIBARY FUNCTIONS
		function LIBRARY:Window(title, icon)
			local SELF = smt({}, LIBRARY)
			local LISTTABS = {}

			-- CONFIG SYSTEM (anjing lah bikin fitur pukimak susah ni :sob:)
			local CONFIG = {}
			local CONFIGLOADED = false
			if isfile("Ganteng Hub.json") then
				local success, result = pcall(function()
					CONFIG = HttpService:JSONDecode(readfile("Ganteng Hub.json"))
				end)
				if success then
					CONFIGLOADED = true
				elseif not success then
					warn("Attempted to load \"workspace/Ganteng Hub.json\", but an error occured.\nERROR: "..result)
				end
			end

			local function SAVECONFIG()
				writefile("Ganteng Hub.json", HttpService:JSONEncode(CONFIG))
			end
			-- Udah gitu aja :moyai:

			local newFrame = Frame:Clone()
			newFrame.Parent = GUI
			newFrame.Visible = true
	--[[BlurModule:BindFrame(newFrame, {
		Transparency = 0.98,
		BrickColor = BrickColor.new("Institutional white")
	})]]
			EnableDrag(newFrame)
			EnableDrag(GUI.Icon)

			-- SetFunctionStopAllTween and Others Loading screen wrapper
			function SELF:SetFunctionSAT(func)
				newFrame.SideFrame.StopAllTween.MouseButton1Click:Connect(func)
			end
			function SELF:SetSAT(...)
				return ...
			end

			function SELF:SetProgress(...)
				return ...
			end
			function SELF:Finish()
				newFrame.Visible = true
			end
			-- -----------------

			-- Misc handler
			newFrame.TopFrame.Back.MouseButton1Click:Connect(function()
				for k,v in pairs(LISTTABS) do
					Tween(v.Side, 0.2, {BackgroundColor3 = Color3.fromRGB(20,20,20)})
					v.Main.Visible = false
				end
				newFrame.TopFrame.Back.Visible = false
				newFrame.TopFrame.CurrentTab.Text = "Welcome"
				newFrame.Tabs.Landing.Visible = true
			end)
			newFrame.Tabs.Landing.SocialsFrame.Youtube.MouseButton1Click:Connect(function()
				setclipboard(Socials.youtube)
			end)
			newFrame.Tabs.Landing.SocialsFrame.Discord.MouseButton1Click:Connect(function()
				setclipboard(Socials.discord)
			end)

			newFrame.TopFrame.Close.MouseButton1Click:Connect(function()
				newFrame.Visible = false
				GUI.Icon.Visible = true
				--game.Lighting:FindFirstChild("GH_DOF_BLUR").Enabled = false

				for _,v in pairs(workspace.Camera:FindFirstChild("neon"):FindFirstChild("MainFrame"):GetChildren()) do
					v.Size = Vector3.new(0,0,0)
				end
			end)

			local exiting = false
			newFrame.TopFrame.Exit.MouseButton1Click:Connect(function()
				if exiting then
					GUI:Destroy()
					--BlurModule:UnbindFrame(newFrame)
					workspace.Camera:FindFirstChild("neon"):Destroy()
				else
					task.spawn(function()
						Tween(newFrame.TopFrame.Exit, 0.2, { TextColor3 = Color3.fromRGB(220,0,0)})
						exiting = true
						task.wait(1.5)
						Tween(newFrame.TopFrame.Exit, 0.2, { TextColor3 = Color3.fromRGB(220,220,220)})
						exiting = false
					end)
				end
			end)

			GUI.Icon.MouseButton1Click:Connect(function()
				newFrame.Visible = true
				GUI.Icon.Visible = false
		--[[game.Lighting:FindFirstChild("GH_DOF_BLUR").Enabled = true
		
		for _,v in pairs(workspace.Camera:FindFirstChild("neon"):FindFirstChild("MainFrame"):GetChildren()) do
			v.Size = Vector3.new(0.2,0.2,0.2)
		end]]
			end)

			local index = 1
			function SELF:AddChangelog(list)
				local order = {}

				for title, desc in pairs(list) do
					table.insert(order, title)
				end

				table.sort(order, function(a,b)
					return a > b
				end)  -- Sort the titles to maintain order

				for _, title in ipairs(order) do
					local desc = list[title]
					local newCg = Reserved.Changelog:Clone()

					newCg.Name = title
					newCg.Parent = newFrame.Tabs.Landing.ChangelogsFrame.ScrollingFrame

					-- Update properties
					newCg.Title.Text = title
					newCg.Description.Text = desc
					newCg.Visible = true

					-- Adjust position in the scrolling frame
					newCg.LayoutOrder = index
					index = index + 1
				end
			end

			function SELF:AddTab(name,imgID)
				local TAB = smt({}, SELF)
				local LISTTAB = {}

				local NAMETAB = name
				if not CONFIGLOADED or CONFIG[NAMETAB] == nil then
					CONFIG[NAMETAB] =  {}
				end


				local newTab = Reserved.Tab:Clone()
				newTab.Parent = newFrame.Tabs
				newTab.Name = name

				local newTabButton = Reserved.SideButton:Clone()
				newTabButton.Parent = newFrame.SideFrame.SideTabButtons.ScrollingFrame
				newTabButton.Name = name
				newTabButton.Visible = true
				newTabButton.TextLabel.Text = name
				if not string.find(imgID, "rbxassetid://", 1, true) then
					imgID = "rbxassetid://"..imgID
				end
				newTabButton.ImageLabel.Image =  imgID

				LISTTAB.Side = newTabButton
				LISTTAB.Main = newTab
				LISTTABS[name] = LISTTAB


				newTabButton.MouseButton1Click:Connect(function()
					for LTname, value in pairs(LISTTABS) do
						if LTname ~= name then
							Tween(value.Side, 0.2, { BackgroundColor3 = Color3.fromRGB(20,20,20) })
							value.Main.Visible = false
						end
					end

					Tween(newTabButton, 0.2, { BackgroundColor3 = Color3.fromRGB(198, 198, 198)})
					newTab.Visible = true
					newFrame.Tabs.Landing.Visible = false
					newFrame.TopFrame.CurrentTab.Text = name
					newFrame.TopFrame.Back.Visible = true

				end)

				-- ELEMENTS
				function TAB:AddLabel(text)
					local self = smt({}, TAB)
					local newLabel = Reserved.Title:Clone()
					newLabel.Parent = newTab
					newLabel.Name = text

					newLabel.TextLabel.Text = text
					newLabel.Visible = true

					function self:Set(txt)
						newLabel.TextLabel.Text = txt
					end

					return self
				end
				function TAB:AddLabel1(text)
					local self = smt({}, TAB)
					local newLabel = Reserved.Title:Clone()
					newLabel.Parent = newTab
					newLabel.Name = text

					newLabel.TextLabel.Text = text
					newLabel.Visible = true

					function self:Set(txt)
						newLabel.TextLabel.Text = txt
					end

					return self
				end

				function TAB:AddButton(name, callback)
					local self = smt({}, TAB)
					local newButton = Reserved.Button:Clone()
					newButton.Name = name
					newButton.Parent = newTab
					newButton.TextLabel.Text = name
					newButton.Visible = true

					newButton.Button.MouseButton1Click:Connect(function()
						task.spawn(function()
							-- task.desynchronize()
							callback()
						end)
					end)

					newButton.Button.MouseButton1Up:Connect(function(x, y)
				--[[
				kontol TapEffect ini posisi udah exact tapi Y pos offset dikit anjing
				
				local TapFx = Reserved.TapEffect:Clone()
				TapFx.Parent = newButton
				print("x; "..x.."\ny:"..y)
				TapFx.Position = UDim2.fromOffset((Vector2.new(x,y)-newButton.AbsolutePosition).X, (Vector2.new(x,y)-newButton.AbsolutePosition).Y) 
			
				TapFx.Visible = true
				
				local tw = Tween(TapFx, 0.5, {Size = UDim2.new(0,100,0,100)})
				Tween(TapFx, 0.5, {ImageTransparency = 1})
				
				tw.Completed:Wait()
				TapFx:Destroy()]]
					end)

					function self:Set(txt)
						newButton.TextLabel.Text = txt
					end


					return  self
				end

				function TAB:AddLine(name)
					local newline = Reserved.Line:Clone()

					newline.Parent = newTab
					newline.Name = name or "Line"
					newline.Visible = true
				end

				function TAB:AddSeperator(text)
					local self = smt({}, TAB)
					local newSeperator = Reserved.Seperator:Clone()

					newSeperator.Name = text
					newSeperator.TextLabel.Text = text
					newSeperator.Parent = newTab
					newSeperator.Visible = true

					function self:Set(txt)
						newSeperator.TextLabel.Text = txt
					end
				end

				function TAB:AddToggle(name, default, callback)
					local self = smt({}, TAB)
					local newToggle = Reserved.Toggle:Clone()

					newToggle.Name = name
					newToggle.TextLabel.Text = name
					newToggle.Parent = newTab
					newToggle.Visible = true

					if CONFIGLOADED and CONFIG[NAMETAB][name] ~= nil then
						default = CONFIG[NAMETAB][name]
					elseif not CONFIGLOADED or CONFIG[NAMETAB][name] == nil then
						CONFIG[NAMETAB][name] = default
					end

					if default == true then
                        task.spawn(function()
                            callback(true)
                        end)
					end

					-- toggle func
					local duration = 0.2
					local boolstate = default or false

					local function Switch()
						if boolstate == true then
							boolstate = not boolstate -- true > false
							task.spawn(function()
								-- task.desynchronize()
								Tween(newToggle.Background, duration, { BackgroundColor3 = Color3.fromRGB(131,131,131)})

								Tween(newToggle.Background, duration, { BackgroundTransparency = 0.9})
								Tween(newToggle.Background.Switch, duration, { BackgroundTransparency = 0.55})

								Tween(newToggle.Background.Switch, duration, { Position = UDim2.fromScale(0.25, 0.5)})
							end)
						elseif boolstate == false then
							boolstate = not boolstate -- false > true
							task.spawn(function()
								-- task.desynchronize()
								Tween(newToggle.Background, duration, { BackgroundColor3 = Color3.fromRGB(218,218,218)})

								Tween(newToggle.Background, duration, { BackgroundTransparency = 0.85})
								Tween(newToggle.Background.Switch, duration, { BackgroundTransparency = 0.15})

								Tween(newToggle.Background.Switch, duration, { Position = UDim2.fromScale(0.75, 0.5)})
							end)
						end
					end

					local function Set(bool)
						if bool == true then
							boolstate = true -- false

							task.spawn(function()
								-- task.desynchronize()
								Tween(newToggle.Background, duration, { BackgroundColor3 = Color3.fromRGB(218,218,218)})

								Tween(newToggle.Background, duration, { BackgroundTransparency = 0.85})
								Tween(newToggle.Background.Switch, duration, { BackgroundTransparency = 0.15})

								Tween(newToggle.Background.Switch, duration, { Position = UDim2.fromScale(0.75, 0.5)})
							end)
						elseif bool == false then
							boolstate = false -- false

							task.spawn(function()
								-- task.desynchronize()
								Tween(newToggle.Background, duration, { BackgroundColor3 = Color3.fromRGB(131,131,131)})

								Tween(newToggle.Background, duration, { BackgroundTransparency = 0.9})
								Tween(newToggle.Background.Switch, duration, { BackgroundTransparency = 0.55})

								Tween(newToggle.Background.Switch, duration, { Position = UDim2.fromScale(0.25, 0.5)})
							end)
						end
					end

					function self:Toggle()
						Switch()
						CONFIG[NAMETAB][name] = boolstate
						SAVECONFIG()
                        task.spawn(function()
                            callback(boolstate)
                        end)
					end

					function self:Set(bool)
						Set(bool)
						CONFIG[NAMETAB][name] = bool
						SAVECONFIG()
                        task.spawn(function()
                            callback(bool)
                        end)
					end

					if boolstate == false then
						-- when default false
						newToggle.Background.BackgroundColor3 = Color3.fromRGB(131,131,131)

						newToggle.Background.BackgroundTransparency = 0.9
						newToggle.Background.Switch.BackgroundTransparency = 0.55

						newToggle.Background.Switch.Position = UDim2.fromScale(0.25,0.5)
					elseif boolstate == true then
						-- when default true
						newToggle.Background.BackgroundColor3 = Color3.fromRGB(218,218,218)

						newToggle.Background.BackgroundTransparency = 0.85
						newToggle.Background.Switch.BackgroundTransparency = 0.15

						newToggle.Background.Switch.Position = UDim2.fromScale(0.75,0.5)
					end

					newToggle.Button.MouseButton1Click:Connect(function()
						Switch()
						task.spawn(function()
							-- task.desynchronize()
							CONFIG[NAMETAB][name] = boolstate
							SAVECONFIG()
							callback(boolstate)

						end)
					end)

					return self
				end

				function TAB:AddTextbox(name, clearonfocuslost, callback)
					local self = smt({}, TAB)
					local default
					local newTextbox = Reserved.Textbox:Clone()

					newTextbox.Parent = newTab
					newTextbox.Name = name
					newTextbox.TextLabel.Text = name
					newTextbox.Textbox.ClearTextOnFocus = clearonfocuslost
					newTextbox.Visible = true

					if CONFIGLOADED and CONFIG[NAMETAB][name] ~= nil then
						default = CONFIG[NAMETAB][name]
					elseif not CONFIGLOADED or CONFIG[NAMETAB][name] == nil then
						CONFIG[NAMETAB][name] = ""
					end

					if default ~=  "" and default then
						newTextbox.Textbox.Text = default
                        task.spawn(function()
                            callback(newTextbox.Textbox.Text)
                        end)
						CONFIG[NAMETAB][name] = newTextbox.Textbox.Text
					end


					function self:Set(txt)
						newTextbox.Textbox.Text = txt
						CONFIG[NAMETAB][name] = txt
                        task.spawn(function()
                            callback(txt)
                        end)
					end

					newTextbox.Textbox.FocusLost:Connect(function()
						CONFIG[NAMETAB][name] = newTextbox.Textbox.Text
                        task.spawn(function()
                            callback(newTextbox.Textbox.Text)
                        end)
					end)

					return self
				end

				function TAB:AddSlider(name, min, max, default, callback, inc)
					local self = smt({}, TAB)
					local newSlider = Reserved.Slider:Clone()

					newSlider.Parent = newTab
					newSlider.Name = name

					newSlider.Visible = true
					newSlider.TextLabel.Text = name

					if CONFIGLOADED and CONFIG[NAMETAB][name] ~= nil then
						default = CONFIG[NAMETAB][name]
					elseif not CONFIGLOADED or CONFIG[NAMETAB][name] == nil then
						CONFIG[NAMETAB][name] = default
					end

					-- Source slider daur ulang awkoakwoawkaowkaowo

					local Mouse = LocalPlayer:GetMouse()
					local tweenServ = TweenService

					local Trigger = newSlider.Background.Trigger
					local Label = newSlider.Textbox
					local Fill = newSlider.Background.Fill
					local Parent = newSlider.Background

					local perc
					local Percent
					local MouseDown = false
					local delayTw = 0.3

					inc = inc or 1

					local function convertValueToScale(value)
						return (value - min) / (max - min) * (1 - 0) + 0
					end


					Label.Text = tostring(default) or tostring(min)
					Fill.Size = UDim2.fromScale(convertValueToScale(default), 1)

					-- this also update
					local function Slide()
						MouseDown = true
						repeat
							task.wait()
							Percent = math.clamp((Mouse.X - Parent.AbsolutePosition.X) / Parent.AbsoluteSize.X, 0, 1)
							perc = min + (Percent * (max - min))

							-- Calculate the rounded value with the specified precision
							local roundedValue = math.round(perc / inc) * inc

							-- Clamp the value to the specified range
							perc = math.clamp(roundedValue, min, max)

							-- fix float integer problem
							local function fixInt(number, decimalPlaces)
								local multiplier = 10 ^ decimalPlaces
								return math.floor(number * multiplier + 0.5) / multiplier
							end




							local amountDecimal = tostring(inc)
							amountDecimal:gsub("%d+.","")
							amountDecimal = #amountDecimal
							perc = fixInt(perc,tonumber(amountDecimal))

							Label.Text = perc

							Tween(Fill, 0.2, { Size = UDim2.fromScale(Percent, 1) })
							CONFIG[NAMETAB][name] = perc
                            task.spawn(function()
                                callback(perc, newSlider)
                            end)
						until MouseDown == false
						SAVECONFIG()
					end

					local function Update(value)
						if not value then
							return
						elseif value > max or value < min or not value then
							return
						end

						Tween(Fill, 0.2, { Size = UDim2.fromScale(convertValueToScale(value), 1) })

						CONFIG[NAMETAB][name] = value
                        task.spawn(function()
                            callback(value, newSlider)
                        end)
					end
                    task.spawn(function()
                        callback(default)
                    end)

					-- start sliding
					Trigger.MouseButton1Down:Connect(function()
						Slide()
					end)

					-- stop sliding
					UserInputService.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
							MouseDown = false
						end
					end)

					newSlider.Textbox:GetPropertyChangedSignal("Text"):Connect(function()
						Update(tonumber(newSlider.Textbox.Text))
					end)

					function self:Set(value)
						CONFIG[NAMETAB][name] = value
						SAVECONFIG()
						Update(value)
					end

					return self
				end

				function TAB:AddDropdown(name, options, callback, default)
					local self = smt({}, TAB)
					local state = false -- variable to check if dropdown opened or not
					local newDropdown = Reserved.Dropdown:Clone()
					local selected

					newDropdown.Name = name
					newDropdown.Parent = newTab
					newDropdown.TextLabel.Text = name
					newDropdown.Visible = true

					if CONFIGLOADED and CONFIG[NAMETAB][name] ~= nil then
						default = CONFIG[NAMETAB][name]
					elseif not CONFIGLOADED or CONFIG[NAMETAB][name] == nil then
						CONFIG[NAMETAB][name] = ""
					end

					if default and default ~= "" then
						newDropdown.Select.Text = default
						CONFIG[NAMETAB][name] = default
                        task.spawn(function()
                            callback(default)
                        end)
					else
						newDropdown.Select.Text = "None"
					end

					local function ToggleDD()
						if state == false then
							state = not state -- open
							Tween(newDropdown, 0.2, { Size = UDim2.fromOffset(371,111)})
						elseif state == true then
							state = not state -- close
							Tween(newDropdown, 0.2, { Size = UDim2.fromOffset(371,33)})
						end
					end

					local function Select(object)
						Tween(object, 0.2, { BackgroundColor3 = Color3.fromRGB(45,45,45) })
						newDropdown.Select.Text = object.Text
						selected = object.Text
						for _,otherobject in pairs(newDropdown.Buttons.ScrollingFrame:GetChildren()) do
							if otherobject:IsA("TextButton") and otherobject ~= object then
								Tween(otherobject, 0.2, { BackgroundColor3 = Color3.fromRGB(15,15,15) })
							end
						end
						ToggleDD()
					end

					for _,option in pairs(options) do
						local newOption = Reserved.DropdownButton:Clone()

						newOption.Name = option
						newOption.Text = option
						newOption.Parent = newDropdown.Buttons.ScrollingFrame
						newOption.Visible = true

						newOption.MouseButton1Click:Connect(function()
							CONFIG[NAMETAB][name] = option
							SAVECONFIG()
                            task.spawn(function()
                                callback(option)
                            end)
							Select(newOption)
						end)
					end

					newDropdown.Select.MouseButton1Click:Connect(function()
						ToggleDD()
					end)

					function self:Clear()
                        selected = nil
                        newDropdown.Select.Text = "None"
						for _,item in pairs(newDropdown.Buttons.ScrollingFrame:GetChildren()) do
							if item:IsA("TextButton") then
								item:Destroy()
							end
						end
					end

					function self:Add(options)
						if type(options) == "string" then
							local option = options
							local newOption = Reserved.DropdownButton:Clone()

							newOption.Name = option
							newOption.Text = option
							newOption.Parent = newDropdown.Buttons.ScrollingFrame
							newOption.Visible = true

							newOption.MouseButton1Click:Connect(function()
								CONFIG[NAMETAB][name] = option
								SAVECONFIG()
                                task.spawn(function()
                                    callback(option)
                                end)
								Select(newOption)
							end)
						elseif type(options) == "table" then
							for _, option in pairs(options) do
								local newOption = Reserved.DropdownButton:Clone()

								newOption.Name = option
								newOption.Text = option
								newOption.Parent = newDropdown.Buttons.ScrollingFrame
								newOption.Visible = true

								newOption.MouseButton1Click:Connect(function()
									CONFIG[NAMETAB][name] = option
									SAVECONFIG()
                                    task.spawn(function()
                                        callback(option)
                                    end)
									Select(newOption)
								end)
							end
						elseif options and type(options) ~= "table" or "string" then
							error('"string" or "table" expected, got '..type(options))
						end 
					end

					return self
				end

				function TAB:AddMultiDropdown(name, options, callback, default)
					local self = smt({}, TAB)
					local state = false
					local newMultiDD = Reserved.MultiDropdown:Clone()

					default = default or {}

					newMultiDD.Name = name
					newMultiDD.TextLabel.Text = name
					newMultiDD.Parent = newTab
					newMultiDD.Visible = true

					if CONFIGLOADED and CONFIG[NAMETAB][name] ~= nil then
						default = CONFIG[NAMETAB][name]
					elseif not CONFIGLOADED or CONFIG[NAMETAB][name] == nil then
						CONFIG[NAMETAB][name] = {}
					end

					local selected = {}

					if type(default) == "table" and #default > 0 then
						SAVECONFIG()
                        task.spawn(function()
                            callback(default)
                        end)
						newMultiDD.Select.Text = table.concat(default, ", ")
					elseif type(default) == "string" and #default > 0 then
						SAVECONFIG()
                        task.spawn(function()
                            callback(default)
                        end)
						newMultiDD.Select.Text = default
					else
						newMultiDD.Select.Text = "None"
					end

					local function ToggleDD()
						if state == false then
							state = not state -- open
							Tween(newMultiDD, 0.2, { Size = UDim2.fromOffset(371,111)})
						elseif state == true then
							state = not state -- close
							Tween(newMultiDD, 0.2, { Size = UDim2.fromOffset(371,33)})
						end
					end

					local function Click(object)
						if not table.find(selected, object.Text) then -- kalo blum di select
							table.insert(selected, object.Text)

							Tween(object, 0.2, { BackgroundColor3 = Color3.fromRGB(45,45,45) })
							newMultiDD.Select.Text = table.concat(selected, ", ")
						elseif table.find(selected, object.Text) then -- kalo sempet di select
							table.remove(selected, table.find(selected, object.Text))

							Tween(object, 0.2, { BackgroundColor3 = Color3.fromRGB(15,15,15) })
							newMultiDD.Select.Text = table.concat(selected, ", ")
						end
						if #selected == 0 then
							newMultiDD.Select.Text = "None"
						end
					end

					local function Add(option, state)
						local newOption = Reserved.DropdownButton:Clone()

						newOption.Name = option
						newOption.Text = option
						newOption.Parent = newMultiDD.Buttons.ScrollingFrame
						newOption.Visible = true

						if state == true then
							newOption.BackgroundColor3 = Color3.fromRGB(45,45,45)
							table.insert(selected,option)
						end

						newOption.MouseButton1Click:Connect(function()
							Click(newOption)
							CONFIG[NAMETAB][name] = selected
							SAVECONFIG()
                            task.spawn(function()
                                callback(selected)
                            end)
						end)
					end

					for _,option in pairs(options) do
						if table.find(default, option) then
							Add(option, true)
						else
							Add(option, false)
						end
					end

					newMultiDD.Select.MouseButton1Click:Connect(ToggleDD)

					function self:Add(option)
						if typeof(option) == "table" then
							for _,v in pairs(option) do
								Add(v)
							end
						elseif typeof(option) == "string" then
							Add(option)
						end
					end

					function self:Clear()
						for _, item in pairs(newMultiDD.Buttons.ScrollingFrame:GetChildren()) do
							if item:IsA("TextButton") then
								item:Destroy()
							end
						end
						selected = {}
						CONFIG[NAMETAB][name] = {}
						newMultiDD.Select.Text = "None"
					end

					return self
				end

				return TAB
			end
			return SELF
		end

		return LIBRARY
	end;
};

return require(GANTENGLIB["84"])
