-- Instances: 290 | Scripts: 0 | Modules: 1
local GANTENGLIB = {};

-- GantengLib
GANTENGLIB["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
GANTENGLIB["1"]["IgnoreGuiInset"] = true;
GANTENGLIB["1"]["Enabled"] = false;
GANTENGLIB["1"]["ScreenInsets"] = Enum.ScreenInsets.DeviceSafeInsets;
GANTENGLIB["1"]["Name"] = [[GantengLib]];
GANTENGLIB["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
GANTENGLIB["1"]["ResetOnSpawn"] = false;

-- GantengLib.DropShadowHolder
GANTENGLIB["2"] = Instance.new("Frame", GANTENGLIB["1"]);
GANTENGLIB["2"]["ZIndex"] = 0;
GANTENGLIB["2"]["BorderSizePixel"] = 0;
GANTENGLIB["2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["2"]["BackgroundTransparency"] = 1;
GANTENGLIB["2"]["Size"] = UDim2.new(0, 506, 0, 296);
GANTENGLIB["2"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
GANTENGLIB["2"]["Name"] = [[DropShadowHolder]];

-- GantengLib.DropShadowHolder.MainFrame
GANTENGLIB["3"] = Instance.new("Frame", GANTENGLIB["2"]);
GANTENGLIB["3"]["BorderSizePixel"] = 0;
GANTENGLIB["3"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
GANTENGLIB["3"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["3"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["3"]["ClipsDescendants"] = true;
GANTENGLIB["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
GANTENGLIB["3"]["Name"] = [[MainFrame]];

-- GantengLib.DropShadowHolder.MainFrame.UICorner
GANTENGLIB["4"] = Instance.new("UICorner", GANTENGLIB["3"]);


-- GantengLib.DropShadowHolder.MainFrame.SideBar
GANTENGLIB["5"] = Instance.new("Frame", GANTENGLIB["3"]);
GANTENGLIB["5"]["BorderSizePixel"] = 0;
GANTENGLIB["5"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
GANTENGLIB["5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["5"]["BackgroundTransparency"] = 0.20000000298023224;
GANTENGLIB["5"]["Size"] = UDim2.new(0.2806324064731598, 0, 1, 0);
GANTENGLIB["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["5"]["Position"] = UDim2.new(0.1403162032365799, 0, 0.5, 0);
GANTENGLIB["5"]["Name"] = [[SideBar]];

-- GantengLib.DropShadowHolder.MainFrame.SideBar.UICorner
GANTENGLIB["6"] = Instance.new("UICorner", GANTENGLIB["5"]);


-- GantengLib.DropShadowHolder.MainFrame.SideBar.Buttons
GANTENGLIB["7"] = Instance.new("ScrollingFrame", GANTENGLIB["5"]);
GANTENGLIB["7"]["BorderSizePixel"] = 0;
GANTENGLIB["7"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["7"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["7"]["BackgroundTransparency"] = 1;
GANTENGLIB["7"]["Size"] = UDim2.new(1, 0, 0.7229729890823364, 0);
GANTENGLIB["7"]["Selectable"] = false;
GANTENGLIB["7"]["ClipsDescendants"] = true;
GANTENGLIB["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7"]["ScrollBarThickness"] = 0;
GANTENGLIB["7"]["Position"] = UDim2.new(0, 0, 0.14864864945411682, 0);
GANTENGLIB["7"]["Name"] = [[Buttons]];
GANTENGLIB["7"]["SelectionGroup"] = false;

-- GantengLib.DropShadowHolder.MainFrame.SideBar.Buttons.UIListLayout
GANTENGLIB["8"] = Instance.new("UIListLayout", GANTENGLIB["7"]);
GANTENGLIB["8"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["8"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- GantengLib.DropShadowHolder.MainFrame.SideBar.Title
GANTENGLIB["9"] = Instance.new("TextLabel", GANTENGLIB["5"]);
GANTENGLIB["9"]["TextWrapped"] = true;
GANTENGLIB["9"]["BorderSizePixel"] = 0;
GANTENGLIB["9"]["TextScaled"] = true;
GANTENGLIB["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["9"]["TextSize"] = 14;
GANTENGLIB["9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["9"]["Size"] = UDim2.new(0.8450704216957092, 0, 0.16554054617881775, 0);
GANTENGLIB["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["9"]["Text"] = [[Ganteng Hub]];
GANTENGLIB["9"]["Name"] = [[Title]];
GANTENGLIB["9"]["BackgroundTransparency"] = 1;
GANTENGLIB["9"]["Position"] = UDim2.new(0.0845070406794548, 0, 0, 0);

-- GantengLib.DropShadowHolder.MainFrame.SideBar.UIGradient
GANTENGLIB["a"] = Instance.new("UIGradient", GANTENGLIB["5"]);
GANTENGLIB["a"]["Rotation"] = 55;
GANTENGLIB["a"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.SideBar.LocalPlayerInfo
GANTENGLIB["b"] = Instance.new("Frame", GANTENGLIB["5"]);
GANTENGLIB["b"]["BorderSizePixel"] = 0;
GANTENGLIB["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["b"]["BackgroundTransparency"] = 1;
GANTENGLIB["b"]["Size"] = UDim2.new(0, 142, 0, 38);
GANTENGLIB["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["b"]["Position"] = UDim2.new(0, 0, 0.8716216087341309, 0);
GANTENGLIB["b"]["Name"] = [[LocalPlayerInfo]];

-- GantengLib.DropShadowHolder.MainFrame.SideBar.LocalPlayerInfo.Profile
GANTENGLIB["c"] = Instance.new("ImageLabel", GANTENGLIB["b"]);
GANTENGLIB["c"]["BorderSizePixel"] = 0;
GANTENGLIB["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["c"]["Image"] = [[rbxasset://textures/ui/GuiImagePlaceholder.png]];
GANTENGLIB["c"]["Size"] = UDim2.new(0, 26, 0, 26);
GANTENGLIB["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["c"]["Name"] = [[Profile]];
GANTENGLIB["c"]["Position"] = UDim2.new(0, 20, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.SideBar.LocalPlayerInfo.Profile.UIAspectRatioConstraint
GANTENGLIB["d"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["c"]);


-- GantengLib.DropShadowHolder.MainFrame.SideBar.LocalPlayerInfo.Profile.UICorner
GANTENGLIB["e"] = Instance.new("UICorner", GANTENGLIB["c"]);
GANTENGLIB["e"]["CornerRadius"] = UDim.new(100, 0);

-- GantengLib.DropShadowHolder.MainFrame.SideBar.LocalPlayerInfo.UserName
GANTENGLIB["f"] = Instance.new("TextLabel", GANTENGLIB["b"]);
GANTENGLIB["f"]["TextWrapped"] = true;
GANTENGLIB["f"]["BorderSizePixel"] = 0;
GANTENGLIB["f"]["TextScaled"] = true;
GANTENGLIB["f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["f"]["TextSize"] = 14;
GANTENGLIB["f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["f"]["Size"] = UDim2.new(0.6338028311729431, 0, 0.34975162148475647, 0);
GANTENGLIB["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["f"]["Text"] = [[Player]];
GANTENGLIB["f"]["Name"] = [[UserName]];
GANTENGLIB["f"]["BackgroundTransparency"] = 1;
GANTENGLIB["f"]["Position"] = UDim2.new(0.2957746386528015, 0, 0.15789394080638885, 0);

-- GantengLib.DropShadowHolder.MainFrame.SideBar.LocalPlayerInfo.Time
GANTENGLIB["10"] = Instance.new("TextLabel", GANTENGLIB["b"]);
GANTENGLIB["10"]["TextWrapped"] = true;
GANTENGLIB["10"]["BorderSizePixel"] = 0;
GANTENGLIB["10"]["TextScaled"] = true;
GANTENGLIB["10"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["10"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["10"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["10"]["TextSize"] = 14;
GANTENGLIB["10"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["10"]["Size"] = UDim2.new(0.6338028311729431, 0, 0.3344598710536957, 0);
GANTENGLIB["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["10"]["Text"] = [[00:00:00]];
GANTENGLIB["10"]["Name"] = [[Time]];
GANTENGLIB["10"]["BackgroundTransparency"] = 1;
GANTENGLIB["10"]["Position"] = UDim2.new(0.2957746386528015, 0, 0.5076462626457214, 0);

-- GantengLib.DropShadowHolder.MainFrame.UIStroke
GANTENGLIB["11"] = Instance.new("UIStroke", GANTENGLIB["3"]);
GANTENGLIB["11"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["11"]["Transparency"] = 0.6200000047683716;
GANTENGLIB["11"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.MainSide
GANTENGLIB["12"] = Instance.new("Frame", GANTENGLIB["3"]);
GANTENGLIB["12"]["BorderSizePixel"] = 0;
GANTENGLIB["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["12"]["BackgroundTransparency"] = 1;
GANTENGLIB["12"]["Size"] = UDim2.new(0.7193675637245178, 0, 1, 0);
GANTENGLIB["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["12"]["Position"] = UDim2.new(0.2806324064731598, 0, 0, 0);
GANTENGLIB["12"]["Name"] = [[MainSide]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Tabs
GANTENGLIB["13"] = Instance.new("Frame", GANTENGLIB["12"]);
GANTENGLIB["13"]["BorderSizePixel"] = 0;
GANTENGLIB["13"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["13"]["BackgroundTransparency"] = 1;
GANTENGLIB["13"]["Size"] = UDim2.new(0.9999999403953552, 0, 0.8716216087341309, 0);
GANTENGLIB["13"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["13"]["Position"] = UDim2.new(0, 0, 0.12837837636470795, 0);
GANTENGLIB["13"]["Name"] = [[Tabs]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Tabs.SearchedTab
GANTENGLIB["14"] = Instance.new("ScrollingFrame", GANTENGLIB["13"]);
GANTENGLIB["14"]["Active"] = true;
GANTENGLIB["14"]["BorderSizePixel"] = 0;
GANTENGLIB["14"]["TopImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
GANTENGLIB["14"]["ScrollBarImageTransparency"] = 0.5;
GANTENGLIB["14"]["BackgroundColor3"] = Color3.fromRGB(26, 26, 26);
GANTENGLIB["14"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["14"]["BackgroundTransparency"] = 1;
GANTENGLIB["14"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["14"]["ScrollBarImageColor3"] = Color3.fromRGB(151, 151, 151);
GANTENGLIB["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["14"]["ScrollBarThickness"] = 6;
GANTENGLIB["14"]["Visible"] = false;
GANTENGLIB["14"]["Name"] = [[SearchedTab]];
GANTENGLIB["14"]["BottomImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Tabs.SearchedTab.UIListLayout
GANTENGLIB["15"] = Instance.new("UIListLayout", GANTENGLIB["14"]);
GANTENGLIB["15"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar
GANTENGLIB["16"] = Instance.new("Frame", GANTENGLIB["12"]);
GANTENGLIB["16"]["BorderSizePixel"] = 0;
GANTENGLIB["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["16"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["16"]["BackgroundTransparency"] = 1;
GANTENGLIB["16"]["LayoutOrder"] = 1;
GANTENGLIB["16"]["Size"] = UDim2.new(1, 0, 0.12837837636470795, 0);
GANTENGLIB["16"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["16"]["Position"] = UDim2.new(0.5, 0, 0.06418918818235397, 0);
GANTENGLIB["16"]["Name"] = [[TopBar]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Minimize
GANTENGLIB["17"] = Instance.new("TextButton", GANTENGLIB["16"]);
GANTENGLIB["17"]["TextWrapped"] = true;
GANTENGLIB["17"]["BorderSizePixel"] = 0;
GANTENGLIB["17"]["TextScaled"] = true;
GANTENGLIB["17"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["17"]["TextSize"] = 14;
GANTENGLIB["17"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["17"]["TextColor3"] = Color3.fromRGB(191, 191, 191);
GANTENGLIB["17"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["17"]["Size"] = UDim2.new(0.0714285746216774, 0, 0.6842105388641357, 0);
GANTENGLIB["17"]["Name"] = [[Minimize]];
GANTENGLIB["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["17"]["Text"] = [[-]];
GANTENGLIB["17"]["Position"] = UDim2.new(0.8500000238418579, 0, 0.44999998807907104, 0);
GANTENGLIB["17"]["BackgroundTransparency"] = 1;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Minimize.UIAspectRatioConstraint
GANTENGLIB["18"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["17"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Border
GANTENGLIB["19"] = Instance.new("Frame", GANTENGLIB["16"]);
GANTENGLIB["19"]["BorderSizePixel"] = 0;
GANTENGLIB["19"]["BackgroundColor3"] = Color3.fromRGB(209, 209, 209);
GANTENGLIB["19"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["19"]["LayoutOrder"] = 1;
GANTENGLIB["19"]["Size"] = UDim2.new(0.949999988079071, 0, 0.05999999865889549, 0);
GANTENGLIB["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["19"]["Position"] = UDim2.new(0.5, 0, 0.9473156929016113, 0);
GANTENGLIB["19"]["Name"] = [[Border]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Border.UICorner
GANTENGLIB["1a"] = Instance.new("UICorner", GANTENGLIB["19"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move
GANTENGLIB["1b"] = Instance.new("TextButton", GANTENGLIB["16"]);
GANTENGLIB["1b"]["BorderSizePixel"] = 0;
GANTENGLIB["1b"]["AutoButtonColor"] = false;
GANTENGLIB["1b"]["BackgroundColor3"] = Color3.fromRGB(101, 101, 101);
GANTENGLIB["1b"]["TextSize"] = 14;
GANTENGLIB["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["1b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["1b"]["Size"] = UDim2.new(0.06625274568796158, 0, 0.6225790977478027, 0);
GANTENGLIB["1b"]["Name"] = [[Move]];
GANTENGLIB["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1b"]["Text"] = [[]];
GANTENGLIB["1b"]["Position"] = UDim2.new(0.05999999865889549, 0, 0.48100000619888306, 0);
GANTENGLIB["1b"]["BackgroundTransparency"] = 1;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move.UIAspectRatioConstraint
GANTENGLIB["1c"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["1b"]);
GANTENGLIB["1c"]["AspectRatio"] = 1.0000001192092896;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move.Frame
GANTENGLIB["1d"] = Instance.new("Frame", GANTENGLIB["1b"]);
GANTENGLIB["1d"]["BorderSizePixel"] = 0;
GANTENGLIB["1d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["1d"]["Size"] = UDim2.new(0.9416196346282959, 0, 0.19879715144634247, 0);
GANTENGLIB["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1d"]["Position"] = UDim2.new(0.02906207926571369, 0, 0.39955583214759827, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move.Frame.UIGradient
GANTENGLIB["1e"] = Instance.new("UIGradient", GANTENGLIB["1d"]);
GANTENGLIB["1e"]["Rotation"] = 55;
GANTENGLIB["1e"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(204, 204, 204))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move.Frame
GANTENGLIB["1f"] = Instance.new("Frame", GANTENGLIB["1b"]);
GANTENGLIB["1f"]["BorderSizePixel"] = 0;
GANTENGLIB["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["1f"]["Size"] = UDim2.new(0.9416196346282959, 0, 0.19879715144634247, 0);
GANTENGLIB["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["1f"]["Position"] = UDim2.new(0.02906207926571369, 0, 0.06539473682641983, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move.Frame.UIGradient
GANTENGLIB["20"] = Instance.new("UIGradient", GANTENGLIB["1f"]);
GANTENGLIB["20"]["Rotation"] = 55;
GANTENGLIB["20"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(204, 204, 204))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move.Frame
GANTENGLIB["21"] = Instance.new("Frame", GANTENGLIB["1b"]);
GANTENGLIB["21"]["BorderSizePixel"] = 0;
GANTENGLIB["21"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["21"]["Size"] = UDim2.new(0.9416196346282959, 0, 0.19879715144634247, 0);
GANTENGLIB["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["21"]["Position"] = UDim2.new(0.02906207926571369, 0, 0.7454418540000916, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Move.Frame.UIGradient
GANTENGLIB["22"] = Instance.new("UIGradient", GANTENGLIB["21"]);
GANTENGLIB["22"]["Rotation"] = 55;
GANTENGLIB["22"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(204, 204, 204))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.SearchBar
GANTENGLIB["23"] = Instance.new("TextBox", GANTENGLIB["16"]);
GANTENGLIB["23"]["PlaceholderColor3"] = Color3.fromRGB(116, 116, 116);
GANTENGLIB["23"]["BorderSizePixel"] = 0;
GANTENGLIB["23"]["TextSize"] = 16;
GANTENGLIB["23"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["23"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["23"]["TextColor3"] = Color3.fromRGB(208, 208, 208);
GANTENGLIB["23"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["23"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["23"]["PlaceholderText"] = [[Search]];
GANTENGLIB["23"]["Size"] = UDim2.new(0.3540000021457672, 0, 0.6399999856948853, 0);
GANTENGLIB["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["23"]["Text"] = [[]];
GANTENGLIB["23"]["Position"] = UDim2.new(0.29532966017723083, 0, 0.47368431091308594, 0);
GANTENGLIB["23"]["Visible"] = false;
GANTENGLIB["23"]["Name"] = [[SearchBar]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.SearchBar.UICorner
GANTENGLIB["24"] = Instance.new("UICorner", GANTENGLIB["23"]);
GANTENGLIB["24"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.SearchBar.UIGradient
GANTENGLIB["25"] = Instance.new("UIGradient", GANTENGLIB["23"]);
GANTENGLIB["25"]["Rotation"] = 55;
GANTENGLIB["25"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.SearchBar.UIStroke
GANTENGLIB["26"] = Instance.new("UIStroke", GANTENGLIB["23"]);
GANTENGLIB["26"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["26"]["Transparency"] = 0.5;
GANTENGLIB["26"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.SearchBar.UIPadding
GANTENGLIB["27"] = Instance.new("UIPadding", GANTENGLIB["23"]);
GANTENGLIB["27"]["PaddingLeft"] = UDim.new(0, 7);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.SearchBar.SearchButton
GANTENGLIB["28"] = Instance.new("ImageButton", GANTENGLIB["23"]);
GANTENGLIB["28"]["BorderSizePixel"] = 0;
GANTENGLIB["28"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["28"]["ImageColor3"] = Color3.fromRGB(116, 116, 116);
GANTENGLIB["28"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["28"]["Image"] = [[http://www.roblox.com/asset/?id=5107220207]];
GANTENGLIB["28"]["Size"] = UDim2.new(0, 15, 0, 15);
GANTENGLIB["28"]["Name"] = [[SearchButton]];
GANTENGLIB["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["28"]["Position"] = UDim2.new(0.8899999856948853, 0, 0.49300000071525574, 0);
GANTENGLIB["28"]["BackgroundTransparency"] = 0.9900000095367432;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.SearchBar.SearchButton.UIAspectRatioConstraint
GANTENGLIB["29"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["28"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo
GANTENGLIB["2a"] = Instance.new("TextButton", GANTENGLIB["16"]);
GANTENGLIB["2a"]["BorderSizePixel"] = 0;
GANTENGLIB["2a"]["AutoButtonColor"] = false;
GANTENGLIB["2a"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["2a"]["Selectable"] = false;
GANTENGLIB["2a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["2a"]["Size"] = UDim2.new(0.22415801882743835, 0, 0.6400001645088196, 0);
GANTENGLIB["2a"]["Name"] = [[ToggleInfo]];
GANTENGLIB["2a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["2a"]["Text"] = [[]];
GANTENGLIB["2a"]["Position"] = UDim2.new(0.6930000185966492, 0, 0.4740000069141388, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.UICorner
GANTENGLIB["2b"] = Instance.new("UICorner", GANTENGLIB["2a"]);
GANTENGLIB["2b"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.TextLabel
GANTENGLIB["2c"] = Instance.new("TextLabel", GANTENGLIB["2a"]);
GANTENGLIB["2c"]["TextWrapped"] = true;
GANTENGLIB["2c"]["BorderSizePixel"] = 0;
GANTENGLIB["2c"]["TextScaled"] = true;
GANTENGLIB["2c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["2c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["2c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["2c"]["TextSize"] = 14;
GANTENGLIB["2c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["2c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["2c"]["Size"] = UDim2.new(0.7253822684288025, 0, 0.6129032969474792, 0);
GANTENGLIB["2c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["2c"]["Text"] = [[Show Info]];
GANTENGLIB["2c"]["BackgroundTransparency"] = 1;
GANTENGLIB["2c"]["Position"] = UDim2.new(0.4000000059604645, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.UIGradient
GANTENGLIB["2d"] = Instance.new("UIGradient", GANTENGLIB["2a"]);
GANTENGLIB["2d"]["Rotation"] = 55;
GANTENGLIB["2d"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.Toggle
GANTENGLIB["2e"] = Instance.new("Frame", GANTENGLIB["2a"]);
GANTENGLIB["2e"]["BorderSizePixel"] = 0;
GANTENGLIB["2e"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 40);
GANTENGLIB["2e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["2e"]["Size"] = UDim2.new(0, 21, 0, 21);
GANTENGLIB["2e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["2e"]["Position"] = UDim2.new(0.8500000238418579, 0, 0.4970000088214874, 0);
GANTENGLIB["2e"]["Name"] = [[Toggle]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.Toggle.UICorner
GANTENGLIB["2f"] = Instance.new("UICorner", GANTENGLIB["2e"]);
GANTENGLIB["2f"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.Toggle.UIAspectRatioConstraint
GANTENGLIB["30"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["2e"]);
GANTENGLIB["30"]["AspectRatio"] = 0.994199812412262;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.Toggle.Filler
GANTENGLIB["31"] = Instance.new("Frame", GANTENGLIB["2e"]);
GANTENGLIB["31"]["BorderSizePixel"] = 0;
GANTENGLIB["31"]["BackgroundColor3"] = Color3.fromRGB(222, 222, 222);
GANTENGLIB["31"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["31"]["BackgroundTransparency"] = 1;
GANTENGLIB["31"]["Size"] = UDim2.new(0.75, 0, 0.7499999403953552, 0);
GANTENGLIB["31"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["31"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
GANTENGLIB["31"]["Name"] = [[Filler]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.Toggle.Filler.UICorner
GANTENGLIB["32"] = Instance.new("UICorner", GANTENGLIB["31"]);
GANTENGLIB["32"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.ToggleInfo.Toggle.Filler.UIAspectRatioConstraint
GANTENGLIB["33"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["31"]);
GANTENGLIB["33"]["AspectRatio"] = 0.994199812412262;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Close
GANTENGLIB["34"] = Instance.new("TextButton", GANTENGLIB["16"]);
GANTENGLIB["34"]["TextWrapped"] = true;
GANTENGLIB["34"]["BorderSizePixel"] = 0;
GANTENGLIB["34"]["TextScaled"] = true;
GANTENGLIB["34"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["34"]["TextSize"] = 14;
GANTENGLIB["34"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["34"]["TextColor3"] = Color3.fromRGB(191, 191, 191);
GANTENGLIB["34"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["34"]["Size"] = UDim2.new(0.0714285746216774, 0, 0.6842105388641357, 0);
GANTENGLIB["34"]["Name"] = [[Close]];
GANTENGLIB["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["34"]["Text"] = [[X]];
GANTENGLIB["34"]["Position"] = UDim2.new(0.9380000233650208, 0, 0.44999998807907104, 0);
GANTENGLIB["34"]["BackgroundTransparency"] = 1;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Close.UIAspectRatioConstraint
GANTENGLIB["35"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["34"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Alternative
GANTENGLIB["36"] = Instance.new("Frame", GANTENGLIB["16"]);
GANTENGLIB["36"]["Active"] = true;
GANTENGLIB["36"]["BorderSizePixel"] = 0;
GANTENGLIB["36"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["36"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["36"]["Size"] = UDim2.new(0.4153049886226654, 0, 0.6399999856948853, 0);
GANTENGLIB["36"]["Selectable"] = true;
GANTENGLIB["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["36"]["Position"] = UDim2.new(0.32600000500679016, 0, -0.4740000069141388, 0);
GANTENGLIB["36"]["Name"] = [[Alternative]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Alternative.UICorner
GANTENGLIB["37"] = Instance.new("UICorner", GANTENGLIB["36"]);
GANTENGLIB["37"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Alternative.UIGradient
GANTENGLIB["38"] = Instance.new("UIGradient", GANTENGLIB["36"]);
GANTENGLIB["38"]["Rotation"] = 55;
GANTENGLIB["38"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Alternative.UIStroke
GANTENGLIB["39"] = Instance.new("UIStroke", GANTENGLIB["36"]);
GANTENGLIB["39"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["39"]["Transparency"] = 0.5;
GANTENGLIB["39"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.TopBar.Alternative.TextLabel
GANTENGLIB["3a"] = Instance.new("TextLabel", GANTENGLIB["36"]);
GANTENGLIB["3a"]["BorderSizePixel"] = 0;
GANTENGLIB["3a"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["3a"]["Selectable"] = true;
GANTENGLIB["3a"]["TextSize"] = 15;
GANTENGLIB["3a"]["TextColor3"] = Color3.fromRGB(167, 167, 167);
GANTENGLIB["3a"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["3a"]["Active"] = true;
GANTENGLIB["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3a"]["Text"] = [[]];
GANTENGLIB["3a"]["BackgroundTransparency"] = 1;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing
GANTENGLIB["3b"] = Instance.new("Frame", GANTENGLIB["12"]);
GANTENGLIB["3b"]["BorderSizePixel"] = 0;
GANTENGLIB["3b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["3b"]["BackgroundTransparency"] = 1;
GANTENGLIB["3b"]["Size"] = UDim2.new(0.9999999403953552, 0, 0.8716216087341309, 0);
GANTENGLIB["3b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3b"]["Position"] = UDim2.new(0, 0, 0.12837837636470795, 0);
GANTENGLIB["3b"]["Name"] = [[Landing]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame
GANTENGLIB["3c"] = Instance.new("Frame", GANTENGLIB["3b"]);
GANTENGLIB["3c"]["BorderSizePixel"] = 0;
GANTENGLIB["3c"]["BackgroundColor3"] = Color3.fromRGB(23, 23, 23);
GANTENGLIB["3c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["3c"]["Size"] = UDim2.new(0.8928571939468384, 0, 0.22868217527866364, 0);
GANTENGLIB["3c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3c"]["Position"] = UDim2.new(0.4931319057941437, 0, 0.17940887808799744, 0);
GANTENGLIB["3c"]["Name"] = [[TitleFrame]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame.Title
GANTENGLIB["3d"] = Instance.new("TextLabel", GANTENGLIB["3c"]);
GANTENGLIB["3d"]["BorderSizePixel"] = 0;
GANTENGLIB["3d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["3d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["3d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["3d"]["TextSize"] = 21;
GANTENGLIB["3d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["3d"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["3d"]["Size"] = UDim2.new(1.0861539840698242, 0, 0.38983049988746643, 0);
GANTENGLIB["3d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3d"]["Text"] = [[Ganteng Hub]];
GANTENGLIB["3d"]["Name"] = [[Title]];
GANTENGLIB["3d"]["BackgroundTransparency"] = 1;
GANTENGLIB["3d"]["Position"] = UDim2.new(0.1975381225347519, 0, 0.2724870443344116, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame.Icon
GANTENGLIB["3e"] = Instance.new("ImageLabel", GANTENGLIB["3c"]);
GANTENGLIB["3e"]["BorderSizePixel"] = 0;
GANTENGLIB["3e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["3e"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["3e"]["Image"] = [[rbxassetid://15006559003]];
GANTENGLIB["3e"]["Size"] = UDim2.new(0.14769230782985687, 0, 0.8135592937469482, 0);
GANTENGLIB["3e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["3e"]["Name"] = [[Icon]];
GANTENGLIB["3e"]["Position"] = UDim2.new(0.02407696098089218, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame.Icon.UIAspectRatioConstraint
GANTENGLIB["3f"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["3e"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame.Icon.UICorner
GANTENGLIB["40"] = Instance.new("UICorner", GANTENGLIB["3e"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame.UICorner
GANTENGLIB["41"] = Instance.new("UICorner", GANTENGLIB["3c"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame.UIGradient
GANTENGLIB["42"] = Instance.new("UIGradient", GANTENGLIB["3c"]);
GANTENGLIB["42"]["Rotation"] = 55;
GANTENGLIB["42"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.TitleFrame.SubTitle
GANTENGLIB["43"] = Instance.new("TextLabel", GANTENGLIB["3c"]);
GANTENGLIB["43"]["BorderSizePixel"] = 0;
GANTENGLIB["43"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["43"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["43"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["43"]["TextSize"] = 17;
GANTENGLIB["43"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["43"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["43"]["Size"] = UDim2.new(0.8134894967079163, 0, 0.3050847351551056, 0);
GANTENGLIB["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["43"]["Text"] = [[Welcome to Ganteng Hub!]];
GANTENGLIB["43"]["Name"] = [[SubTitle]];
GANTENGLIB["43"]["BackgroundTransparency"] = 1;
GANTENGLIB["43"]["Position"] = UDim2.new(0.1975381225347519, 0, 0.6600000262260437, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Changelogs
GANTENGLIB["44"] = Instance.new("Frame", GANTENGLIB["3b"]);
GANTENGLIB["44"]["BorderSizePixel"] = 0;
GANTENGLIB["44"]["BackgroundColor3"] = Color3.fromRGB(23, 23, 23);
GANTENGLIB["44"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["44"]["Size"] = UDim2.new(0.43681323528289795, 0, 0.5775193572044373, 0);
GANTENGLIB["44"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["44"]["Position"] = UDim2.new(0.7310000061988831, 0, 0.6474341154098511, 0);
GANTENGLIB["44"]["Name"] = [[Changelogs]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Changelogs.UICorner
GANTENGLIB["45"] = Instance.new("UICorner", GANTENGLIB["44"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Changelogs.UIGradient
GANTENGLIB["46"] = Instance.new("UIGradient", GANTENGLIB["44"]);
GANTENGLIB["46"]["Rotation"] = 55;
GANTENGLIB["46"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Changelogs.ScrollingFrame
GANTENGLIB["47"] = Instance.new("ScrollingFrame", GANTENGLIB["44"]);
GANTENGLIB["47"]["Active"] = true;
GANTENGLIB["47"]["BorderSizePixel"] = 0;
GANTENGLIB["47"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["47"]["TopImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
GANTENGLIB["47"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["47"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["47"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["47"]["BackgroundTransparency"] = 1;
GANTENGLIB["47"]["Size"] = UDim2.new(0.8999999761581421, 0, 0.7900000214576721, 0);
GANTENGLIB["47"]["ScrollBarImageColor3"] = Color3.fromRGB(176, 176, 176);
GANTENGLIB["47"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["47"]["ScrollBarThickness"] = 0;
GANTENGLIB["47"]["Position"] = UDim2.new(0.5000000596046448, 0, 0.5550738573074341, 0);
GANTENGLIB["47"]["BottomImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Changelogs.ScrollingFrame.UIListLayout
GANTENGLIB["48"] = Instance.new("UIListLayout", GANTENGLIB["47"]);
GANTENGLIB["48"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["48"]["Padding"] = UDim.new(0, 4);
GANTENGLIB["48"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Changelogs.Title
GANTENGLIB["49"] = Instance.new("TextLabel", GANTENGLIB["44"]);
GANTENGLIB["49"]["BorderSizePixel"] = 0;
GANTENGLIB["49"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["49"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["49"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["49"]["TextSize"] = 16;
GANTENGLIB["49"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["49"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["49"]["Size"] = UDim2.new(0.9056603908538818, 0, 0.10738255083560944, 0);
GANTENGLIB["49"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["49"]["Text"] = [[Changelogs]];
GANTENGLIB["49"]["Name"] = [[Title]];
GANTENGLIB["49"]["BackgroundTransparency"] = 1;
GANTENGLIB["49"]["Position"] = UDim2.new(0.5009999871253967, 0, 0.08900000154972076, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos
GANTENGLIB["4a"] = Instance.new("Frame", GANTENGLIB["3b"]);
GANTENGLIB["4a"]["BorderSizePixel"] = 0;
GANTENGLIB["4a"]["BackgroundColor3"] = Color3.fromRGB(23, 23, 23);
GANTENGLIB["4a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["4a"]["Size"] = UDim2.new(0.42307695746421814, 0, 0.5775193572044373, 0);
GANTENGLIB["4a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["4a"]["Position"] = UDim2.new(0.25991755723953247, 0, 0.6474341154098511, 0);
GANTENGLIB["4a"]["Name"] = [[Infos]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.UICorner
GANTENGLIB["4b"] = Instance.new("UICorner", GANTENGLIB["4a"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.UIGradient
GANTENGLIB["4c"] = Instance.new("UIGradient", GANTENGLIB["4a"]);
GANTENGLIB["4c"]["Rotation"] = 55;
GANTENGLIB["4c"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Title
GANTENGLIB["4d"] = Instance.new("TextLabel", GANTENGLIB["4a"]);
GANTENGLIB["4d"]["BorderSizePixel"] = 0;
GANTENGLIB["4d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["4d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["4d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["4d"]["TextSize"] = 16;
GANTENGLIB["4d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["4d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["4d"]["Size"] = UDim2.new(0.9090909361839294, 0, 0.10738255083560944, 0);
GANTENGLIB["4d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["4d"]["Text"] = [[Informations]];
GANTENGLIB["4d"]["Name"] = [[Title]];
GANTENGLIB["4d"]["BackgroundTransparency"] = 1;
GANTENGLIB["4d"]["Position"] = UDim2.new(0.5053700804710388, 0, 0.088999904692173, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Introdution
GANTENGLIB["4e"] = Instance.new("Frame", GANTENGLIB["4a"]);
GANTENGLIB["4e"]["BorderSizePixel"] = 0;
GANTENGLIB["4e"]["BackgroundColor3"] = Color3.fromRGB(32, 32, 32);
GANTENGLIB["4e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["4e"]["Size"] = UDim2.new(0.9155844449996948, 0, 0.4429530203342438, 0);
GANTENGLIB["4e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["4e"]["Position"] = UDim2.new(0.5, 0, 0.4056878685951233, 0);
GANTENGLIB["4e"]["Name"] = [[Introdution]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Introdution.UICorner
GANTENGLIB["4f"] = Instance.new("UICorner", GANTENGLIB["4e"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Introdution.UIGradient
GANTENGLIB["50"] = Instance.new("UIGradient", GANTENGLIB["4e"]);
GANTENGLIB["50"]["Rotation"] = 55;
GANTENGLIB["50"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Introdution.Title
GANTENGLIB["51"] = Instance.new("TextLabel", GANTENGLIB["4e"]);
GANTENGLIB["51"]["BorderSizePixel"] = 0;
GANTENGLIB["51"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["51"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["51"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["51"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["51"]["TextSize"] = 12;
GANTENGLIB["51"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["51"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["51"]["Size"] = UDim2.new(0.9432623982429504, 0, 0.22727273404598236, 0);
GANTENGLIB["51"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["51"]["Text"] = [[What is Ganteng Hub? ]];
GANTENGLIB["51"]["Name"] = [[Title]];
GANTENGLIB["51"]["BackgroundTransparency"] = 1;
GANTENGLIB["51"]["Position"] = UDim2.new(0.5035461187362671, 0, 0.1818181872367859, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Introdution.Description
GANTENGLIB["52"] = Instance.new("TextLabel", GANTENGLIB["4e"]);
GANTENGLIB["52"]["TextWrapped"] = true;
GANTENGLIB["52"]["BorderSizePixel"] = 0;
GANTENGLIB["52"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["52"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["52"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["52"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["52"]["TextSize"] = 11;
GANTENGLIB["52"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["52"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["52"]["Size"] = UDim2.new(0.9432623982429504, 0, 0.6969696879386902, 0);
GANTENGLIB["52"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["52"]["Text"] = [[Ganteng Hub is a tool that allows player to have fun with game without spending time to reach max levels.]];
GANTENGLIB["52"]["Name"] = [[Description]];
GANTENGLIB["52"]["BackgroundTransparency"] = 1;
GANTENGLIB["52"]["Position"] = UDim2.new(0.5035461187362671, 0, 0.6515151262283325, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials
GANTENGLIB["53"] = Instance.new("Frame", GANTENGLIB["4a"]);
GANTENGLIB["53"]["BorderSizePixel"] = 0;
GANTENGLIB["53"]["BackgroundColor3"] = Color3.fromRGB(32, 32, 32);
GANTENGLIB["53"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["53"]["Size"] = UDim2.new(0.9155844449996948, 0, 0.28859061002731323, 0);
GANTENGLIB["53"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["53"]["Position"] = UDim2.new(0.5, 0, 0.8021265864372253, 0);
GANTENGLIB["53"]["Name"] = [[Socials]];

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.UICorner
GANTENGLIB["54"] = Instance.new("UICorner", GANTENGLIB["53"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.UIGradient
GANTENGLIB["55"] = Instance.new("UIGradient", GANTENGLIB["53"]);
GANTENGLIB["55"]["Rotation"] = 55;
GANTENGLIB["55"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Discord
GANTENGLIB["56"] = Instance.new("ImageButton", GANTENGLIB["53"]);
GANTENGLIB["56"]["BorderSizePixel"] = 0;
GANTENGLIB["56"]["AutoButtonColor"] = false;
GANTENGLIB["56"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["56"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["56"]["Size"] = UDim2.new(0.4592592716217041, 0, 0.6744186282157898, 0);
GANTENGLIB["56"]["Name"] = [[Discord]];
GANTENGLIB["56"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["56"]["Position"] = UDim2.new(0.22962963581085205, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Discord.UICorner
GANTENGLIB["57"] = Instance.new("UICorner", GANTENGLIB["56"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Discord.UIGradient
GANTENGLIB["58"] = Instance.new("UIGradient", GANTENGLIB["56"]);
GANTENGLIB["58"]["Rotation"] = 55;
GANTENGLIB["58"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(97, 86, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(38, 0, 224))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Discord.TextLabel
GANTENGLIB["59"] = Instance.new("TextLabel", GANTENGLIB["56"]);
GANTENGLIB["59"]["TextWrapped"] = true;
GANTENGLIB["59"]["BorderSizePixel"] = 0;
GANTENGLIB["59"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["59"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["59"]["TextSize"] = 14;
GANTENGLIB["59"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["59"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["59"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["59"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["59"]["Text"] = [[Discord]];
GANTENGLIB["59"]["BackgroundTransparency"] = 1;
GANTENGLIB["59"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Discord.UIStroke
GANTENGLIB["5a"] = Instance.new("UIStroke", GANTENGLIB["56"]);
GANTENGLIB["5a"]["Color"] = Color3.fromRGB(50, 167, 255);
GANTENGLIB["5a"]["Thickness"] = 1.5;
GANTENGLIB["5a"]["Transparency"] = 0.5;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Discord.UIAspectRatioConstraint
GANTENGLIB["5b"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["56"]);
GANTENGLIB["5b"]["AspectRatio"] = 2.1379308700561523;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.UIListLayout
GANTENGLIB["5c"] = Instance.new("UIListLayout", GANTENGLIB["53"]);
GANTENGLIB["5c"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
GANTENGLIB["5c"]["FillDirection"] = Enum.FillDirection.Horizontal;
GANTENGLIB["5c"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
GANTENGLIB["5c"]["Padding"] = UDim.new(0, 5);
GANTENGLIB["5c"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.UIPadding
GANTENGLIB["5d"] = Instance.new("UIPadding", GANTENGLIB["53"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Youtube
GANTENGLIB["5e"] = Instance.new("ImageButton", GANTENGLIB["53"]);
GANTENGLIB["5e"]["BorderSizePixel"] = 0;
GANTENGLIB["5e"]["AutoButtonColor"] = false;
GANTENGLIB["5e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["5e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["5e"]["Size"] = UDim2.new(0.4592592716217041, 0, 0.6744186282157898, 0);
GANTENGLIB["5e"]["Name"] = [[Youtube]];
GANTENGLIB["5e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["5e"]["Position"] = UDim2.new(0.22962963581085205, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Youtube.UICorner
GANTENGLIB["5f"] = Instance.new("UICorner", GANTENGLIB["5e"]);


-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Youtube.UIGradient
GANTENGLIB["60"] = Instance.new("UIGradient", GANTENGLIB["5e"]);
GANTENGLIB["60"]["Rotation"] = 55;
GANTENGLIB["60"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 0, 5)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(224, 0, 205))};

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Youtube.TextLabel
GANTENGLIB["61"] = Instance.new("TextLabel", GANTENGLIB["5e"]);
GANTENGLIB["61"]["TextWrapped"] = true;
GANTENGLIB["61"]["BorderSizePixel"] = 0;
GANTENGLIB["61"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["61"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["61"]["TextSize"] = 14;
GANTENGLIB["61"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["61"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["61"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["61"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["61"]["Text"] = [[Youtube]];
GANTENGLIB["61"]["BackgroundTransparency"] = 1;
GANTENGLIB["61"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Youtube.UIAspectRatioConstraint
GANTENGLIB["62"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["5e"]);
GANTENGLIB["62"]["AspectRatio"] = 2.1379308700561523;

-- GantengLib.DropShadowHolder.MainFrame.MainSide.Landing.Infos.Socials.Youtube.UIStroke
GANTENGLIB["63"] = Instance.new("UIStroke", GANTENGLIB["5e"]);
GANTENGLIB["63"]["Color"] = Color3.fromRGB(255, 0, 133);
GANTENGLIB["63"]["Thickness"] = 1.5;
GANTENGLIB["63"]["Transparency"] = 0.5;

-- GantengLib.DropShadowHolder.MainFrame.UIGradient
GANTENGLIB["64"] = Instance.new("UIGradient", GANTENGLIB["3"]);
GANTENGLIB["64"]["Rotation"] = 55;
GANTENGLIB["64"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs
GANTENGLIB["65"] = Instance.new("Folder", GANTENGLIB["3"]);
GANTENGLIB["65"]["Name"] = [[PremadeLibs]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab
GANTENGLIB["66"] = Instance.new("Folder", GANTENGLIB["65"]);
GANTENGLIB["66"]["Name"] = [[InsideTab]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Button
GANTENGLIB["67"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["67"]["BorderSizePixel"] = 0;
GANTENGLIB["67"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["67"]["BackgroundTransparency"] = 1;
GANTENGLIB["67"]["Size"] = UDim2.new(1, 0, 0, 39);
GANTENGLIB["67"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["67"]["Visible"] = false;
GANTENGLIB["67"]["Name"] = [[Button]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Button.Frame
GANTENGLIB["68"] = Instance.new("TextButton", GANTENGLIB["67"]);
GANTENGLIB["68"]["BorderSizePixel"] = 0;
GANTENGLIB["68"]["AutoButtonColor"] = false;
GANTENGLIB["68"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["68"]["Selectable"] = false;
GANTENGLIB["68"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["68"]["Size"] = UDim2.new(0.9604218006134033, 0, 0.8157894611358643, 0);
GANTENGLIB["68"]["Name"] = [[Frame]];
GANTENGLIB["68"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["68"]["Text"] = [[]];
GANTENGLIB["68"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Button.Frame.UICorner
GANTENGLIB["69"] = Instance.new("UICorner", GANTENGLIB["68"]);
GANTENGLIB["69"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Button.Frame.TextLabel
GANTENGLIB["6a"] = Instance.new("TextLabel", GANTENGLIB["68"]);
GANTENGLIB["6a"]["TextWrapped"] = true;
GANTENGLIB["6a"]["BorderSizePixel"] = 0;
GANTENGLIB["6a"]["TextScaled"] = true;
GANTENGLIB["6a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["6a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["6a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["6a"]["TextSize"] = 14;
GANTENGLIB["6a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["6a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["6a"]["Size"] = UDim2.new(0.8226743936538696, 0, 0.6129032373428345, 0);
GANTENGLIB["6a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["6a"]["Text"] = [[Button]];
GANTENGLIB["6a"]["BackgroundTransparency"] = 1;
GANTENGLIB["6a"]["Position"] = UDim2.new(0.4399999976158142, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Button.Frame.UIGradient
GANTENGLIB["6b"] = Instance.new("UIGradient", GANTENGLIB["68"]);
GANTENGLIB["6b"]["Rotation"] = 55;
GANTENGLIB["6b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Button.Frame.UIStroke
GANTENGLIB["6c"] = Instance.new("UIStroke", GANTENGLIB["68"]);
GANTENGLIB["6c"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["6c"]["Thickness"] = 0.8500000238418579;
GANTENGLIB["6c"]["Transparency"] = 1;
GANTENGLIB["6c"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind
GANTENGLIB["6d"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["6d"]["BorderSizePixel"] = 0;
GANTENGLIB["6d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["6d"]["BackgroundTransparency"] = 1;
GANTENGLIB["6d"]["Size"] = UDim2.new(1, 0, 0, 39);
GANTENGLIB["6d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["6d"]["Visible"] = false;
GANTENGLIB["6d"]["Name"] = [[Keybind]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame
GANTENGLIB["6e"] = Instance.new("TextButton", GANTENGLIB["6d"]);
GANTENGLIB["6e"]["BorderSizePixel"] = 0;
GANTENGLIB["6e"]["AutoButtonColor"] = false;
GANTENGLIB["6e"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["6e"]["Selectable"] = false;
GANTENGLIB["6e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["6e"]["Size"] = UDim2.new(0.9604218006134033, 0, 0.8157894611358643, 0);
GANTENGLIB["6e"]["Name"] = [[Frame]];
GANTENGLIB["6e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["6e"]["Text"] = [[]];
GANTENGLIB["6e"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame.UICorner
GANTENGLIB["6f"] = Instance.new("UICorner", GANTENGLIB["6e"]);
GANTENGLIB["6f"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame.TextLabel
GANTENGLIB["70"] = Instance.new("TextLabel", GANTENGLIB["6e"]);
GANTENGLIB["70"]["TextWrapped"] = true;
GANTENGLIB["70"]["BorderSizePixel"] = 0;
GANTENGLIB["70"]["TextScaled"] = true;
GANTENGLIB["70"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["70"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["70"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["70"]["TextSize"] = 14;
GANTENGLIB["70"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["70"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["70"]["Size"] = UDim2.new(0.7575578093528748, 0, 0.6129031777381897, 0);
GANTENGLIB["70"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["70"]["Text"] = [[Keybind]];
GANTENGLIB["70"]["BackgroundTransparency"] = 1;
GANTENGLIB["70"]["Position"] = UDim2.new(0.40744173526763916, 0, 0.5000002384185791, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame.UIGradient
GANTENGLIB["71"] = Instance.new("UIGradient", GANTENGLIB["6e"]);
GANTENGLIB["71"]["Rotation"] = 55;
GANTENGLIB["71"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame.Bind
GANTENGLIB["72"] = Instance.new("TextButton", GANTENGLIB["6e"]);
GANTENGLIB["72"]["TextWrapped"] = true;
GANTENGLIB["72"]["Active"] = false;
GANTENGLIB["72"]["BorderSizePixel"] = 0;
GANTENGLIB["72"]["AutoButtonColor"] = false;
GANTENGLIB["72"]["TextScaled"] = true;
GANTENGLIB["72"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 40);
GANTENGLIB["72"]["TextSize"] = 20;
GANTENGLIB["72"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["72"]["TextColor3"] = Color3.fromRGB(191, 191, 191);
GANTENGLIB["72"]["Selectable"] = false;
GANTENGLIB["72"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["72"]["Size"] = UDim2.new(0.13624930381774902, 0, 0.75, 0);
GANTENGLIB["72"]["Name"] = [[Bind]];
GANTENGLIB["72"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["72"]["Text"] = [[???]];
GANTENGLIB["72"]["Position"] = UDim2.new(0.9092356562614441, 0, 0.4999999701976776, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame.Bind.UICorner
GANTENGLIB["73"] = Instance.new("UICorner", GANTENGLIB["72"]);
GANTENGLIB["73"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame.Bind.UIGradient
GANTENGLIB["74"] = Instance.new("UIGradient", GANTENGLIB["72"]);
GANTENGLIB["74"]["Rotation"] = 55;
GANTENGLIB["74"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Keybind.Frame.UIStroke
GANTENGLIB["75"] = Instance.new("UIStroke", GANTENGLIB["6e"]);
GANTENGLIB["75"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["75"]["Thickness"] = 0.8500000238418579;
GANTENGLIB["75"]["Transparency"] = 1;
GANTENGLIB["75"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider
GANTENGLIB["76"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["76"]["BorderSizePixel"] = 0;
GANTENGLIB["76"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["76"]["BackgroundTransparency"] = 1;
GANTENGLIB["76"]["Size"] = UDim2.new(1, 0, 0, 69);
GANTENGLIB["76"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["76"]["Visible"] = false;
GANTENGLIB["76"]["Name"] = [[Slider]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame
GANTENGLIB["77"] = Instance.new("Frame", GANTENGLIB["76"]);
GANTENGLIB["77"]["Active"] = true;
GANTENGLIB["77"]["BorderSizePixel"] = 0;
GANTENGLIB["77"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["77"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["77"]["Size"] = UDim2.new(0.9599999785423279, 0, 0.8500000238418579, 0);
GANTENGLIB["77"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["77"]["Position"] = UDim2.new(0.5, 0, 0.48316532373428345, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.UICorner
GANTENGLIB["78"] = Instance.new("UICorner", GANTENGLIB["77"]);
GANTENGLIB["78"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.TextLabel
GANTENGLIB["79"] = Instance.new("TextLabel", GANTENGLIB["77"]);
GANTENGLIB["79"]["TextWrapped"] = true;
GANTENGLIB["79"]["BorderSizePixel"] = 0;
GANTENGLIB["79"]["TextScaled"] = true;
GANTENGLIB["79"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["79"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["79"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["79"]["TextSize"] = 14;
GANTENGLIB["79"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["79"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["79"]["Size"] = UDim2.new(0.7575578689575195, 0, 0.31506994366645813, 0);
GANTENGLIB["79"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["79"]["Text"] = [[Slider]];
GANTENGLIB["79"]["BackgroundTransparency"] = 1;
GANTENGLIB["79"]["Position"] = UDim2.new(0.40744179487228394, 0, 0.24790118634700775, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.UIGradient
GANTENGLIB["7a"] = Instance.new("UIGradient", GANTENGLIB["77"]);
GANTENGLIB["7a"]["Rotation"] = 55;
GANTENGLIB["7a"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(128, 128, 128))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.Textbox
GANTENGLIB["7b"] = Instance.new("TextBox", GANTENGLIB["77"]);
GANTENGLIB["7b"]["Active"] = false;
GANTENGLIB["7b"]["PlaceholderColor3"] = Color3.fromRGB(164, 164, 164);
GANTENGLIB["7b"]["BorderSizePixel"] = 0;
GANTENGLIB["7b"]["TextSize"] = 20;
GANTENGLIB["7b"]["TextWrapped"] = true;
GANTENGLIB["7b"]["TextScaled"] = true;
GANTENGLIB["7b"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 40);
GANTENGLIB["7b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["7b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["7b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["7b"]["Size"] = UDim2.new(0.13600000739097595, 0, 0.3205437660217285, 0);
GANTENGLIB["7b"]["Selectable"] = false;
GANTENGLIB["7b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7b"]["Text"] = [[]];
GANTENGLIB["7b"]["Position"] = UDim2.new(0.9092612266540527, 0, 0.2451651692390442, 0);
GANTENGLIB["7b"]["Name"] = [[Textbox]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.Textbox.UICorner
GANTENGLIB["7c"] = Instance.new("UICorner", GANTENGLIB["7b"]);
GANTENGLIB["7c"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider
GANTENGLIB["7d"] = Instance.new("Frame", GANTENGLIB["77"]);
GANTENGLIB["7d"]["BorderSizePixel"] = 0;
GANTENGLIB["7d"]["BackgroundColor3"] = Color3.fromRGB(109, 109, 109);
GANTENGLIB["7d"]["Size"] = UDim2.new(0.9512612819671631, 0, 0.3149999976158142, 0);
GANTENGLIB["7d"]["ClipsDescendants"] = true;
GANTENGLIB["7d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7d"]["Position"] = UDim2.new(0.02599991112947464, 0, 0.5499999523162842, 0);
GANTENGLIB["7d"]["Name"] = [[FrameSlider]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.UICorner
GANTENGLIB["7e"] = Instance.new("UICorner", GANTENGLIB["7d"]);
GANTENGLIB["7e"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.Fill
GANTENGLIB["7f"] = Instance.new("Frame", GANTENGLIB["7d"]);
GANTENGLIB["7f"]["BorderSizePixel"] = 0;
GANTENGLIB["7f"]["BackgroundColor3"] = Color3.fromRGB(236, 236, 236);
GANTENGLIB["7f"]["Size"] = UDim2.new(0, 0, 1, 0);
GANTENGLIB["7f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["7f"]["Name"] = [[Fill]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.Fill.UICorner
GANTENGLIB["80"] = Instance.new("UICorner", GANTENGLIB["7f"]);
GANTENGLIB["80"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.Fill.UIGradient
GANTENGLIB["81"] = Instance.new("UIGradient", GANTENGLIB["7f"]);
GANTENGLIB["81"]["Rotation"] = 55;
GANTENGLIB["81"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.Fill.UIStroke
GANTENGLIB["82"] = Instance.new("UIStroke", GANTENGLIB["7f"]);
GANTENGLIB["82"]["Color"] = Color3.fromRGB(190, 190, 190);
GANTENGLIB["82"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.Trigger
GANTENGLIB["83"] = Instance.new("TextButton", GANTENGLIB["7d"]);
GANTENGLIB["83"]["BorderSizePixel"] = 0;
GANTENGLIB["83"]["AutoButtonColor"] = false;
GANTENGLIB["83"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["83"]["TextSize"] = 14;
GANTENGLIB["83"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["83"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["83"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["83"]["Name"] = [[Trigger]];
GANTENGLIB["83"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["83"]["Text"] = [[]];
GANTENGLIB["83"]["BackgroundTransparency"] = 1;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.UIGradient
GANTENGLIB["84"] = Instance.new("UIGradient", GANTENGLIB["7d"]);
GANTENGLIB["84"]["Rotation"] = 55;
GANTENGLIB["84"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.FrameSlider.UIStroke
GANTENGLIB["85"] = Instance.new("UIStroke", GANTENGLIB["7d"]);
GANTENGLIB["85"]["Color"] = Color3.fromRGB(190, 190, 190);
GANTENGLIB["85"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Slider.Frame.UIStroke
GANTENGLIB["86"] = Instance.new("UIStroke", GANTENGLIB["77"]);
GANTENGLIB["86"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["86"]["Thickness"] = 0.8500000238418579;
GANTENGLIB["86"]["Transparency"] = 1;
GANTENGLIB["86"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox
GANTENGLIB["87"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["87"]["BorderSizePixel"] = 0;
GANTENGLIB["87"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["87"]["BackgroundTransparency"] = 1;
GANTENGLIB["87"]["Size"] = UDim2.new(1, 0, 0, 39);
GANTENGLIB["87"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["87"]["Visible"] = false;
GANTENGLIB["87"]["Name"] = [[Textbox]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame
GANTENGLIB["88"] = Instance.new("TextButton", GANTENGLIB["87"]);
GANTENGLIB["88"]["BorderSizePixel"] = 0;
GANTENGLIB["88"]["AutoButtonColor"] = false;
GANTENGLIB["88"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["88"]["Selectable"] = false;
GANTENGLIB["88"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["88"]["Size"] = UDim2.new(0.9604218006134033, 0, 0.8157894611358643, 0);
GANTENGLIB["88"]["Name"] = [[Frame]];
GANTENGLIB["88"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["88"]["Text"] = [[]];
GANTENGLIB["88"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.UICorner
GANTENGLIB["89"] = Instance.new("UICorner", GANTENGLIB["88"]);
GANTENGLIB["89"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.TextLabel
GANTENGLIB["8a"] = Instance.new("TextLabel", GANTENGLIB["88"]);
GANTENGLIB["8a"]["TextWrapped"] = true;
GANTENGLIB["8a"]["BorderSizePixel"] = 0;
GANTENGLIB["8a"]["TextScaled"] = true;
GANTENGLIB["8a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["8a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["8a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["8a"]["TextSize"] = 14;
GANTENGLIB["8a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["8a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["8a"]["Size"] = UDim2.new(0.7575578093528748, 0, 0.6129031777381897, 0);
GANTENGLIB["8a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["8a"]["Text"] = [[Textbox]];
GANTENGLIB["8a"]["BackgroundTransparency"] = 1;
GANTENGLIB["8a"]["Position"] = UDim2.new(0.40744173526763916, 0, 0.5000002384185791, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.UIGradient
GANTENGLIB["8b"] = Instance.new("UIGradient", GANTENGLIB["88"]);
GANTENGLIB["8b"]["Rotation"] = 55;
GANTENGLIB["8b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.Textbox
GANTENGLIB["8c"] = Instance.new("TextBox", GANTENGLIB["88"]);
GANTENGLIB["8c"]["Active"] = false;
GANTENGLIB["8c"]["PlaceholderColor3"] = Color3.fromRGB(164, 164, 164);
GANTENGLIB["8c"]["BorderSizePixel"] = 0;
GANTENGLIB["8c"]["TextSize"] = 20;
GANTENGLIB["8c"]["TextWrapped"] = true;
GANTENGLIB["8c"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 40);
GANTENGLIB["8c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["8c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["8c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["8c"]["Size"] = UDim2.new(0.19099999964237213, 0, 0.75, 0);
GANTENGLIB["8c"]["Selectable"] = false;
GANTENGLIB["8c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["8c"]["Text"] = [[]];
GANTENGLIB["8c"]["Position"] = UDim2.new(0.8818603157997131, 0, 0.4999999701976776, 0);
GANTENGLIB["8c"]["Name"] = [[Textbox]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.Textbox.UICorner
GANTENGLIB["8d"] = Instance.new("UICorner", GANTENGLIB["8c"]);
GANTENGLIB["8d"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.Textbox.UIGradient
GANTENGLIB["8e"] = Instance.new("UIGradient", GANTENGLIB["8c"]);
GANTENGLIB["8e"]["Rotation"] = 55;
GANTENGLIB["8e"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.Textbox.UIStroke
GANTENGLIB["8f"] = Instance.new("UIStroke", GANTENGLIB["8c"]);
GANTENGLIB["8f"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["8f"]["Transparency"] = 1;
GANTENGLIB["8f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Textbox.Frame.UIStroke
GANTENGLIB["90"] = Instance.new("UIStroke", GANTENGLIB["88"]);
GANTENGLIB["90"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["90"]["Thickness"] = 0.8500000238418579;
GANTENGLIB["90"]["Transparency"] = 1;
GANTENGLIB["90"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle
GANTENGLIB["91"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["91"]["BorderSizePixel"] = 0;
GANTENGLIB["91"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["91"]["BackgroundTransparency"] = 1;
GANTENGLIB["91"]["Size"] = UDim2.new(1, 0, 0, 39);
GANTENGLIB["91"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["91"]["Visible"] = false;
GANTENGLIB["91"]["Name"] = [[Toggle]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame
GANTENGLIB["92"] = Instance.new("TextButton", GANTENGLIB["91"]);
GANTENGLIB["92"]["BorderSizePixel"] = 0;
GANTENGLIB["92"]["AutoButtonColor"] = false;
GANTENGLIB["92"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["92"]["Selectable"] = false;
GANTENGLIB["92"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["92"]["Size"] = UDim2.new(0.9604218006134033, 0, 0.8157894611358643, 0);
GANTENGLIB["92"]["Name"] = [[Frame]];
GANTENGLIB["92"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["92"]["Text"] = [[]];
GANTENGLIB["92"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.UICorner
GANTENGLIB["93"] = Instance.new("UICorner", GANTENGLIB["92"]);
GANTENGLIB["93"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.TextLabel
GANTENGLIB["94"] = Instance.new("TextLabel", GANTENGLIB["92"]);
GANTENGLIB["94"]["TextWrapped"] = true;
GANTENGLIB["94"]["BorderSizePixel"] = 0;
GANTENGLIB["94"]["TextScaled"] = true;
GANTENGLIB["94"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["94"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["94"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["94"]["TextSize"] = 14;
GANTENGLIB["94"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["94"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["94"]["Size"] = UDim2.new(0.8226743936538696, 0, 0.6129032373428345, 0);
GANTENGLIB["94"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["94"]["Text"] = [[Toggle]];
GANTENGLIB["94"]["BackgroundTransparency"] = 1;
GANTENGLIB["94"]["Position"] = UDim2.new(0.4399999976158142, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.UIGradient
GANTENGLIB["95"] = Instance.new("UIGradient", GANTENGLIB["92"]);
GANTENGLIB["95"]["Rotation"] = 55;
GANTENGLIB["95"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.Toggle
GANTENGLIB["96"] = Instance.new("Frame", GANTENGLIB["92"]);
GANTENGLIB["96"]["BorderSizePixel"] = 0;
GANTENGLIB["96"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 40);
GANTENGLIB["96"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["96"]["Size"] = UDim2.new(0.0749843642115593, 0, 0.9327866435050964, 0);
GANTENGLIB["96"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["96"]["Position"] = UDim2.new(0.9399999380111694, 0, 0.4973480999469757, 0);
GANTENGLIB["96"]["Name"] = [[Toggle]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.Toggle.UICorner
GANTENGLIB["97"] = Instance.new("UICorner", GANTENGLIB["96"]);
GANTENGLIB["97"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.Toggle.UIAspectRatioConstraint
GANTENGLIB["98"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["96"]);
GANTENGLIB["98"]["AspectRatio"] = 0.994199812412262;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.Toggle.Filler
GANTENGLIB["99"] = Instance.new("Frame", GANTENGLIB["96"]);
GANTENGLIB["99"]["BorderSizePixel"] = 0;
GANTENGLIB["99"]["BackgroundColor3"] = Color3.fromRGB(222, 222, 222);
GANTENGLIB["99"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["99"]["Size"] = UDim2.new(0.75, 0, 0.75, 0);
GANTENGLIB["99"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["99"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
GANTENGLIB["99"]["Name"] = [[Filler]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.Toggle.Filler.UICorner
GANTENGLIB["9a"] = Instance.new("UICorner", GANTENGLIB["99"]);
GANTENGLIB["9a"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.Toggle.Filler.UIAspectRatioConstraint
GANTENGLIB["9b"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["99"]);
GANTENGLIB["9b"]["AspectRatio"] = 0.994199812412262;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.Toggle.UIStroke
GANTENGLIB["9c"] = Instance.new("UIStroke", GANTENGLIB["96"]);
GANTENGLIB["9c"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["9c"]["Transparency"] = 1;
GANTENGLIB["9c"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Toggle.Frame.UIStroke
GANTENGLIB["9d"] = Instance.new("UIStroke", GANTENGLIB["92"]);
GANTENGLIB["9d"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["9d"]["Thickness"] = 0.8500000238418579;
GANTENGLIB["9d"]["Transparency"] = 1;
GANTENGLIB["9d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Label
GANTENGLIB["9e"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["9e"]["BorderSizePixel"] = 0;
GANTENGLIB["9e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["9e"]["BackgroundTransparency"] = 1;
GANTENGLIB["9e"]["Size"] = UDim2.new(1, 0, 0, 39);
GANTENGLIB["9e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["9e"]["Visible"] = false;
GANTENGLIB["9e"]["Name"] = [[Label]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Label.Frame
GANTENGLIB["9f"] = Instance.new("TextButton", GANTENGLIB["9e"]);
GANTENGLIB["9f"]["BorderSizePixel"] = 0;
GANTENGLIB["9f"]["AutoButtonColor"] = false;
GANTENGLIB["9f"]["BackgroundColor3"] = Color3.fromRGB(37, 37, 37);
GANTENGLIB["9f"]["Selectable"] = false;
GANTENGLIB["9f"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["9f"]["Size"] = UDim2.new(0.9604218006134033, 0, 0.8157894611358643, 0);
GANTENGLIB["9f"]["Name"] = [[Frame]];
GANTENGLIB["9f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["9f"]["Text"] = [[]];
GANTENGLIB["9f"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
-- Attributes
GANTENGLIB["9f"]:SetAttribute([[Label]], true);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Label.Frame.UICorner
GANTENGLIB["a0"] = Instance.new("UICorner", GANTENGLIB["9f"]);
GANTENGLIB["a0"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Label.Frame.TextLabel
GANTENGLIB["a1"] = Instance.new("TextLabel", GANTENGLIB["9f"]);
GANTENGLIB["a1"]["TextWrapped"] = true;
GANTENGLIB["a1"]["BorderSizePixel"] = 0;
GANTENGLIB["a1"]["TextScaled"] = true;
GANTENGLIB["a1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["a1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["a1"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["a1"]["TextSize"] = 14;
GANTENGLIB["a1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["a1"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["a1"]["Size"] = UDim2.new(0.8226743936538696, 0, 0.6129032373428345, 0);
GANTENGLIB["a1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["a1"]["BackgroundTransparency"] = 1;
GANTENGLIB["a1"]["Position"] = UDim2.new(0.4399999976158142, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Label.Frame.UIGradient
GANTENGLIB["a2"] = Instance.new("UIGradient", GANTENGLIB["9f"]);
GANTENGLIB["a2"]["Rotation"] = 55;
GANTENGLIB["a2"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.OptionDropdown
GANTENGLIB["a3"] = Instance.new("TextButton", GANTENGLIB["66"]);
GANTENGLIB["a3"]["BorderSizePixel"] = 0;
GANTENGLIB["a3"]["AutoButtonColor"] = false;
GANTENGLIB["a3"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 31);
GANTENGLIB["a3"]["TextSize"] = 14;
GANTENGLIB["a3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["a3"]["TextColor3"] = Color3.fromRGB(191, 191, 191);
GANTENGLIB["a3"]["Visible"] = false;
GANTENGLIB["a3"]["Size"] = UDim2.new(1, 0, 0, 21);
GANTENGLIB["a3"]["Name"] = [[OptionDropdown]];
GANTENGLIB["a3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["a3"]["Text"] = [[Option]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.OptionDropdown.UIGradient
GANTENGLIB["a4"] = Instance.new("UIGradient", GANTENGLIB["a3"]);
GANTENGLIB["a4"]["Rotation"] = 55;
GANTENGLIB["a4"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(128, 128, 128))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.OptionDropdown.UIPadding
GANTENGLIB["a5"] = Instance.new("UIPadding", GANTENGLIB["a3"]);
GANTENGLIB["a5"]["PaddingLeft"] = UDim.new(0, 6);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Border
GANTENGLIB["a6"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["a6"]["BorderSizePixel"] = 0;
GANTENGLIB["a6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["a6"]["BackgroundTransparency"] = 1;
GANTENGLIB["a6"]["Size"] = UDim2.new(1, 0, 0, 10);
GANTENGLIB["a6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["a6"]["Position"] = UDim2.new(0, 0, 0.45348837971687317, 0);
GANTENGLIB["a6"]["Visible"] = false;
GANTENGLIB["a6"]["Name"] = [[Border]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Border.Frame
GANTENGLIB["a7"] = Instance.new("TextButton", GANTENGLIB["a6"]);
GANTENGLIB["a7"]["BorderSizePixel"] = 0;
GANTENGLIB["a7"]["AutoButtonColor"] = false;
GANTENGLIB["a7"]["BackgroundColor3"] = Color3.fromRGB(112, 112, 112);
GANTENGLIB["a7"]["Selectable"] = false;
GANTENGLIB["a7"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["a7"]["Size"] = UDim2.new(0.9599999785423279, 0, 0.3160000145435333, 0);
GANTENGLIB["a7"]["Name"] = [[Frame]];
GANTENGLIB["a7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["a7"]["Text"] = [[]];
GANTENGLIB["a7"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
-- Attributes
GANTENGLIB["a7"]:SetAttribute([[Label]], true);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Border.Frame.UICorner
GANTENGLIB["a8"] = Instance.new("UICorner", GANTENGLIB["a7"]);
GANTENGLIB["a8"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Seperator
GANTENGLIB["a9"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["a9"]["BorderSizePixel"] = 0;
GANTENGLIB["a9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["a9"]["BackgroundTransparency"] = 1;
GANTENGLIB["a9"]["Size"] = UDim2.new(1, 0, 0, 10);
GANTENGLIB["a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["a9"]["Position"] = UDim2.new(0, 0, 0.45348837971687317, 0);
GANTENGLIB["a9"]["Visible"] = false;
GANTENGLIB["a9"]["Name"] = [[Seperator]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Seperator.Frame
GANTENGLIB["aa"] = Instance.new("TextButton", GANTENGLIB["a9"]);
GANTENGLIB["aa"]["BorderSizePixel"] = 0;
GANTENGLIB["aa"]["AutoButtonColor"] = false;
GANTENGLIB["aa"]["BackgroundColor3"] = Color3.fromRGB(112, 112, 112);
GANTENGLIB["aa"]["Selectable"] = false;
GANTENGLIB["aa"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["aa"]["Size"] = UDim2.new(0.32263731956481934, 0, 0.31599998474121094, 0);
GANTENGLIB["aa"]["Name"] = [[Frame]];
GANTENGLIB["aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["aa"]["Text"] = [[]];
GANTENGLIB["aa"]["Position"] = UDim2.new(0.1813187450170517, 0, 0.5000013113021851, 0);
-- Attributes
GANTENGLIB["aa"]:SetAttribute([[Label]], true);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Seperator.Frame.UICorner
GANTENGLIB["ab"] = Instance.new("UICorner", GANTENGLIB["aa"]);
GANTENGLIB["ab"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Seperator.Frame
GANTENGLIB["ac"] = Instance.new("TextButton", GANTENGLIB["a9"]);
GANTENGLIB["ac"]["BorderSizePixel"] = 0;
GANTENGLIB["ac"]["AutoButtonColor"] = false;
GANTENGLIB["ac"]["BackgroundColor3"] = Color3.fromRGB(112, 112, 112);
GANTENGLIB["ac"]["Selectable"] = false;
GANTENGLIB["ac"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["ac"]["Size"] = UDim2.new(0.32345062494277954, 0, 0.31599998474121094, 0);
GANTENGLIB["ac"]["Name"] = [[Frame]];
GANTENGLIB["ac"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["ac"]["Text"] = [[]];
GANTENGLIB["ac"]["Position"] = UDim2.new(0.8182748556137085, 0, 0.5000013113021851, 0);
-- Attributes
GANTENGLIB["ac"]:SetAttribute([[Label]], true);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Seperator.Frame.UICorner
GANTENGLIB["ad"] = Instance.new("UICorner", GANTENGLIB["ac"]);
GANTENGLIB["ad"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Seperator.TextLabel
GANTENGLIB["ae"] = Instance.new("TextLabel", GANTENGLIB["a9"]);
GANTENGLIB["ae"]["BorderSizePixel"] = 0;
GANTENGLIB["ae"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
GANTENGLIB["ae"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["ae"]["TextSize"] = 15;
GANTENGLIB["ae"]["TextColor3"] = Color3.fromRGB(209, 209, 209);
GANTENGLIB["ae"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["ae"]["AutomaticSize"] = Enum.AutomaticSize.X;
GANTENGLIB["ae"]["Size"] = UDim2.new(0, 65, 0, 10);
GANTENGLIB["ae"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["ae"]["Text"] = [[Seperator]];
GANTENGLIB["ae"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown
GANTENGLIB["af"] = Instance.new("Frame", GANTENGLIB["66"]);
GANTENGLIB["af"]["BorderSizePixel"] = 0;
GANTENGLIB["af"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["af"]["BackgroundTransparency"] = 1;
GANTENGLIB["af"]["Size"] = UDim2.new(1, 0, 0, 39);
GANTENGLIB["af"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["af"]["Position"] = UDim2.new(9.046712534654944e-08, 0, 0, 0);
GANTENGLIB["af"]["AutomaticSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["af"]["Visible"] = false;
GANTENGLIB["af"]["Name"] = [[Dropdown]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame
GANTENGLIB["b0"] = Instance.new("TextButton", GANTENGLIB["af"]);
GANTENGLIB["b0"]["BorderSizePixel"] = 0;
GANTENGLIB["b0"]["AutoButtonColor"] = false;
GANTENGLIB["b0"]["BackgroundColor3"] = Color3.fromRGB(21, 21, 21);
GANTENGLIB["b0"]["Selectable"] = false;
GANTENGLIB["b0"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["b0"]["Size"] = UDim2.new(0.9599999785423279, 0, 0, 32);
GANTENGLIB["b0"]["Name"] = [[Frame]];
GANTENGLIB["b0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["b0"]["Text"] = [[]];
GANTENGLIB["b0"]["Position"] = UDim2.new(0.5, 0, 0, 19);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.UICorner
GANTENGLIB["b1"] = Instance.new("UICorner", GANTENGLIB["b0"]);
GANTENGLIB["b1"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.UIGradient
GANTENGLIB["b2"] = Instance.new("UIGradient", GANTENGLIB["b0"]);
GANTENGLIB["b2"]["Rotation"] = 55;
GANTENGLIB["b2"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.Select
GANTENGLIB["b3"] = Instance.new("TextButton", GANTENGLIB["b0"]);
GANTENGLIB["b3"]["TextWrapped"] = true;
GANTENGLIB["b3"]["Active"] = false;
GANTENGLIB["b3"]["BorderSizePixel"] = 0;
GANTENGLIB["b3"]["AutoButtonColor"] = false;
GANTENGLIB["b3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["b3"]["BackgroundColor3"] = Color3.fromRGB(35, 35, 35);
GANTENGLIB["b3"]["TextSize"] = 16;
GANTENGLIB["b3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["b3"]["TextColor3"] = Color3.fromRGB(159, 159, 159);
GANTENGLIB["b3"]["Selectable"] = false;
GANTENGLIB["b3"]["AnchorPoint"] = Vector2.new(1, 0.5);
GANTENGLIB["b3"]["Size"] = UDim2.new(0, 109, 0, 24);
GANTENGLIB["b3"]["Name"] = [[Select]];
GANTENGLIB["b3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["b3"]["Text"] = [[None]];
GANTENGLIB["b3"]["Position"] = UDim2.new(0.9750000238418579, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.Select.UICorner
GANTENGLIB["b4"] = Instance.new("UICorner", GANTENGLIB["b3"]);
GANTENGLIB["b4"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.Select.UIGradient
GANTENGLIB["b5"] = Instance.new("UIGradient", GANTENGLIB["b3"]);
GANTENGLIB["b5"]["Rotation"] = 55;
GANTENGLIB["b5"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(195, 195, 195))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.Select.UIPadding
GANTENGLIB["b6"] = Instance.new("UIPadding", GANTENGLIB["b3"]);
GANTENGLIB["b6"]["PaddingLeft"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.Select.ImageLabel
GANTENGLIB["b7"] = Instance.new("ImageLabel", GANTENGLIB["b3"]);
GANTENGLIB["b7"]["BorderSizePixel"] = 0;
GANTENGLIB["b7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["b7"]["ImageColor3"] = Color3.fromRGB(159, 159, 159);
GANTENGLIB["b7"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["b7"]["Image"] = [[http://www.roblox.com/asset/?id=15390268248]];
GANTENGLIB["b7"]["Size"] = UDim2.new(0.17544731497764587, 0, 0.6375312805175781, 0);
GANTENGLIB["b7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["b7"]["BackgroundTransparency"] = 1;
GANTENGLIB["b7"]["Position"] = UDim2.new(0.8299999833106995, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.Select.ImageLabel.UIAspectRatioConstraint
GANTENGLIB["b8"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["b7"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.UIStroke
GANTENGLIB["b9"] = Instance.new("UIStroke", GANTENGLIB["b0"]);
GANTENGLIB["b9"]["Color"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["b9"]["Thickness"] = 0.8500000238418579;
GANTENGLIB["b9"]["Transparency"] = 1;
GANTENGLIB["b9"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.Frame.TextLabel
GANTENGLIB["ba"] = Instance.new("TextLabel", GANTENGLIB["b0"]);
GANTENGLIB["ba"]["TextWrapped"] = true;
GANTENGLIB["ba"]["BorderSizePixel"] = 0;
GANTENGLIB["ba"]["TextScaled"] = true;
GANTENGLIB["ba"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["ba"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["ba"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["ba"]["TextSize"] = 14;
GANTENGLIB["ba"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["ba"]["Size"] = UDim2.new(0.6151160001754761, 0, 0.6129031777381897, 0);
GANTENGLIB["ba"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["ba"]["Text"] = [[Dropdown]];
GANTENGLIB["ba"]["BackgroundTransparency"] = 1;
GANTENGLIB["ba"]["Position"] = UDim2.new(0.025755494832992554, 0, 0.1875, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.SelectionFrame
GANTENGLIB["bb"] = Instance.new("Frame", GANTENGLIB["af"]);
GANTENGLIB["bb"]["BorderSizePixel"] = 0;
GANTENGLIB["bb"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
GANTENGLIB["bb"]["AnchorPoint"] = Vector2.new(0.5, 0);
GANTENGLIB["bb"]["Size"] = UDim2.new(0.949999988079071, 0, 0, 0);
GANTENGLIB["bb"]["ClipsDescendants"] = true;
GANTENGLIB["bb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["bb"]["Position"] = UDim2.new(0.5, 0, 0.03099999949336052, 31);
GANTENGLIB["bb"]["Name"] = [[SelectionFrame]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.SelectionFrame.UICorner
GANTENGLIB["bc"] = Instance.new("UICorner", GANTENGLIB["bb"]);
GANTENGLIB["bc"]["CornerRadius"] = UDim.new(0, 5);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.SelectionFrame.UIGradient
GANTENGLIB["bd"] = Instance.new("UIGradient", GANTENGLIB["bb"]);
GANTENGLIB["bd"]["Rotation"] = 55;
GANTENGLIB["bd"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(128, 128, 128))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.SelectionFrame.ScrollingFrame
GANTENGLIB["be"] = Instance.new("ScrollingFrame", GANTENGLIB["bb"]);
GANTENGLIB["be"]["Active"] = true;
GANTENGLIB["be"]["BorderSizePixel"] = 0;
GANTENGLIB["be"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
GANTENGLIB["be"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["be"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["be"]["BackgroundTransparency"] = 1;
GANTENGLIB["be"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["be"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["be"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["be"]["ScrollBarThickness"] = 0;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.InsideTab.Dropdown.SelectionFrame.ScrollingFrame.UIListLayout
GANTENGLIB["bf"] = Instance.new("UIListLayout", GANTENGLIB["be"]);
GANTENGLIB["bf"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog
GANTENGLIB["c0"] = Instance.new("Folder", GANTENGLIB["65"]);
GANTENGLIB["c0"]["Name"] = [[Changelog]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.PurpleToCyan
GANTENGLIB["c1"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["c1"]["BorderSizePixel"] = 0;
GANTENGLIB["c1"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["c1"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["c1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["c1"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["c1"]["Visible"] = false;
GANTENGLIB["c1"]["Name"] = [[PurpleToCyan]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.PurpleToCyan.UIGradient
GANTENGLIB["c2"] = Instance.new("UIGradient", GANTENGLIB["c1"]);
GANTENGLIB["c2"]["Rotation"] = 73;
GANTENGLIB["c2"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(150, 0, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 154, 178))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.PurpleToCyan.UICorner
GANTENGLIB["c3"] = Instance.new("UICorner", GANTENGLIB["c1"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.PurpleToCyan.Title
GANTENGLIB["c4"] = Instance.new("TextLabel", GANTENGLIB["c1"]);
GANTENGLIB["c4"]["TextWrapped"] = true;
GANTENGLIB["c4"]["BorderSizePixel"] = 0;
GANTENGLIB["c4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["c4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["c4"]["TextSize"] = 15;
GANTENGLIB["c4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c4"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["c4"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["c4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["c4"]["Text"] = [[Changes]];
GANTENGLIB["c4"]["Name"] = [[Title]];
GANTENGLIB["c4"]["BackgroundTransparency"] = 1;
GANTENGLIB["c4"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.PurpleToCyan.Description
GANTENGLIB["c5"] = Instance.new("TextLabel", GANTENGLIB["c1"]);
GANTENGLIB["c5"]["TextWrapped"] = true;
GANTENGLIB["c5"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["c5"]["BorderSizePixel"] = 0;
GANTENGLIB["c5"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["c5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c5"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["c5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["c5"]["TextSize"] = 12;
GANTENGLIB["c5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c5"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["c5"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["c5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["c5"]["Text"] = [[Added nothing]];
GANTENGLIB["c5"]["Name"] = [[Description]];
GANTENGLIB["c5"]["BackgroundTransparency"] = 1;
GANTENGLIB["c5"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.SkyblueToBlue
GANTENGLIB["c6"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["c6"]["BorderSizePixel"] = 0;
GANTENGLIB["c6"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["c6"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["c6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["c6"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["c6"]["Visible"] = false;
GANTENGLIB["c6"]["Name"] = [[SkyblueToBlue]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.SkyblueToBlue.UIGradient
GANTENGLIB["c7"] = Instance.new("UIGradient", GANTENGLIB["c6"]);
GANTENGLIB["c7"]["Rotation"] = 73;
GANTENGLIB["c7"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 188, 245)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 4, 178))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.SkyblueToBlue.UICorner
GANTENGLIB["c8"] = Instance.new("UICorner", GANTENGLIB["c6"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.SkyblueToBlue.Title
GANTENGLIB["c9"] = Instance.new("TextLabel", GANTENGLIB["c6"]);
GANTENGLIB["c9"]["TextWrapped"] = true;
GANTENGLIB["c9"]["BorderSizePixel"] = 0;
GANTENGLIB["c9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["c9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["c9"]["TextSize"] = 15;
GANTENGLIB["c9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["c9"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["c9"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["c9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["c9"]["Text"] = [[Changes]];
GANTENGLIB["c9"]["Name"] = [[Title]];
GANTENGLIB["c9"]["BackgroundTransparency"] = 1;
GANTENGLIB["c9"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.SkyblueToBlue.Description
GANTENGLIB["ca"] = Instance.new("TextLabel", GANTENGLIB["c6"]);
GANTENGLIB["ca"]["TextWrapped"] = true;
GANTENGLIB["ca"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["ca"]["BorderSizePixel"] = 0;
GANTENGLIB["ca"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["ca"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["ca"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["ca"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["ca"]["TextSize"] = 12;
GANTENGLIB["ca"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["ca"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["ca"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["ca"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["ca"]["Text"] = [[Added nothing]];
GANTENGLIB["ca"]["Name"] = [[Description]];
GANTENGLIB["ca"]["BackgroundTransparency"] = 1;
GANTENGLIB["ca"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.CyanToBlue
GANTENGLIB["cb"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["cb"]["BorderSizePixel"] = 0;
GANTENGLIB["cb"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["cb"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["cb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["cb"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["cb"]["Visible"] = false;
GANTENGLIB["cb"]["Name"] = [[CyanToBlue]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.CyanToBlue.UIGradient
GANTENGLIB["cc"] = Instance.new("UIGradient", GANTENGLIB["cb"]);
GANTENGLIB["cc"]["Rotation"] = 73;
GANTENGLIB["cc"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 245, 208)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 100, 221))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.CyanToBlue.UICorner
GANTENGLIB["cd"] = Instance.new("UICorner", GANTENGLIB["cb"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.CyanToBlue.Title
GANTENGLIB["ce"] = Instance.new("TextLabel", GANTENGLIB["cb"]);
GANTENGLIB["ce"]["TextWrapped"] = true;
GANTENGLIB["ce"]["BorderSizePixel"] = 0;
GANTENGLIB["ce"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["ce"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["ce"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["ce"]["TextSize"] = 15;
GANTENGLIB["ce"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["ce"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["ce"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["ce"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["ce"]["Text"] = [[Changes]];
GANTENGLIB["ce"]["Name"] = [[Title]];
GANTENGLIB["ce"]["BackgroundTransparency"] = 1;
GANTENGLIB["ce"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.CyanToBlue.Description
GANTENGLIB["cf"] = Instance.new("TextLabel", GANTENGLIB["cb"]);
GANTENGLIB["cf"]["TextWrapped"] = true;
GANTENGLIB["cf"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["cf"]["BorderSizePixel"] = 0;
GANTENGLIB["cf"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["cf"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["cf"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["cf"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["cf"]["TextSize"] = 12;
GANTENGLIB["cf"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["cf"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["cf"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["cf"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["cf"]["Text"] = [[Added nothing]];
GANTENGLIB["cf"]["Name"] = [[Description]];
GANTENGLIB["cf"]["BackgroundTransparency"] = 1;
GANTENGLIB["cf"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToPink
GANTENGLIB["d0"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["d0"]["BorderSizePixel"] = 0;
GANTENGLIB["d0"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["d0"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["d0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["d0"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["d0"]["Visible"] = false;
GANTENGLIB["d0"]["Name"] = [[RedToPink]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToPink.UIGradient
GANTENGLIB["d1"] = Instance.new("UIGradient", GANTENGLIB["d0"]);
GANTENGLIB["d1"]["Rotation"] = 73;
GANTENGLIB["d1"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 0, 5)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(226, 0, 215))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToPink.UICorner
GANTENGLIB["d2"] = Instance.new("UICorner", GANTENGLIB["d0"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToPink.Title
GANTENGLIB["d3"] = Instance.new("TextLabel", GANTENGLIB["d0"]);
GANTENGLIB["d3"]["TextWrapped"] = true;
GANTENGLIB["d3"]["BorderSizePixel"] = 0;
GANTENGLIB["d3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["d3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["d3"]["TextSize"] = 15;
GANTENGLIB["d3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d3"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["d3"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["d3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["d3"]["Text"] = [[Changes]];
GANTENGLIB["d3"]["Name"] = [[Title]];
GANTENGLIB["d3"]["BackgroundTransparency"] = 1;
GANTENGLIB["d3"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToPink.Description
GANTENGLIB["d4"] = Instance.new("TextLabel", GANTENGLIB["d0"]);
GANTENGLIB["d4"]["TextWrapped"] = true;
GANTENGLIB["d4"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["d4"]["BorderSizePixel"] = 0;
GANTENGLIB["d4"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["d4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["d4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["d4"]["TextSize"] = 12;
GANTENGLIB["d4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d4"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["d4"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["d4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["d4"]["Text"] = [[Added nothing]];
GANTENGLIB["d4"]["Name"] = [[Description]];
GANTENGLIB["d4"]["BackgroundTransparency"] = 1;
GANTENGLIB["d4"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToOrange
GANTENGLIB["d5"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["d5"]["BorderSizePixel"] = 0;
GANTENGLIB["d5"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["d5"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["d5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["d5"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["d5"]["Visible"] = false;
GANTENGLIB["d5"]["Name"] = [[RedToOrange]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToOrange.UIGradient
GANTENGLIB["d6"] = Instance.new("UIGradient", GANTENGLIB["d5"]);
GANTENGLIB["d6"]["Rotation"] = 73;
GANTENGLIB["d6"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 239, 0))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToOrange.UICorner
GANTENGLIB["d7"] = Instance.new("UICorner", GANTENGLIB["d5"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToOrange.Title
GANTENGLIB["d8"] = Instance.new("TextLabel", GANTENGLIB["d5"]);
GANTENGLIB["d8"]["TextWrapped"] = true;
GANTENGLIB["d8"]["BorderSizePixel"] = 0;
GANTENGLIB["d8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d8"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["d8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["d8"]["TextSize"] = 15;
GANTENGLIB["d8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d8"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["d8"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["d8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["d8"]["Text"] = [[Changes]];
GANTENGLIB["d8"]["Name"] = [[Title]];
GANTENGLIB["d8"]["BackgroundTransparency"] = 1;
GANTENGLIB["d8"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.RedToOrange.Description
GANTENGLIB["d9"] = Instance.new("TextLabel", GANTENGLIB["d5"]);
GANTENGLIB["d9"]["TextWrapped"] = true;
GANTENGLIB["d9"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["d9"]["BorderSizePixel"] = 0;
GANTENGLIB["d9"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["d9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["d9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["d9"]["TextSize"] = 12;
GANTENGLIB["d9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["d9"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["d9"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["d9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["d9"]["Text"] = [[Added Nothing]];
GANTENGLIB["d9"]["Name"] = [[Description]];
GANTENGLIB["d9"]["BackgroundTransparency"] = 1;
GANTENGLIB["d9"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.BlueToPurple
GANTENGLIB["da"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["da"]["BorderSizePixel"] = 0;
GANTENGLIB["da"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["da"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["da"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["da"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["da"]["Visible"] = false;
GANTENGLIB["da"]["Name"] = [[BlueToPurple]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.BlueToPurple.UIGradient
GANTENGLIB["db"] = Instance.new("UIGradient", GANTENGLIB["da"]);
GANTENGLIB["db"]["Rotation"] = 73;
GANTENGLIB["db"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 111, 245)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(178, 0, 178))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.BlueToPurple.UICorner
GANTENGLIB["dc"] = Instance.new("UICorner", GANTENGLIB["da"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.BlueToPurple.Title
GANTENGLIB["dd"] = Instance.new("TextLabel", GANTENGLIB["da"]);
GANTENGLIB["dd"]["TextWrapped"] = true;
GANTENGLIB["dd"]["BorderSizePixel"] = 0;
GANTENGLIB["dd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["dd"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["dd"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["dd"]["TextSize"] = 15;
GANTENGLIB["dd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["dd"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["dd"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["dd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["dd"]["Text"] = [[Changes]];
GANTENGLIB["dd"]["Name"] = [[Title]];
GANTENGLIB["dd"]["BackgroundTransparency"] = 1;
GANTENGLIB["dd"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.BlueToPurple.Description
GANTENGLIB["de"] = Instance.new("TextLabel", GANTENGLIB["da"]);
GANTENGLIB["de"]["TextWrapped"] = true;
GANTENGLIB["de"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["de"]["BorderSizePixel"] = 0;
GANTENGLIB["de"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["de"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["de"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["de"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["de"]["TextSize"] = 12;
GANTENGLIB["de"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["de"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["de"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["de"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["de"]["Text"] = [[Added nothing]];
GANTENGLIB["de"]["Name"] = [[Description]];
GANTENGLIB["de"]["BackgroundTransparency"] = 1;
GANTENGLIB["de"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.YellowToGreen
GANTENGLIB["df"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["df"]["BorderSizePixel"] = 0;
GANTENGLIB["df"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["df"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["df"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["df"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["df"]["Visible"] = false;
GANTENGLIB["df"]["Name"] = [[YellowToGreen]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.YellowToGreen.UIGradient
GANTENGLIB["e0"] = Instance.new("UIGradient", GANTENGLIB["df"]);
GANTENGLIB["e0"]["Rotation"] = 73;
GANTENGLIB["e0"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(245, 225, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 204, 48))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.YellowToGreen.UICorner
GANTENGLIB["e1"] = Instance.new("UICorner", GANTENGLIB["df"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.YellowToGreen.Title
GANTENGLIB["e2"] = Instance.new("TextLabel", GANTENGLIB["df"]);
GANTENGLIB["e2"]["TextWrapped"] = true;
GANTENGLIB["e2"]["BorderSizePixel"] = 0;
GANTENGLIB["e2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["e2"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["e2"]["TextSize"] = 15;
GANTENGLIB["e2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e2"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["e2"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["e2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["e2"]["Text"] = [[Changes]];
GANTENGLIB["e2"]["Name"] = [[Title]];
GANTENGLIB["e2"]["BackgroundTransparency"] = 1;
GANTENGLIB["e2"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.YellowToGreen.Description
GANTENGLIB["e3"] = Instance.new("TextLabel", GANTENGLIB["df"]);
GANTENGLIB["e3"]["TextWrapped"] = true;
GANTENGLIB["e3"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["e3"]["BorderSizePixel"] = 0;
GANTENGLIB["e3"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["e3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["e3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["e3"]["TextSize"] = 12;
GANTENGLIB["e3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e3"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["e3"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["e3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["e3"]["Text"] = [[Added nothing]];
GANTENGLIB["e3"]["Name"] = [[Description]];
GANTENGLIB["e3"]["BackgroundTransparency"] = 1;
GANTENGLIB["e3"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.LimeToGreen
GANTENGLIB["e4"] = Instance.new("Frame", GANTENGLIB["c0"]);
GANTENGLIB["e4"]["BorderSizePixel"] = 0;
GANTENGLIB["e4"]["BackgroundColor3"] = Color3.fromRGB(246, 246, 246);
GANTENGLIB["e4"]["Size"] = UDim2.new(1, 0, 0, 44);
GANTENGLIB["e4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["e4"]["Position"] = UDim2.new(-0.05555564537644386, 0, 0, 0);
GANTENGLIB["e4"]["Visible"] = false;
GANTENGLIB["e4"]["Name"] = [[LimeToGreen]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.LimeToGreen.UIGradient
GANTENGLIB["e5"] = Instance.new("UIGradient", GANTENGLIB["e4"]);
GANTENGLIB["e5"]["Rotation"] = 73;
GANTENGLIB["e5"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 245, 176)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 178, 39))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.LimeToGreen.UICorner
GANTENGLIB["e6"] = Instance.new("UICorner", GANTENGLIB["e4"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.LimeToGreen.Title
GANTENGLIB["e7"] = Instance.new("TextLabel", GANTENGLIB["e4"]);
GANTENGLIB["e7"]["TextWrapped"] = true;
GANTENGLIB["e7"]["BorderSizePixel"] = 0;
GANTENGLIB["e7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["e7"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["e7"]["TextSize"] = 15;
GANTENGLIB["e7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e7"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["e7"]["Size"] = UDim2.new(0, 137, 0, 16);
GANTENGLIB["e7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["e7"]["Text"] = [[Changes]];
GANTENGLIB["e7"]["Name"] = [[Title]];
GANTENGLIB["e7"]["BackgroundTransparency"] = 1;
GANTENGLIB["e7"]["Position"] = UDim2.new(0, 6, 0, 11);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.Changelog.LimeToGreen.Description
GANTENGLIB["e8"] = Instance.new("TextLabel", GANTENGLIB["e4"]);
GANTENGLIB["e8"]["TextWrapped"] = true;
GANTENGLIB["e8"]["LineHeight"] = 0.800000011920929;
GANTENGLIB["e8"]["BorderSizePixel"] = 0;
GANTENGLIB["e8"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["e8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e8"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["e8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["e8"]["TextSize"] = 12;
GANTENGLIB["e8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e8"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["e8"]["Size"] = UDim2.new(0, 137, 0, 24);
GANTENGLIB["e8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["e8"]["Text"] = [[Added nothing]];
GANTENGLIB["e8"]["Name"] = [[Description]];
GANTENGLIB["e8"]["BackgroundTransparency"] = 1;
GANTENGLIB["e8"]["Position"] = UDim2.new(0, 6, 0, 30);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame
GANTENGLIB["e9"] = Instance.new("Frame", GANTENGLIB["65"]);
GANTENGLIB["e9"]["BorderSizePixel"] = 0;
GANTENGLIB["e9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["e9"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["e9"]["BackgroundTransparency"] = 1;
GANTENGLIB["e9"]["Size"] = UDim2.new(0.98591548204422, 0, 0.17563045024871826, 0);
GANTENGLIB["e9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["e9"]["Position"] = UDim2.new(0.5, 0, 0.08781522512435913, 0);
GANTENGLIB["e9"]["Visible"] = false;
GANTENGLIB["e9"]["Name"] = [[ButtonFrame]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame
GANTENGLIB["ea"] = Instance.new("TextButton", GANTENGLIB["e9"]);
GANTENGLIB["ea"]["Active"] = false;
GANTENGLIB["ea"]["BorderSizePixel"] = 0;
GANTENGLIB["ea"]["AutoButtonColor"] = false;
GANTENGLIB["ea"]["BackgroundColor3"] = Color3.fromRGB(39, 39, 39);
GANTENGLIB["ea"]["Selectable"] = false;
GANTENGLIB["ea"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["ea"]["Size"] = UDim2.new(0, 126, 0, 32);
GANTENGLIB["ea"]["Name"] = [[ButtonFrame]];
GANTENGLIB["ea"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["ea"]["Text"] = [[]];
GANTENGLIB["ea"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.TextButton
GANTENGLIB["eb"] = Instance.new("TextLabel", GANTENGLIB["ea"]);
GANTENGLIB["eb"]["TextWrapped"] = true;
GANTENGLIB["eb"]["BorderSizePixel"] = 0;
GANTENGLIB["eb"]["TextScaled"] = true;
GANTENGLIB["eb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["eb"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["eb"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
GANTENGLIB["eb"]["Selectable"] = true;
GANTENGLIB["eb"]["TextSize"] = 14;
GANTENGLIB["eb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["eb"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["eb"]["Size"] = UDim2.new(0.6571428775787354, 0, 0.5483871102333069, 0);
GANTENGLIB["eb"]["Active"] = true;
GANTENGLIB["eb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["eb"]["Text"] = [[Autofarm]];
GANTENGLIB["eb"]["Name"] = [[TextButton]];
GANTENGLIB["eb"]["BackgroundTransparency"] = 1;
GANTENGLIB["eb"]["Position"] = UDim2.new(0.5799999833106995, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.ImageFrame
GANTENGLIB["ec"] = Instance.new("Frame", GANTENGLIB["ea"]);
GANTENGLIB["ec"]["BorderSizePixel"] = 0;
GANTENGLIB["ec"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["ec"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["ec"]["Size"] = UDim2.new(0.16428571939468384, 0, 0.7419354915618896, 0);
GANTENGLIB["ec"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["ec"]["Position"] = UDim2.new(0.11999999731779099, 0, 0.5, 0);
GANTENGLIB["ec"]["Name"] = [[ImageFrame]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.ImageFrame.UICorner
GANTENGLIB["ed"] = Instance.new("UICorner", GANTENGLIB["ec"]);
GANTENGLIB["ed"]["CornerRadius"] = UDim.new(0, 3);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.ImageFrame.UIAspectRatioConstraint
GANTENGLIB["ee"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["ec"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.ImageFrame.UIGradient
GANTENGLIB["ef"] = Instance.new("UIGradient", GANTENGLIB["ec"]);
GANTENGLIB["ef"]["Rotation"] = 42;
GANTENGLIB["ef"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(107, 107, 107))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.ImageFrame.ImageLabel
GANTENGLIB["f0"] = Instance.new("ImageLabel", GANTENGLIB["ec"]);
GANTENGLIB["f0"]["BorderSizePixel"] = 0;
GANTENGLIB["f0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["f0"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["f0"]["Image"] = [[rbxassetid://14122651741]];
GANTENGLIB["f0"]["Size"] = UDim2.new(0.8999999761581421, 0, 0.8999999761581421, 0);
GANTENGLIB["f0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["f0"]["BackgroundTransparency"] = 1;
GANTENGLIB["f0"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.ImageFrame.ImageLabel.UICorner
GANTENGLIB["f1"] = Instance.new("UICorner", GANTENGLIB["f0"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.UICorner
GANTENGLIB["f2"] = Instance.new("UICorner", GANTENGLIB["ea"]);


-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.UIAspectRatioConstraint
GANTENGLIB["f3"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["ea"]);
GANTENGLIB["f3"]["AspectRatio"] = 3.996608257293701;

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ButtonFrame.ButtonFrame.UIGradient
GANTENGLIB["f4"] = Instance.new("UIGradient", GANTENGLIB["ea"]);
GANTENGLIB["f4"]["Rotation"] = 55;
GANTENGLIB["f4"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(173, 173, 173))};

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ScrollingTab
GANTENGLIB["f5"] = Instance.new("ScrollingFrame", GANTENGLIB["65"]);
GANTENGLIB["f5"]["Active"] = true;
GANTENGLIB["f5"]["BorderSizePixel"] = 0;
GANTENGLIB["f5"]["TopImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
GANTENGLIB["f5"]["ScrollBarImageTransparency"] = 0.5;
GANTENGLIB["f5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["f5"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
GANTENGLIB["f5"]["BackgroundTransparency"] = 1;
GANTENGLIB["f5"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["f5"]["ScrollBarImageColor3"] = Color3.fromRGB(151, 151, 151);
GANTENGLIB["f5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["f5"]["ScrollBarThickness"] = 6;
GANTENGLIB["f5"]["Visible"] = false;
GANTENGLIB["f5"]["Name"] = [[ScrollingTab]];
GANTENGLIB["f5"]["BottomImage"] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];

-- GantengLib.DropShadowHolder.MainFrame.PremadeLibs.ScrollingTab.UIListLayout
GANTENGLIB["f6"] = Instance.new("UIListLayout", GANTENGLIB["f5"]);
GANTENGLIB["f6"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- GantengLib.DropShadowHolder.MainFrame.Intro
GANTENGLIB["f7"] = Instance.new("Frame", GANTENGLIB["3"]);
GANTENGLIB["f7"]["BorderSizePixel"] = 0;
GANTENGLIB["f7"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
GANTENGLIB["f7"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["f7"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["f7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["f7"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
GANTENGLIB["f7"]["Visible"] = false;
GANTENGLIB["f7"]["Name"] = [[Intro]];

-- GantengLib.DropShadowHolder.MainFrame.Intro.UICorner
GANTENGLIB["f8"] = Instance.new("UICorner", GANTENGLIB["f7"]);


-- GantengLib.DropShadowHolder.MainFrame.Intro.UIGradient
GANTENGLIB["f9"] = Instance.new("UIGradient", GANTENGLIB["f7"]);
GANTENGLIB["f9"]["Rotation"] = 55;
GANTENGLIB["f9"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.Intro.Title
GANTENGLIB["fa"] = Instance.new("TextLabel", GANTENGLIB["f7"]);
GANTENGLIB["fa"]["TextWrapped"] = true;
GANTENGLIB["fa"]["BorderSizePixel"] = 0;
GANTENGLIB["fa"]["TextScaled"] = true;
GANTENGLIB["fa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["fa"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["fa"]["TextSize"] = 14;
GANTENGLIB["fa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["fa"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["fa"]["Size"] = UDim2.new(0.4320269227027893, 0, 0.0993243008852005, 0);
GANTENGLIB["fa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["fa"]["Text"] = [[Ganteng Hub]];
GANTENGLIB["fa"]["Name"] = [[Title]];
GANTENGLIB["fa"]["BackgroundTransparency"] = 1;
GANTENGLIB["fa"]["Position"] = UDim2.new(0.49952688813209534, 0, 0.4314188063144684, 0);

-- GantengLib.DropShadowHolder.MainFrame.Intro.ProgressBar
GANTENGLIB["fb"] = Instance.new("Frame", GANTENGLIB["f7"]);
GANTENGLIB["fb"]["BorderSizePixel"] = 0;
GANTENGLIB["fb"]["BackgroundColor3"] = Color3.fromRGB(35, 35, 35);
GANTENGLIB["fb"]["Size"] = UDim2.new(0.4169960618019104, 0, 0.0439189188182354, 0);
GANTENGLIB["fb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["fb"]["Position"] = UDim2.new(0.2905140221118927, 0, 0.5081080794334412, 0);
GANTENGLIB["fb"]["Name"] = [[ProgressBar]];

-- GantengLib.DropShadowHolder.MainFrame.Intro.ProgressBar.UICorner
GANTENGLIB["fc"] = Instance.new("UICorner", GANTENGLIB["fb"]);
GANTENGLIB["fc"]["CornerRadius"] = UDim.new(100, 0);

-- GantengLib.DropShadowHolder.MainFrame.Intro.ProgressBar.UIGradient
GANTENGLIB["fd"] = Instance.new("UIGradient", GANTENGLIB["fb"]);
GANTENGLIB["fd"]["Rotation"] = 55;
GANTENGLIB["fd"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(178, 178, 178))};

-- GantengLib.DropShadowHolder.MainFrame.Intro.ProgressBar.Fill
GANTENGLIB["fe"] = Instance.new("Frame", GANTENGLIB["fb"]);
GANTENGLIB["fe"]["BorderSizePixel"] = 0;
GANTENGLIB["fe"]["BackgroundColor3"] = Color3.fromRGB(98, 98, 98);
GANTENGLIB["fe"]["Size"] = UDim2.new(0, 0, 1, 0);
GANTENGLIB["fe"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["fe"]["Name"] = [[Fill]];

-- GantengLib.DropShadowHolder.MainFrame.Intro.ProgressBar.Fill.UICorner
GANTENGLIB["ff"] = Instance.new("UICorner", GANTENGLIB["fe"]);
GANTENGLIB["ff"]["CornerRadius"] = UDim.new(100, 0);

-- GantengLib.DropShadowHolder.MainFrame.Intro.ProgressBar.Fill.UIGradient
GANTENGLIB["100"] = Instance.new("UIGradient", GANTENGLIB["fe"]);
GANTENGLIB["100"]["Rotation"] = 55;
GANTENGLIB["100"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(178, 178, 178))};

-- GantengLib.DropShadowHolder.MainFrame.Intro.Description
GANTENGLIB["101"] = Instance.new("TextLabel", GANTENGLIB["f7"]);
GANTENGLIB["101"]["TextWrapped"] = true;
GANTENGLIB["101"]["BorderSizePixel"] = 0;
GANTENGLIB["101"]["TextScaled"] = true;
GANTENGLIB["101"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["101"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Light, Enum.FontStyle.Italic);
GANTENGLIB["101"]["TextSize"] = 14;
GANTENGLIB["101"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["101"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["101"]["Size"] = UDim2.new(0.4320269227027893, 0, 0.04864872992038727, 0);
GANTENGLIB["101"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["101"]["Text"] = [[We are on the way, please wait...]];
GANTENGLIB["101"]["Name"] = [[Description]];
GANTENGLIB["101"]["BackgroundTransparency"] = 1;
GANTENGLIB["101"]["Position"] = UDim2.new(0.49952688813209534, 0, 0.605405330657959, 0);

-- GantengLib.DropShadowHolder.MainFrame.Intro.PercentProgress
GANTENGLIB["102"] = Instance.new("TextLabel", GANTENGLIB["f7"]);
GANTENGLIB["102"]["TextWrapped"] = true;
GANTENGLIB["102"]["BorderSizePixel"] = 0;
GANTENGLIB["102"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["102"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["102"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["102"]["TextSize"] = 15;
GANTENGLIB["102"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["102"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["102"]["Size"] = UDim2.new(0.10597319155931473, 0, 0.04864872992038727, 0);
GANTENGLIB["102"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["102"]["Text"] = [[0%]];
GANTENGLIB["102"]["Name"] = [[PercentProgress]];
GANTENGLIB["102"]["BackgroundTransparency"] = 1;
GANTENGLIB["102"]["Position"] = UDim2.new(0.7685270309448242, 0, 0.5277026295661926, 0);

-- GantengLib.DropShadowHolder.MainFrame.Warning
GANTENGLIB["103"] = Instance.new("Frame", GANTENGLIB["3"]);
GANTENGLIB["103"]["BorderSizePixel"] = 0;
GANTENGLIB["103"]["BackgroundColor3"] = Color3.fromRGB(11, 11, 11);
GANTENGLIB["103"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["103"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["103"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["103"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
GANTENGLIB["103"]["Visible"] = false;
GANTENGLIB["103"]["Name"] = [[Warning]];

-- GantengLib.DropShadowHolder.MainFrame.Warning.UICorner
GANTENGLIB["104"] = Instance.new("UICorner", GANTENGLIB["103"]);


-- GantengLib.DropShadowHolder.MainFrame.Warning.UIGradient
GANTENGLIB["105"] = Instance.new("UIGradient", GANTENGLIB["103"]);
GANTENGLIB["105"]["Rotation"] = 55;
GANTENGLIB["105"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.Warning.Title
GANTENGLIB["106"] = Instance.new("TextLabel", GANTENGLIB["103"]);
GANTENGLIB["106"]["TextWrapped"] = true;
GANTENGLIB["106"]["BorderSizePixel"] = 0;
GANTENGLIB["106"]["TextScaled"] = true;
GANTENGLIB["106"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["106"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["106"]["TextSize"] = 14;
GANTENGLIB["106"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["106"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["106"]["Size"] = UDim2.new(0.4320269227027893, 0, 0.0993243008852005, 0);
GANTENGLIB["106"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["106"]["Text"] = [[Warning!]];
GANTENGLIB["106"]["Name"] = [[Title]];
GANTENGLIB["106"]["BackgroundTransparency"] = 1;
GANTENGLIB["106"]["Position"] = UDim2.new(0.4999999701976776, 0, 0.38810813426971436, 0);

-- GantengLib.DropShadowHolder.MainFrame.Warning.Description
GANTENGLIB["107"] = Instance.new("TextLabel", GANTENGLIB["103"]);
GANTENGLIB["107"]["TextWrapped"] = true;
GANTENGLIB["107"]["BorderSizePixel"] = 0;
GANTENGLIB["107"]["TextScaled"] = true;
GANTENGLIB["107"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["107"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Light, Enum.FontStyle.Italic);
GANTENGLIB["107"]["TextSize"] = 14;
GANTENGLIB["107"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["107"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["107"]["Size"] = UDim2.new(0.5966656804084778, 0, 0.14590030908584595, 0);
GANTENGLIB["107"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["107"]["Text"] = [[You are about to close Ganteng Hub, and you will need to re-execute Ganteng Hub to use it again. Are you sure?]];
GANTENGLIB["107"]["Name"] = [[Description]];
GANTENGLIB["107"]["BackgroundTransparency"] = 1;
GANTENGLIB["107"]["Position"] = UDim2.new(0.49884232878685, 0, 0.5114604234695435, 0);

-- GantengLib.DropShadowHolder.MainFrame.Warning.Yes
GANTENGLIB["108"] = Instance.new("TextButton", GANTENGLIB["103"]);
GANTENGLIB["108"]["BorderSizePixel"] = 0;
GANTENGLIB["108"]["AutoButtonColor"] = false;
GANTENGLIB["108"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
GANTENGLIB["108"]["TextSize"] = 22;
GANTENGLIB["108"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["108"]["TextColor3"] = Color3.fromRGB(212, 212, 212);
GANTENGLIB["108"]["Size"] = UDim2.new(0.20948617160320282, 0, 0.10810811072587967, 0);
GANTENGLIB["108"]["Name"] = [[Yes]];
GANTENGLIB["108"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["108"]["Text"] = [[Yes]];
GANTENGLIB["108"]["Position"] = UDim2.new(0.27470362186431885, 0, 0.6216219067573547, 0);

-- GantengLib.DropShadowHolder.MainFrame.Warning.Yes.UICorner
GANTENGLIB["109"] = Instance.new("UICorner", GANTENGLIB["108"]);


-- GantengLib.DropShadowHolder.MainFrame.Warning.Yes.UIGradient
GANTENGLIB["10a"] = Instance.new("UIGradient", GANTENGLIB["108"]);
GANTENGLIB["10a"]["Rotation"] = 55;
GANTENGLIB["10a"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.Warning.Yes.UIStroke
GANTENGLIB["10b"] = Instance.new("UIStroke", GANTENGLIB["108"]);
GANTENGLIB["10b"]["Color"] = Color3.fromRGB(142, 142, 142);
GANTENGLIB["10b"]["Transparency"] = 1;
GANTENGLIB["10b"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.MainFrame.Warning.No
GANTENGLIB["10c"] = Instance.new("TextButton", GANTENGLIB["103"]);
GANTENGLIB["10c"]["BorderSizePixel"] = 0;
GANTENGLIB["10c"]["AutoButtonColor"] = false;
GANTENGLIB["10c"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
GANTENGLIB["10c"]["TextSize"] = 22;
GANTENGLIB["10c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["10c"]["TextColor3"] = Color3.fromRGB(212, 212, 212);
GANTENGLIB["10c"]["Size"] = UDim2.new(0.20948617160320282, 0, 0.10810811072587967, 0);
GANTENGLIB["10c"]["Name"] = [[No]];
GANTENGLIB["10c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["10c"]["Text"] = [[No]];
GANTENGLIB["10c"]["Position"] = UDim2.new(0.5098814964294434, 0, 0.6216219067573547, 0);

-- GantengLib.DropShadowHolder.MainFrame.Warning.No.UICorner
GANTENGLIB["10d"] = Instance.new("UICorner", GANTENGLIB["10c"]);


-- GantengLib.DropShadowHolder.MainFrame.Warning.No.UIGradient
GANTENGLIB["10e"] = Instance.new("UIGradient", GANTENGLIB["10c"]);
GANTENGLIB["10e"]["Rotation"] = 55;
GANTENGLIB["10e"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(122, 122, 122))};

-- GantengLib.DropShadowHolder.MainFrame.Warning.No.UIStroke
GANTENGLIB["10f"] = Instance.new("UIStroke", GANTENGLIB["10c"]);
GANTENGLIB["10f"]["Color"] = Color3.fromRGB(142, 142, 142);
GANTENGLIB["10f"]["Transparency"] = 1;
GANTENGLIB["10f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- GantengLib.DropShadowHolder.DropShadow
GANTENGLIB["110"] = Instance.new("ImageLabel", GANTENGLIB["2"]);
GANTENGLIB["110"]["ZIndex"] = 0;
GANTENGLIB["110"]["BorderSizePixel"] = 0;
GANTENGLIB["110"]["SliceCenter"] = Rect.new(49, 49, 450, 450);
GANTENGLIB["110"]["ScaleType"] = Enum.ScaleType.Slice;
GANTENGLIB["110"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["110"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["110"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["110"]["Image"] = [[rbxassetid://6014261993]];
GANTENGLIB["110"]["Size"] = UDim2.new(1.0928853750228882, 0, 1.1587837934494019, 0);
GANTENGLIB["110"]["Name"] = [[DropShadow]];
GANTENGLIB["110"]["BackgroundTransparency"] = 1;
GANTENGLIB["110"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.DropShadowHolder.DropShadow.UIAspectRatioConstraint
GANTENGLIB["111"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["110"]);
GANTENGLIB["111"]["AspectRatio"] = 1.6122448444366455;

-- GantengLib.InfoFrame
GANTENGLIB["112"] = Instance.new("Frame", GANTENGLIB["1"]);
GANTENGLIB["112"]["BorderSizePixel"] = 0;
GANTENGLIB["112"]["BackgroundColor3"] = Color3.fromRGB(43, 43, 43);
GANTENGLIB["112"]["AnchorPoint"] = Vector2.new(0, 1);
GANTENGLIB["112"]["Size"] = UDim2.new(0, 141, 0, 49);
GANTENGLIB["112"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["112"]["Position"] = UDim2.new(0, 0, -0.30000001192092896, 0);
GANTENGLIB["112"]["AutomaticSize"] = Enum.AutomaticSize.XY;
GANTENGLIB["112"]["Name"] = [[InfoFrame]];

-- GantengLib.InfoFrame.UICorner
GANTENGLIB["113"] = Instance.new("UICorner", GANTENGLIB["112"]);


-- GantengLib.InfoFrame.UIGradient
GANTENGLIB["114"] = Instance.new("UIGradient", GANTENGLIB["112"]);
GANTENGLIB["114"]["Rotation"] = 55;
GANTENGLIB["114"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(169, 169, 169))};

-- GantengLib.InfoFrame.Title
GANTENGLIB["115"] = Instance.new("TextLabel", GANTENGLIB["112"]);
GANTENGLIB["115"]["BorderSizePixel"] = 0;
GANTENGLIB["115"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["115"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["115"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GANTENGLIB["115"]["TextSize"] = 14;
GANTENGLIB["115"]["TextColor3"] = Color3.fromRGB(204, 204, 204);
GANTENGLIB["115"]["AutomaticSize"] = Enum.AutomaticSize.X;
GANTENGLIB["115"]["Size"] = UDim2.new(0, 133, 0, 14);
GANTENGLIB["115"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["115"]["Text"] = [[Title]];
GANTENGLIB["115"]["Name"] = [[Title]];
GANTENGLIB["115"]["BackgroundTransparency"] = 1;
GANTENGLIB["115"]["Position"] = UDim2.new(0, 8, 0, 3);

-- GantengLib.InfoFrame.Frame
GANTENGLIB["116"] = Instance.new("Frame", GANTENGLIB["112"]);
GANTENGLIB["116"]["BorderSizePixel"] = 0;
GANTENGLIB["116"]["BackgroundColor3"] = Color3.fromRGB(187, 187, 187);
GANTENGLIB["116"]["AnchorPoint"] = Vector2.new(0, 0.5);
GANTENGLIB["116"]["Size"] = UDim2.new(0.8999999761581421, 0, 0, 2);
GANTENGLIB["116"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["116"]["Position"] = UDim2.new(0, 7, 0, 20);

-- GantengLib.InfoFrame.Description
GANTENGLIB["117"] = Instance.new("TextLabel", GANTENGLIB["112"]);
GANTENGLIB["117"]["BorderSizePixel"] = 0;
GANTENGLIB["117"]["TextYAlignment"] = Enum.TextYAlignment.Top;
GANTENGLIB["117"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["117"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GANTENGLIB["117"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
GANTENGLIB["117"]["TextSize"] = 12;
GANTENGLIB["117"]["TextColor3"] = Color3.fromRGB(204, 204, 204);
GANTENGLIB["117"]["AutomaticSize"] = Enum.AutomaticSize.XY;
GANTENGLIB["117"]["Size"] = UDim2.new(0, 133, 0, 28);
GANTENGLIB["117"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["117"]["Text"] = [[This is a description.]];
GANTENGLIB["117"]["Name"] = [[Description]];
GANTENGLIB["117"]["BackgroundTransparency"] = 1;
GANTENGLIB["117"]["Position"] = UDim2.new(0, 8, 0, 21);

-- GantengLib.InfoFrame.DropShadowHolder
GANTENGLIB["118"] = Instance.new("Frame", GANTENGLIB["112"]);
GANTENGLIB["118"]["ZIndex"] = 0;
GANTENGLIB["118"]["BorderSizePixel"] = 0;
GANTENGLIB["118"]["BackgroundTransparency"] = 1;
GANTENGLIB["118"]["Size"] = UDim2.new(0, 141, 0, 49);
GANTENGLIB["118"]["Name"] = [[DropShadowHolder]];

-- GantengLib.InfoFrame.DropShadowHolder.DropShadow
GANTENGLIB["119"] = Instance.new("ImageLabel", GANTENGLIB["118"]);
GANTENGLIB["119"]["ZIndex"] = 0;
GANTENGLIB["119"]["BorderSizePixel"] = 0;
GANTENGLIB["119"]["SliceCenter"] = Rect.new(49, 49, 450, 450);
GANTENGLIB["119"]["ScaleType"] = Enum.ScaleType.Slice;
GANTENGLIB["119"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["119"]["ImageTransparency"] = 0.5;
GANTENGLIB["119"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["119"]["Image"] = [[rbxassetid://6014261993]];
GANTENGLIB["119"]["Size"] = UDim2.new(1, 47, 1, 47);
GANTENGLIB["119"]["Name"] = [[DropShadow]];
GANTENGLIB["119"]["BackgroundTransparency"] = 1;
GANTENGLIB["119"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.Library
GANTENGLIB["11a"] = Instance.new("ModuleScript", GANTENGLIB["1"]);
GANTENGLIB["11a"]["Name"] = [[Library]];

-- GantengLib.Icon
GANTENGLIB["11b"] = Instance.new("ImageLabel", GANTENGLIB["1"]);
GANTENGLIB["11b"]["BorderSizePixel"] = 0;
GANTENGLIB["11b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["11b"]["Visible"] = false;
GANTENGLIB["11b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["11b"]["Image"] = [[rbxassetid://15006559003]];
GANTENGLIB["11b"]["Size"] = UDim2.new(0, 54, 0, 54);
GANTENGLIB["11b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["11b"]["Name"] = [[Icon]];
GANTENGLIB["11b"]["Position"] = UDim2.new(0.18727155029773712, 0, 0.16202445328235626, 0);

-- GantengLib.Icon.UIAspectRatioConstraint
GANTENGLIB["11c"] = Instance.new("UIAspectRatioConstraint", GANTENGLIB["11b"]);


-- GantengLib.Icon.UICorner
GANTENGLIB["11d"] = Instance.new("UICorner", GANTENGLIB["11b"]);


-- GantengLib.Icon.DropShadowHolder
GANTENGLIB["11e"] = Instance.new("Frame", GANTENGLIB["11b"]);
GANTENGLIB["11e"]["ZIndex"] = 0;
GANTENGLIB["11e"]["BorderSizePixel"] = 0;
GANTENGLIB["11e"]["BackgroundTransparency"] = 1;
GANTENGLIB["11e"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["11e"]["Name"] = [[DropShadowHolder]];

-- GantengLib.Icon.DropShadowHolder.DropShadow
GANTENGLIB["11f"] = Instance.new("ImageLabel", GANTENGLIB["11e"]);
GANTENGLIB["11f"]["ZIndex"] = 0;
GANTENGLIB["11f"]["BorderSizePixel"] = 0;
GANTENGLIB["11f"]["SliceCenter"] = Rect.new(49, 49, 450, 450);
GANTENGLIB["11f"]["ScaleType"] = Enum.ScaleType.Slice;
GANTENGLIB["11f"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["11f"]["ImageTransparency"] = 0.5;
GANTENGLIB["11f"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["11f"]["Image"] = [[rbxassetid://6014261993]];
GANTENGLIB["11f"]["Size"] = UDim2.new(1, 47, 1, 47);
GANTENGLIB["11f"]["Name"] = [[DropShadow]];
GANTENGLIB["11f"]["BackgroundTransparency"] = 1;
GANTENGLIB["11f"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.Icon.Icon
GANTENGLIB["120"] = Instance.new("ImageButton", GANTENGLIB["11b"]);
GANTENGLIB["120"]["Active"] = false;
GANTENGLIB["120"]["BorderSizePixel"] = 0;
GANTENGLIB["120"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GANTENGLIB["120"]["Selectable"] = false;
GANTENGLIB["120"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GANTENGLIB["120"]["Image"] = [[rbxassetid://15006559003]];
GANTENGLIB["120"]["Size"] = UDim2.new(1, 0, 1, 0);
GANTENGLIB["120"]["Name"] = [[Icon]];
GANTENGLIB["120"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GANTENGLIB["120"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- GantengLib.Icon.Icon.UICorner
GANTENGLIB["121"] = Instance.new("UICorner", GANTENGLIB["120"]);


-- GantengLib.Icon.Icon.UIStroke
GANTENGLIB["122"] = Instance.new("UIStroke", GANTENGLIB["120"]);
GANTENGLIB["122"]["Color"] = Color3.fromRGB(136, 136, 136);

-- Require GANTENGLIB wrapper
local GANTENGLIB_REQUIRE = require;
local GANTENGLIB_MODULES = {};
local function require(Module:ModuleScript)
	local ModuleState = GANTENGLIB_MODULES[Module];
	if ModuleState then
		if not ModuleState.Required then
			ModuleState.Required = true;
			ModuleState.Value = ModuleState.Closure();
		end
		return ModuleState.Value;
	end;
	return GANTENGLIB_REQUIRE(Module);
end

GANTENGLIB_MODULES[GANTENGLIB["11a"]] = {
	Closure = function()
		local script = GANTENGLIB["11a"];
		local LIBRARY = {}


		-- Services
		local UserInputService = game:GetService("UserInputService")
		local Players = game:GetService("Players")
		local TweenService = game:GetService("TweenService")
		local HttpService = game:GetService("HttpService")
		local LocalPlayer = Players.LocalPlayer

		-- Variable Shortcuts
		local Mainframe = script.Parent.DropShadowHolder.MainFrame
		local Reserved = Mainframe.PremadeLibs
		local ReservedTabs = Reserved.InsideTab
		local Mainside = Mainframe.MainSide
		local SideBar = Mainframe.SideBar
		local Tabs = Mainframe.MainSide.Tabs
		local LocalPlayerInfo = SideBar.LocalPlayerInfo
		local Intro = Mainframe.Intro
		local GuiTitle = SideBar.Title
		local Gui = script.Parent
		local Topbar = Mainside.TopBar
		local Landing = Mainside.Landing
		local Warning = Mainframe.Warning
		local InfoFrame = Gui.InfoFrame
		local ReservedChangelog = Reserved.Changelog
		-- Variables
		local ShowInfo = false
		local Maxxed = false
		local namehub



		local config 
        
        local function SaveConfig()
            writefile(namehub..".json",HttpService:JSONEncode(config))
        end

        -- variable that stored all functions, this useful when closing the script/ui will stop all task
        local TaskThreads = {}

        local function StopAllThreads()
            for i,v in ipairs(TaskThreads) do
                v:Cancel()
            end
        end


		local SideButtons = {}
		local MainTabs = {}
		-- MAIN FUNCTION
		local function Tween(instance, tweeninfo, propertyTable)
			local tween = TweenService:Create(instance, tweeninfo, propertyTable)
			tween:Play()
			return tween
		end


		function LIBRARY:Init(name, image, requiredLoading, Username, socials)
			local self = setmetatable({}, LIBRARY)
			namehub = name
			-- config setting save
			if isfile(namehub..".json") then
				local success, results = pcall(function()
                                     config = HttpService:JSONDecode(readfile(namehub..".json"))
				end)
                                if not success then
                                     warn("Error while reading config file Ganteng Hub.json, using default settings.")
                                     config = {}
				     config.Objects = {}
                                end
			else
				config = {}
				config.Objects = {}
			end

			config.Name = name

            

			script.Parent.Enabled = true
			local discord = socials.discord
			local youtube = socials.youtube

			Gui.Enabled =true
			-- Setting names
			GuiTitle.Text = name


			if requiredLoading == true then
				Intro.Visible = true
				local progressbar = Intro.ProgressBar
				local fill = progressbar.Fill
				local percentText = Intro.PercentProgress
				local percent = 0
				local intValue = Instance.new("IntValue")

				task.spawn(function()
					intValue:GetPropertyChangedSignal("Value"):Connect(function()
						percentText.Text = intValue.Value.."%"
					end)
				end)

				local function Open()
					local tween = Tween(Intro,TweenInfo.new(1,Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Size = UDim2.fromScale(0,0)})

					tween.Completed:Connect(function()
						task.wait(0.2)
						Intro.Visible = false
					end)
				end

				function self:SetProgress(intPercent)
					percent = intPercent
					if percent > 100 or percent < 0 then
						error("Percent must between 0 - 100.")
					end
					local tween = Tween(fill, TweenInfo.new(.7, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Size = UDim2.fromScale(intPercent/100,1)})
					Tween(intValue,TweenInfo.new(1,Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Value = percent})

					tween.Completed:Wait()
					if percent >= 100 then
						task.wait(.75)
						Open()
					end
				end

				function self:Finish()
					local tween = Tween(fill, TweenInfo.new(.7, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Size = UDim2.fromScale(1,1)})
					Tween(intValue,TweenInfo.new(1,Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Value = 100})
					tween.Completed:Wait()
					Open()
				end
				function self:SetTimeOut(seconds)

				end
			end


			-- Init LocalPlayerInfo
			LocalPlayerInfo.UserName.Text = "@"..LocalPlayer.Name

			LocalPlayerInfo.Profile.Image = Players:GetUserThumbnailAsync(LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)

			local function RefreshTime()
				if Mainframe.Parent ~= nil then
					LocalPlayerInfo.Time.Text =os.date("%H:%M:%S", os.time())
					task.wait(.5)
					RefreshTime()
				end
			end

			task.spawn(RefreshTime)




			-- idk rest of them



			local function EnableDrag(Frame)
				local dragToggle
				local dragSpeed = .25
				local dragInput
				local dragStart
				local dragPos

				local function updateInput(input)
					local Delta = input.Position - dragStart
					local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
					TweenService:Create(Frame, TweenInfo.new(.1), {Position = Position}):Play()
				end

				Frame.InputBegan:Connect(function(input)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
						dragToggle = true
						dragStart = input.Position
						startPos = Frame.Position
						input.Changed:Connect(function()
							if (input.UserInputState == Enum.UserInputState.End) then
								dragToggle = false
							end
						end)
					end
				end)

				Frame.InputChanged:Connect(function(input)
					if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
						dragInput = input
					end
				end)

				game:GetService("UserInputService").InputChanged:Connect(function(input)
					if (input == dragInput and dragToggle) then
						updateInput(input)
					end
				end)
			end

			EnableDrag(script.Parent.DropShadowHolder)



			-- Topbar menu functions
			local timeout = false
			Topbar.Move.MouseButton1Click:Connect(function()
				if Maxxed == false and timeout == false then
					Maxxed = true
					timeout = true
					-- tween pos the sidebar to non visible
					Tween(SideBar, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.fromScale(-0.14, 0.5)})

					-- tween pos to full
					Tween(Mainside, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.fromScale(0, 0)})
					Tween(Mainside, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Size = UDim2.fromScale(1,1)})


					if Topbar.SearchBar.Visible == false then
				--[[----------------------------
				This for handling if searchbar not visible, applys as alternative.
				----------------------------]]--
						Tween(Topbar.Alternative, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.new(0.326, 0,0.474, 0)})
					end


					task.wait(0.25)
					timeout = false
				elseif Maxxed == true and timeout == false then
					Maxxed = false
					timeout = true
					-- tween pos the sidebar to visible
					Tween(SideBar, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.fromScale(0.14, 0.5)})

					-- tween pos to full
					Tween(Mainside, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.fromScale(0.281, 0)})
					Tween(Mainside, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Size = UDim2.fromScale(0.719,1)})

					if Topbar.SearchBar.Visible == false then
				--[[----------------------------
				This for handling if searchbar not visible, applys as alternative.
				----------------------------]]--
						Tween(Topbar.Alternative, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = UDim2.new(0.326, 0,-0.474, 0)})
					end

					task.wait(0.25)
					timeout = false
				end
			end)

			Topbar.ToggleInfo.MouseButton1Click:Connect(function()
				ShowInfo = not ShowInfo

				if ShowInfo == true then
					Tween(Topbar.ToggleInfo.Toggle.Filler, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
				elseif ShowInfo == false then
					Tween(Topbar.ToggleInfo.Toggle.Filler, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
				end
			end)

			-- Socials things
			local YoutubeButton = Landing.Infos.Socials.Youtube
			local DiscordButton = Landing.Infos.Socials.Discord

			YoutubeButton.MouseEnter:Connect(function()
				Tween(YoutubeButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0.504, 0,0.837, 0) })
				Tween(YoutubeButton.UIGradient, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Rotation = 775 })
			end)
			YoutubeButton.MouseLeave:Connect(function()
				Tween(YoutubeButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0.459, 0,0.674, 0) })
				Tween(YoutubeButton.UIGradient, TweenInfo.new(0.7, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Rotation = 55 })

				Tween(YoutubeButton.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Thickness = 1.5})
				Tween(YoutubeButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 0})
			end)

			YoutubeButton.MouseButton1Down:Connect(function()
				Tween(YoutubeButton.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Thickness = 0})
				Tween(YoutubeButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 0.4})
			end)
			YoutubeButton.MouseButton1Up:Connect(function()
				Tween(YoutubeButton.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Thickness = 1.5})
				Tween(YoutubeButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 0})
			end)

			YoutubeButton.MouseButton1Click:Connect(function()
				setclipboard(youtube)
			end)

			DiscordButton.MouseEnter:Connect(function()
				Tween(DiscordButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0.504, 0,0.837, 0) })
				Tween(DiscordButton.UIGradient, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Rotation = 775 })
			end)
			DiscordButton.MouseLeave:Connect(function()
				Tween(DiscordButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0.459, 0,0.674, 0) })
				Tween(DiscordButton.UIGradient, TweenInfo.new(0.7, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Rotation = 55 })

				Tween(DiscordButton.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Thickness = 1.5})
				Tween(DiscordButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 0})
			end)

			DiscordButton.MouseButton1Down:Connect(function()
				Tween(DiscordButton.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Thickness = 0})
				Tween(DiscordButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 0.4})
			end)
			DiscordButton.MouseButton1Up:Connect(function()
				Tween(DiscordButton.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Thickness = 1.5})
				Tween(DiscordButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = 0})
			end)

			DiscordButton.MouseButton1Click:Connect(function()
				setclipboard(DiscordButton)
			end)

			-- TODO: i swear this so hard to make
			Topbar.SearchBar.Visible = false

			local originalProperty = {}
			originalProperty.Tabs = {}
			originalProperty.Item = {}
			originalProperty.Indexed = false
			local event

			Topbar.SearchBar.Focused:Connect(function()
				originalProperty.Indexed = true

				event = Topbar.SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
					Tabs.SearchedTab.Visible = true

					for _, tab in pairs(Tabs:GetChildren()) do
						if tab ~= Tabs.SearchedTab then
							originalProperty.Tabs[tab.Name] = {}
							originalProperty.Tabs[tab.Name].Visible = tab.Visible
							tab.Visible = false
						end
					end

					-- Use an array to store the items in their original order
					local originalItems = {}

					for _, tab in pairs(Tabs:GetChildren()) do
						if tab ~= Tabs.SearchedTab then
							for _, item in pairs(tab:GetChildren()) do
								if item:IsA("Frame") and item:FindFirstChild("Frame") and not item:GetAttribute("Label") then
									if string.find(string.lower(item.Frame.TextLabel.Text), string.lower(Topbar.SearchBar.Text)) then
										originalProperty.Item[item.Name] = {}
										originalProperty.Item[item.Name]["Parent"] = item.Parent
										table.insert(originalItems, item)
									end
								end
							end
						end
					end

					-- Reparent items in their original order
					for _, item in ipairs(originalItems) do
						item.Parent = Tabs.SearchedTab
					end
				end)
			end)

			Topbar.SearchBar.FocusLost:Connect(function()
				if originalProperty.Indexed == true then
					Tabs.SearchedTab.Visible = false

					for _, tab in pairs(Tabs:GetChildren()) do
						if tab ~= Tabs.SearchedTab then
							tab.Visible = originalProperty.Tabs[tab.Name].Visible
						end
					end

					for _, item in pairs(Tabs.SearchedTab:GetChildren()) do
						if item:IsA("Frame") then
							item.Parent = originalProperty.Item[item.Name].Parent
						end
					end

					originalProperty.Indexed = false
				end
			end)





			Topbar.Minimize.MouseButton1Click:Connect(function()
				local twen = Tween(Mainframe.Parent, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0,0,0,0)})
				Mainframe.Parent.Parent.Icon.Visible = true
				twen.Completed:Wait()
				Mainframe.Parent.Visible = false
			end)

			Topbar.Close.MouseButton1Click:Connect(function()
				Warning.Visible = true
				Warning.Size = UDim2.new(0,0,0,0)
				Tween(Warning, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(1,0,1,0)})
			end)

			Mainframe.Parent.Parent.Icon.Icon.MouseButton1Click:Connect(function()
				Tween(Mainframe.Parent, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 506,0, 296)})
				Mainframe.Parent.Parent.Icon.Visible = false
				Mainframe.Parent.Visible = true
			end)





			-- warning handler

			Warning.Yes.MouseButton1Click:Connect(function()
				local twen = Tween(Mainframe.Parent, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0,0,0,0)})
				twen.Completed:Wait()
				script.Parent:Destroy()
			end)

			Warning.Yes.MouseEnter:Connect(function()
				Tween(Warning.Yes, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(45,45,45)})
			end)
			Warning.Yes.MouseLeave:Connect(function()
				Tween(Warning.Yes.UIStroke, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Transparency = 1})
				Tween(Warning.Yes, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(35,35,35)})
			end)

			Warning.Yes.MouseButton1Down:Connect(function()
				Tween(Warning.Yes.UIStroke, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Transparency = 0})
			end)
			Warning.Yes.MouseButton1Up:Connect(function()
				Tween(Warning.Yes.UIStroke, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Transparency = 1})
			end)

			Warning.No.MouseButton1Click:Connect(function()
				local twen = Tween(Warning, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0,0,0,0)})
				twen.Completed:Wait()
				Warning.Visible = false
			end)

			Warning.No.MouseEnter:Connect(function()
				Tween(Warning.No, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(45,45,45)})
			end)
			Warning.No.MouseLeave:Connect(function()
				Tween(Warning.No.UIStroke, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Transparency = 1})
				Tween(Warning.No, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(35,35,35)})
			end)

			Warning.No.MouseButton1Down:Connect(function()
				Tween(Warning.No.UIStroke, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Transparency = 0})
			end)
			Warning.No.MouseButton1Up:Connect(function()
				Tween(Warning.No.UIStroke, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Transparency = 1})
			end)



			return self
		end

		function getRandomIndex(a,b)
			local str = a..b
			math.randomseed(#str)

			local generatedNumber = math.random(1, #ReservedChangelog:GetChildren())

			for i,v in ipairs(ReservedChangelog:GetChildren()) do
				if i == generatedNumber then
					return v
				end
			end
		end

		local index = 1
		function LIBRARY:AddChangelog(list)
			
		
			for title, desc in pairs(list) do
				print('Added "'..title..':'..desc..'".')
				local newCg = getRandomIndex(title, desc):Clone()
				
				newCg.Name = title
				newCg.Parent = Landing.Changelogs.ScrollingFrame
		
				-- Update properties
				newCg.Title.Text = title
				newCg.Description.Text = desc
				newCg.Visible = true
		
				-- Adjust position in the scrolling frame
				newCg.LayoutOrder = index
				index = index + 1
			end
		end
		



		function LIBRARY:AddTab(name, icon)
			local TAB = setmetatable({}, LIBRARY)


			if not config.Objects[name] then
				config.Objects[name] = {}
			end

			local nametab = name



			local newButtonTab = Reserved.ButtonFrame:Clone()
			local newTab = Reserved.ScrollingTab:Clone()

			SideButtons[name] = newButtonTab
			MainTabs[name] = newTab

			newButtonTab.Name = name
			newButtonTab.Parent = SideBar.Buttons
			newButtonTab.Visible = true

			newTab.Name = name
			newTab.Parent = Tabs

			newButtonTab.ButtonFrame.TextButton.Text = name

			newButtonTab.ButtonFrame.BackgroundTransparency = 1
			newButtonTab.ButtonFrame.ImageFrame.ImageLabel.Image = icon
			newButtonTab.ButtonFrame.TextButton.Text = name
			newButtonTab.ButtonFrame.MouseButton1Click:Connect(function()
				Topbar.Alternative.TextLabel.Text = name
				Landing.Visible = false
				newTab.Visible = true
				Tween(newButtonTab.ButtonFrame, TweenInfo.new(0.25), { BackgroundTransparency = 0 })
				for i,v in pairs(SideButtons) do
					if v.Name ~= newButtonTab.Name then
						Tween(v.ButtonFrame, TweenInfo.new(0.25), { BackgroundTransparency = 1 })
					end
				end
				for i,v in pairs(MainTabs) do
					if v.Name ~= newButtonTab.Name then
						v.Visible = false
					end
				end
			end)
			-- THE INSIDES

			function TAB:AddLabel(name)
				local self = setmetatable({}, TAB)

				local newLabel = ReservedTabs.Label:Clone()

				newLabel.Name = name
				newLabel.Parent = newTab
				newLabel.Visible = true
				newLabel.Frame.TextLabel.Text = name


				function self:Set(text)

					newLabel.Frame.TextLabel.Text = text
				end

				return self
			end

			function TAB:AddLine(name)
				local newLine = ReservedTabs.Border:Clone()

				newLine.Name = name or newLine.Name
				newLine.Parent = newTab
				newLine.Visible = true
			end

			function TAB:AddSeperator(name)
				local newLine = ReservedTabs.Seperator:Clone()

				newLine.Name = name or newLine.Name
				newLine.Parent = newTab
				newLine.Visible = true

				newLine.TextLabel.Text = name
			end


			function TAB:AddButton(name, desc, callback)
				local self = setmetatable({}, TAB)
				local newButton = ReservedTabs.Button:Clone()

				newButton.Name = name
				newButton.Parent = newTab
				newButton.Visible = true

				newButton.Frame.TextLabel.Text = name

				function self:Set(text)
					newButton.Frame.TextLabel.Text = text
				end

				newButton.Frame.MouseEnter:Connect(function()
					Tween(newButton.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
				end)

				newButton.Frame.MouseLeave:Connect(function()
					Tween(newButton.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(20,20,20)})
					Tween(newButton.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
				end)


				newButton.Frame.MouseButton1Down:Connect(function()
					Tween(newButton.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
				end)
				newButton.Frame.MouseButton1Up:Connect(function()
					Tween(newButton.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
				end)

				newButton.Frame.MouseButton1Click:Connect(callback)

				local Event

				newButton.Frame.MouseEnter:Connect(function(x,y)
					if ShowInfo == true then
						InfoFrame.Visible = true

						InfoFrame.Title.Text = name
						InfoFrame.Description.Text = desc
						InfoFrame.Position = UDim2.fromOffset(x,y)

						Event = newButton.Frame.MouseMoved:Connect(function(x,y)
							Tween(InfoFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.fromOffset(x,y)})
						end)
					end
				end)
				newButton.Frame.MouseLeave:Connect(function()
					if ShowInfo == true then
						InfoFrame.Visible = false
						Event:Disconnect()
					end
				end)
				return self
			end


			function TAB:AddToggle(name, desc, tbl, callback)
				local self = setmetatable({}, TAB)
				local newToggle = ReservedTabs.Toggle:Clone()

				local state = false

				if config.Objects[nametab][name] ~= nil then
					state = config.Objects[nametab][name]

				else
					if type(tbl) == "table" then
						state = tbl.state
					elseif type(tbl) == "boolean" then
						state = tbl
					else
						state = tbl
					end

					config.Objects[nametab][name] =state
				end

				newToggle.Name = name
				newToggle.Parent = newTab
				newToggle.Visible = true

				newToggle.Frame.TextLabel.Text = name

				if not state then
					newToggle.Frame.Toggle.Filler.Transparency = 1

				end

				if state == true then
                    TaskThreads[name] = task.spawn(function()
						task.wait(1)
						callback(state)
					end)
					
				end

				newToggle.Frame.MouseEnter:Connect(function()
					Tween(newToggle.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
				end)

				newToggle.Frame.MouseLeave:Connect(function()
					Tween(newToggle.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(20,20,20)})
					Tween(newToggle.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
				end)


				newToggle.Frame.MouseButton1Down:Connect(function()
					Tween(newToggle.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
				end)
				newToggle.Frame.MouseButton1Up:Connect(function()
					Tween(newToggle.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
				end)

				newToggle.Frame.MouseButton1Click:Connect(function()
					if state == true then
						state = not state
						config.Objects[nametab][name] = state
						Tween(newToggle.Frame.Toggle.Filler, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
						TaskThreads[name] = task.spawn(function()
							callback(state)
                            SaveConfig()
						end)
					elseif state == false then
						state = not state
						config.Objects[nametab][name] = state
						Tween(newToggle.Frame.Toggle.Filler, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
						TaskThreads[name] = task.spawn(function()
							callback(state)
                            SaveConfig()
						end)
						
						
					end

				end)


				local Event

				newToggle.Frame.MouseEnter:Connect(function(x,y)
					if ShowInfo == true then
						InfoFrame.Visible = true

						InfoFrame.Title.Text = name
						InfoFrame.Description.Text = desc
						InfoFrame.Position = UDim2.fromOffset(x,y)

						Event = newToggle.Frame.MouseMoved:Connect(function(x,y)
							Tween(InfoFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.fromOffset(x,y)})
						end)
					end
				end)
				newToggle.Frame.MouseLeave:Connect(function()
					if ShowInfo == true then
						InfoFrame.Visible = false
						Event:Disconnect()
					end
				end)

				function self:Toggle()
					if state == true then
						state = not state
						config.Objects[nametab][name] = state
						Tween(newToggle.Frame.Toggle.Filler, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
						TaskThreads[name] = task.spawn(function()
							callback(state)
                            SaveConfig()
						end)
					elseif state == false then
						state = not state
						config.Objects[nametab][name] = state
						Tween(newToggle.Frame.Toggle.Filler, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
						TaskThreads[name] = task.spawn(function()
							callback(state)
                            SaveConfig()
						end)
					end
				end

				function self:Set(bool)
					if bool == true then
						state = bool
						config.Objects[nametab][name] = state
						Tween(newToggle.Frame.Toggle.Filler, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
						TaskThreads[name] = task.spawn(function()
							callback(state)
                            SaveConfig()
						end)
					elseif bool == false then
						state = bool
						config.Objects[nametab][name] = state
						Tween(newToggle.Frame.Toggle.Filler, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
						TaskThreads[name] = task.spawn(function()
							callback(state)
                            SaveConfig()
						end)
					end
				end

				return self
			end

			function TAB:AddTextbox(name, desc, tbl, callback)
				local self = setmetatable({}, TAB)

				local placeholdertext = tbl.placeholdertext
				local defaulttext
				local clearonfocus = tbl.clearonfocus

				if config.Objects[nametab][name] then
					defaulttext = config.Objects[nametab][name]
				else
					defaulttext = tbl.defaulttext
					config.Objects[nametab][name] = defaulttext
				end

				if defaulttext ~= "" then

					TaskThreads[name] = task.spawn(function()
						task.wait(1)
						callback(defaulttext)
					end)
				end

				local newTextbox = ReservedTabs.Textbox:Clone()
				newTextbox.Parent = newTab
				newTextbox.Name = name
				newTextbox.Visible = true

				newTextbox.Frame.Textbox.PlaceholderText = placeholdertext or ""
				newTextbox.Frame.Textbox.Text = defaulttext or ""
				newTextbox.Frame.Textbox.ClearTextOnFocus = clearonfocus or true
				newTextbox.Frame.TextLabel.Text = name

				newTextbox.Frame.MouseEnter:Connect(function()
					Tween(newTextbox.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
				end)

				newTextbox.Frame.MouseLeave:Connect(function()
					Tween(newTextbox.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(20,20,20)})

				end)

				newTextbox.Frame.Textbox.Focused:Connect(function()
					Tween(newTextbox.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
				end)

				newTextbox.Frame.Textbox.FocusLost:Connect(function()
					Tween(newTextbox.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
					config.Objects[nametab][name] = newTextbox.Frame.Textbox.Text
					
					
					TaskThreads[name] = task.spawn(function()
						callback(newTextbox.Frame.Textbox.Text)
                        SaveConfig()
					end)
				end)

				local Event

				newTextbox.Frame.MouseEnter:Connect(function(x,y)
					if ShowInfo == true then
						InfoFrame.Visible = true

						InfoFrame.Title.Text = name
						InfoFrame.Description.Text = desc
						InfoFrame.Position = UDim2.fromOffset(x,y)

						Event = newTextbox.Frame.MouseMoved:Connect(function(x,y)
							Tween(InfoFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.fromOffset(x,y)})
						end)
					end
				end)
				newTextbox.Frame.MouseLeave:Connect(function()
					if ShowInfo == true then
						InfoFrame.Visible = false
						Event:Disconnect()
					end
				end)

				function self:Set(text)
					newTextbox.Frame.Textbox.Text = text
					config.Objects[nametab][name] = config.Objects[nametab][name] or newTextbox.Frame.Textbox.Text
				end

				return self
			end

			function TAB:AddKeybind(name, desc, tbl, callback)
				local defaultkey

				if config.Objects[nametab][name] then
					if config.Objects[nametab][name]:find("MouseButton") and type(config.Objects[nametab][name]) == "string" then
						defaultkey = Enum.UserInputType[config.Objects[nametab][name]]
					elseif not config.Objects[nametab][name]:find("MouseButton") and type(config.Objects[nametab][name]) == "string" then
						defaultkey = Enum.KeyCode[config.Objects[nametab][name]]
					end
				else
					defaultkey = tbl.defaultkey
				end

				local triggerwhilebinding = tbl.triggerwhilebinding
				local newKey = ReservedTabs.Keybind:Clone()
				local key



				local listening = false
				local event

				key = defaultkey or nil
				self.CurrentKey = key

				newKey.Name = name
				newKey.Parent = newTab
				newKey.Visible = true

				config.Objects[nametab][name] = defaultkey.Name

				if self.CurrentKey == Enum then
					config.Objects[nametab][name] = Enum.KeyCode[config.Objects[nametab][name]] or defaultkey.Name
				end





				newKey.Frame.TextLabel.Text = name

				local match = defaultkey.Name:match("MouseButton(%d+)")
				newKey.Frame.Bind.Text = (match and "MB" .. match) or defaultkey.Name or "None"

				newKey.Frame.Bind.MouseButton1Click:Connect(function()
					if listening == false then
						listening = true
						Tween(newKey.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
						event = UserInputService.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.Keyboard then

								newKey.Frame.Bind.Text = input.KeyCode.Name
								Tween(newKey.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
								listening = false
								event:Disconnect()
								self.CurrentKey = input.KeyCode  -- Store the current key in the object
								config.Objects[nametab][name] = input.KeyCode.Name
								if triggerwhilebinding == true then
									TaskThreads[name] = task.spawn(function()
										callback(input)
                                        SaveConfig()
									end)
								end
							elseif input.UserInputType == Enum.UserInputType.MouseButton1 or
								input.UserInputType == Enum.UserInputType.MouseButton2 or
								input.UserInputType == Enum.UserInputType.MouseButton3 then

								local match = input.UserInputType.Name:match("MouseButton(%d+)")
								newKey.Frame.Bind.Text = (match and "MB" .. match) or input.UserInputType.Name

								Tween(newKey.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
								listening = false
								event:Disconnect()
								self.CurrentKey = input.UserInputType  -- Store the current key in the object
								config.Objects[nametab][name] = input.KeyCode.Name
								if triggerwhilebinding == true then
									TaskThreads[name] = task.spawn(function()
										callback(input)
                                        SaveConfig()
									end)
								end
							end
						end)
					end
				end)

				UserInputService.InputBegan:Connect(function(input)
					if listening == false then
						if input.UserInputType == Enum.UserInputType.Keyboard then
							if input.KeyCode == TAB.CurrentKey then

								TaskThreads[name] = task.spawn(function()
									callback(input)
                                    SaveConfig()
								end)
							end
						elseif input.UserInputType == Enum.UserInputType.MouseButton1 or
							input.UserInputType == Enum.UserInputType.MouseButton2 or
							input.UserInputType == Enum.UserInputType.MouseButton3 then
							if input.UserInputType == TAB.CurrentKey then
								TaskThreads[name] = task.spawn(function()
									callback(input)
                                    SaveConfig()
								end)
							end
						end
					end
				end)


				newKey.Frame.MouseEnter:Connect(function()
					Tween(newKey.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
				end)

				newKey.Frame.MouseLeave:Connect(function()
					Tween(newKey.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(20,20,20)})

				end)


				local Event

				newKey.Frame.MouseEnter:Connect(function(x,y)
					if ShowInfo == true then
						InfoFrame.Visible = true

						InfoFrame.Title.Text = name
						InfoFrame.Description.Text = desc
						InfoFrame.Position = UDim2.fromOffset(x,y)

						Event = newKey.Frame.MouseMoved:Connect(function(x,y)
							Tween(InfoFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.fromOffset(x,y)})
						end)
					end
				end)
				newKey.Frame.MouseLeave:Connect(function()
					if ShowInfo == true then
						InfoFrame.Visible = false
						Event:Disconnect()
					end
				end)
			end

			function TAB:AddSlider(name, desc, tbl, callback)
				local self = setmetatable({}, TAB)

				local newSlider = ReservedTabs.Slider:Clone()

				local min = tbl.min
				local max = tbl.max
				local inc = tbl.inc
				local default

				if config.Objects[nametab][name] ~= nil then

					default = config.Objects[nametab][name]
					
					TaskThreads[name] = task.spawn(function()
						task.wait(1)
						callback(default)
					end)

				else
					config.Objects[nametab][name] = tbl.default
					default = tbl.default
				end



				--config.Objects[nametab][name] = config.Objects[nametab][name] or default
				newSlider.Parent = newTab
				newSlider.Visible = true
				newSlider.Name = name
				newSlider.Frame.TextLabel.Text = name

				local Mouse = LocalPlayer:GetMouse()
				local tweenServ = TweenService

				local Trigger = newSlider.Frame.FrameSlider.Trigger
				local Label = newSlider.Frame.Textbox
				local Fill = newSlider.Frame.FrameSlider.Fill
				local Parent = newSlider.Frame

				local perc
				local Percent
				local MouseDown = false
				local delayTw = 0.3

				local function convertValueToScale(value)
					return (value - min) / (max - min) * (1 - 0) + 0
				end


				Label.Text = tostring(default) or tostring(min)
				Fill.Size = UDim2.fromScale(convertValueToScale(default), 1)

				local function Update()
					MouseDown = true
					repeat
						task.wait()
						Percent = math.clamp((Mouse.X - Parent.AbsolutePosition.X) / Parent.AbsoluteSize.X, 0, 1)
						perc = min + (Percent * (max - min))

						-- Calculate the rounded value with the specified precision
						local roundedValue = math.round(perc / inc) * inc

						-- Clamp the value to the specified range
						perc = math.clamp(roundedValue, min, max)

						local function fixInt(number, decimalPlaces)
							local multiplier = 10 ^ decimalPlaces
							return math.floor(number * multiplier + 0.5) / multiplier
						end




						local amount = tostring(inc)
						amount:gsub("%d+.","")
						amount = #amount
						perc = fixInt(perc,tonumber(amount))

						Label.Text = perc
						config.Objects[nametab][name] = perc

						TaskThreads[name] = task.spawn(function()
							callback(perc, newSlider)
                            SaveConfig()
						end)

						Tween(Fill, TweenInfo.new(delayTw, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.fromScale(Percent, 1) })
					until MouseDown == false
				end

				local event
				Label.Focused:Connect(function()
					Tween(newSlider.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
					event = Label:GetPropertyChangedSignal("Text"):Connect(function()
						local inputText = tonumber(Label.Text)
						if inputText then
							if inputText <= max and inputText >= min then

								Tween(Fill, TweenInfo.new(delayTw, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.fromScale(convertValueToScale(inputText), 1) })
								config.Objects[nametab][name] = perc

								TaskThreads[name] = task.spawn(function()
									callback(inputText, newSlider)
                                    SaveConfig()
								end)
							end
						end


					end)
				end)
				Label.FocusLost:Connect(function()
					Tween(newSlider.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
				end)

				Trigger.MouseButton1Down:Connect(function()
					Tween(newSlider.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
					Update()
				end)

				UserInputService.InputEnded:Connect(function(input)
					if Mainframe.Parent ~= nil and input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						MouseDown = false
						Tween(newSlider.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
					end
				end)



				newSlider.Frame.MouseEnter:Connect(function()
					Tween(newSlider.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
				end)

				newSlider.Frame.MouseLeave:Connect(function()
					Tween(newSlider.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(20,20,20)})

				end)



				local Event

				newSlider.Frame.MouseEnter:Connect(function(x,y)
					if ShowInfo == true then
						InfoFrame.Visible = true

						InfoFrame.Title.Text = name
						InfoFrame.Description.Text = desc
						InfoFrame.Position = UDim2.fromOffset(x,y)

						Event = newSlider.Frame.MouseMoved:Connect(function(x,y)
							Tween(InfoFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.fromOffset(x,y)})
						end)
					end
				end)
				newSlider.Frame.MouseLeave:Connect(function()
					if ShowInfo == true then
						InfoFrame.Visible = false
						Event:Disconnect()
					end
				end)

				function self:Set(int)
					local inputText = int
					if inputText then
						if inputText <= max and inputText >= min then
							Label.Text = tostring(int)
							Tween(Fill, TweenInfo.new(delayTw, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.fromScale(convertValueToScale(inputText), 1) })
							config.Objects[nametab][name] = config.Objects[nametab][name] or inputText

							TaskThreads[name] = task.spawn(function()
								callback(inputText, newSlider)
                                SaveConfig()
							end)
						end
					end
				end

				return self
			end

			function TAB:AddDropdown(name, desc, tbl, callback)
				local self = setmetatable({}, TAB)

				local newDropdown = ReservedTabs.Dropdown:Clone()

				local list = tbl.list
				local default

				if config.Objects[nametab][name] then
					default = config.Objects[nametab][name]

					TaskThreads[name] = task.spawn(function()
						task.wait(1)
						callback(default)
                        SaveConfig()
					end)
				else
					default = tbl.default or "None"
					config.Objects[nametab][name] = default
					if default ~= "None" then
						TaskThreads[name] = task.spawn(function()
							task.wait(1)
							callback(default)
                            SaveConfig()
						end)
					end
				end

				local opened = false

				newDropdown.Name = name
				newDropdown.Visible = true
				newDropdown.Parent = newTab
				newDropdown.Frame.TextLabel.Text = name
				newDropdown.Frame.Select.Text = default

				local function Toggle()
					if opened == false then
						opened = true
						Tween(newDropdown.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
						Tween(newDropdown.SelectionFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0.9, 0,0, 90) })
					elseif opened == true then
						opened = false
						Tween(newDropdown.Frame.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
						Tween(newDropdown.SelectionFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0.9, 0,0, 0) })
					end
				end

				for i,v in ipairs(list) do
					local newOption = ReservedTabs.OptionDropdown:Clone()

					newOption.Name = v
					newOption.Parent = newDropdown.SelectionFrame.ScrollingFrame
					newOption.Text = v
					newOption.Visible = true

					newOption.MouseButton1Click:Connect(function()
						Toggle()
						newDropdown.Frame.Select.Text = v
						config.Objects[nametab][name] = v
						TaskThreads[name] = task.spawn(function()
							callback(v)
                            SaveConfig()
						end)
					end)

					newOption.MouseEnter:Connect(function()
						Tween(newOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(37,37,37)})
					end)
					newOption.MouseLeave:Connect(function()
						Tween(newOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
					end)
				end

				newDropdown.Frame.Select.MouseButton1Click:Connect(function()
					Toggle()
				end)

				local Event

				newDropdown.Frame.MouseEnter:Connect(function(x,y)
					if ShowInfo == true then
						InfoFrame.Visible = true

						InfoFrame.Title.Text = name
						InfoFrame.Description.Text = desc
						InfoFrame.Position = UDim2.fromOffset(x,y)

						Event = newDropdown.Frame.MouseMoved:Connect(function(x,y)
							Tween(InfoFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.fromOffset(x,y)})
						end)
					end
				end)
				newDropdown.Frame.MouseLeave:Connect(function()
					if ShowInfo == true then
						InfoFrame.Visible = false
						Event:Disconnect()
					end
				end)


				-- sesuai request sonic :batusenyum:
				function self:Clear()
					for _, options in pairs(newDropdown.SelectionFrame.ScrollingFrame:GetChildren()) do
						if options:IsA("TextButton") then
							options:Destroy()
						end
					end
				end

				function self:Add(tbl)
					if typeof(tbl) == "table" then
						for i,v in pairs(tbl) do
							local newOption = ReservedTabs.OptionDropdown:Clone()

							newOption.Name = v
							newOption.Parent = newDropdown.SelectionFrame.ScrollingFrame
							newOption.Text = v
							newOption.Visible = true

							newOption.MouseButton1Click:Connect(function()
								Toggle()
								newDropdown.Frame.Select.Text = v

								TaskThreads[name] = task.spawn(function()
									callback(v)
                                    SaveConfig()
								end)
							end)

							newOption.MouseEnter:Connect(function()
								Tween(newOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(37,37,37)})
							end)
							newOption.MouseLeave:Connect(function()
								Tween(newOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
							end)
						end
					elseif typeof(tbl) == "string" or typeof(tbl) == "number" then
						local newOption = ReservedTabs.OptionDropdown:Clone()

						newOption.Name = tbl or tostring(tbl)
						newOption.Parent = newDropdown.SelectionFrame.ScrollingFrame
						newOption.Text = tbl or tostring(tbl)
						newOption.Visible = true

						newOption.MouseButton1Click:Connect(function()
							Toggle()
							newDropdown.Frame.Select.Text = tbl

							TaskThreads[name] = task.spawn(function()
								callback(tbl)
                                SaveConfig()
							end)
						end)

						newOption.MouseEnter:Connect(function()
							Tween(newOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(37,37,37)})
						end)
						newOption.MouseLeave:Connect(function()
							Tween(newOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(30,30,30)})
						end)
					end
				end
				return self
			end

			

			return TAB
		end



		return LIBRARY

	end;
};

return require(GANTENGLIB["11a"]);
